<?xml version="1.0" encoding="UTF-8"?>
<coverage generated="1320887680426" clover="3.1.0">
   <project timestamp="1320887575141" name="EasyMock Parent 3.1 (Aggregated)">
      <metrics conditionals="432" methods="576" classes="82" files="77" packages="5" coveredstatements="1587" complexity="891" loc="10079" ncloc="4276" coveredmethods="576" coveredconditionals="432" statements="1587" coveredelements="2595" elements="2595"/>
      <package name="org.easymock">
         <metrics conditionals="30" methods="200" classes="11" files="11" coveredstatements="374" complexity="220" loc="3906" ncloc="990" coveredmethods="200" coveredconditionals="30" statements="374" coveredelements="604" elements="604"/>
         <file name="Capture.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\Capture.java">
            <metrics classes="1" methods="8" conditionals="12" ncloc="65" coveredstatements="30" coveredmethods="8" complexity="18" coveredconditionals="12" statements="30" loc="139" coveredelements="50" elements="50"/>
            <class name="Capture">
               <metrics methods="8" conditionals="12" coveredstatements="30" coveredmethods="8" complexity="18" coveredconditionals="12" statements="30" coveredelements="50" elements="50"/>
            </class>
            <line num="42" count="1" complexity="1" type="method" signature="Capture()"/>
            <line num="43" count="1" type="stmt"/>
            <line num="52" count="1" complexity="1" type="method" signature="Capture(CaptureType)"/>
            <line num="53" count="1" type="stmt"/>
            <line num="59" count="1" complexity="1" type="method" signature="reset() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="66" count="1" complexity="1" type="method" signature="hasCaptured() : boolean"/>
            <line num="67" count="1" type="stmt"/>
            <line num="78" count="1" complexity="3" type="method" signature="getValue() : T"/>
            <line num="79" count="1" type="stmt"/>
            <line num="79" falsecount="1" type="cond" truecount="1"/>
            <line num="80" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="82" falsecount="1" type="cond" truecount="1"/>
            <line num="83" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="94" count="1" complexity="1" type="method" signature="getValues() : List&lt;T&gt;"/>
            <line num="95" count="1" type="stmt"/>
            <line num="104" count="1" complexity="7" type="method" signature="setValue(T) : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="112" falsecount="1" type="cond" truecount="1"/>
            <line num="113" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="117" falsecount="1" type="cond" truecount="1"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="129" count="1" complexity="3" type="method" signature="toString() : String"/>
            <line num="131" count="1" type="stmt"/>
            <line num="131" falsecount="1" type="cond" truecount="1"/>
            <line num="132" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="134" falsecount="1" type="cond" truecount="1"/>
            <line num="135" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
         </file>
         <file name="CaptureType.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\CaptureType.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="7" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="44" coveredelements="0" elements="0"/>
            <class name="CaptureType">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="ConstructorArgs.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\ConstructorArgs.java">
            <metrics classes="1" methods="5" conditionals="14" ncloc="52" coveredstatements="26" coveredmethods="5" complexity="13" coveredconditionals="14" statements="26" loc="103" coveredelements="45" elements="45"/>
            <class name="ConstructorArgs">
               <metrics methods="5" conditionals="14" coveredstatements="26" coveredmethods="5" complexity="13" coveredconditionals="14" statements="26" coveredelements="45" elements="45"/>
            </class>
            <line num="39" count="1" complexity="1" type="method" signature="ConstructorArgs(Constructor&lt;?&gt;,Object)"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="9" type="method" signature="validateArgs() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="54" falsecount="1" type="cond" truecount="1"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="59" falsecount="1" type="cond" truecount="1"/>
            <line num="60" count="1" type="stmt"/>
            <line num="60" falsecount="1" type="cond" truecount="1"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="68" falsecount="1" type="cond" truecount="1"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="77" falsecount="1" type="cond" truecount="1"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="80" falsecount="1" type="cond" truecount="1"/>
            <line num="81" count="1" type="stmt"/>
            <line num="86" count="1" complexity="1" type="method" signature="throwException(Class&lt;?&gt;,Object) : IllegalArgumentException"/>
            <line num="87" count="1" type="stmt"/>
            <line num="93" count="1" complexity="1" type="method" signature="getInitArgs() : Object[]"/>
            <line num="94" count="1" type="stmt"/>
            <line num="100" count="1" complexity="1" type="method" signature="getConstructor() : Constructor&lt;?&gt;"/>
            <line num="101" count="1" type="stmt"/>
         </file>
         <file name="EasyMock.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\EasyMock.java">
            <metrics classes="1" methods="152" conditionals="4" ncloc="625" coveredstatements="271" coveredmethods="152" complexity="154" coveredconditionals="4" statements="271" loc="2258" coveredelements="427" elements="427"/>
            <class name="EasyMock">
               <metrics methods="152" conditionals="4" coveredstatements="271" coveredmethods="152" complexity="154" coveredconditionals="4" statements="271" coveredelements="427" elements="427"/>
            </class>
            <line num="68" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;) : T"/>
            <line num="69" count="1" type="stmt"/>
            <line num="87" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;) : T"/>
            <line num="88" count="1" type="stmt"/>
            <line num="102" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;) : T"/>
            <line num="103" count="1" type="stmt"/>
            <line num="122" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;) : T"/>
            <line num="123" count="1" type="stmt"/>
            <line num="138" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;) : T"/>
            <line num="139" count="1" type="stmt"/>
            <line num="159" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;) : T"/>
            <line num="160" count="1" type="stmt"/>
            <line num="178" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,Method) : T"/>
            <line num="180" count="1" type="stmt"/>
            <line num="200" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="203" count="1" type="stmt"/>
            <line num="223" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="226" count="1" type="stmt"/>
            <line num="248" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="251" count="1" type="stmt"/>
            <line num="269" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,Method) : T"/>
            <line num="271" count="1" type="stmt"/>
            <line num="291" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="293" count="1" type="stmt"/>
            <line num="313" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="316" count="1" type="stmt"/>
            <line num="338" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="341" count="1" type="stmt"/>
            <line num="360" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,Method) : T"/>
            <line num="362" count="1" type="stmt"/>
            <line num="383" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="386" count="1" type="stmt"/>
            <line num="407" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="410" count="1" type="stmt"/>
            <line num="433" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="436" count="1" type="stmt"/>
            <line num="450" count="1" complexity="1" type="method" signature="createMockBuilder(Class&lt;T&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="451" count="1" type="stmt"/>
            <line num="459" count="1" complexity="1" type="method" signature="createStrictControl() : IMocksControl"/>
            <line num="460" count="1" type="stmt"/>
            <line num="468" count="1" complexity="1" type="method" signature="createControl() : IMocksControl"/>
            <line num="469" count="1" type="stmt"/>
            <line num="479" count="1" complexity="1" type="method" signature="createNiceControl() : IMocksControl"/>
            <line num="480" count="1" type="stmt"/>
            <line num="497" count="1" complexity="1" type="method" signature="expect(T) : IExpectationSetters&lt;T&gt;"/>
            <line num="498" count="1" type="stmt"/>
            <line num="510" count="1" complexity="1" type="method" signature="expectLastCall() : IExpectationSetters&lt;T&gt;"/>
            <line num="511" count="1" type="stmt"/>
            <line num="514" count="1" complexity="2" type="method" signature="getControlForLastCall() : IExpectationSetters&lt;T&gt;"/>
            <line num="516" count="1" type="stmt"/>
            <line num="517" count="1" type="stmt"/>
            <line num="517" falsecount="1" type="cond" truecount="1"/>
            <line num="518" count="1" type="stmt"/>
            <line num="520" count="1" type="stmt"/>
            <line num="522" count="1" type="stmt"/>
            <line num="531" count="1" complexity="1" type="method" signature="anyBoolean() : boolean"/>
            <line num="532" count="1" type="stmt"/>
            <line num="533" count="1" type="stmt"/>
            <line num="541" count="1" complexity="1" type="method" signature="anyByte() : byte"/>
            <line num="542" count="1" type="stmt"/>
            <line num="543" count="1" type="stmt"/>
            <line num="551" count="1" complexity="1" type="method" signature="anyChar() : char"/>
            <line num="552" count="1" type="stmt"/>
            <line num="553" count="1" type="stmt"/>
            <line num="561" count="1" complexity="1" type="method" signature="anyInt() : int"/>
            <line num="562" count="1" type="stmt"/>
            <line num="563" count="1" type="stmt"/>
            <line num="571" count="1" complexity="1" type="method" signature="anyLong() : long"/>
            <line num="572" count="1" type="stmt"/>
            <line num="573" count="1" type="stmt"/>
            <line num="581" count="1" complexity="1" type="method" signature="anyFloat() : float"/>
            <line num="582" count="1" type="stmt"/>
            <line num="583" count="1" type="stmt"/>
            <line num="591" count="1" complexity="1" type="method" signature="anyDouble() : double"/>
            <line num="592" count="1" type="stmt"/>
            <line num="593" count="1" type="stmt"/>
            <line num="601" count="1" complexity="1" type="method" signature="anyShort() : short"/>
            <line num="602" count="1" type="stmt"/>
            <line num="603" count="1" type="stmt"/>
            <line num="624" count="1" complexity="1" type="method" signature="anyObject() : T"/>
            <line num="625" count="1" type="stmt"/>
            <line num="626" count="1" type="stmt"/>
            <line num="640" count="1" complexity="1" type="method" signature="anyObject(Class&lt;T&gt;) : T"/>
            <line num="641" count="1" type="stmt"/>
            <line num="642" count="1" type="stmt"/>
            <line num="655" count="1" complexity="1" type="method" signature="geq(Comparable&lt;T&gt;) : T"/>
            <line num="656" count="1" type="stmt"/>
            <line num="657" count="1" type="stmt"/>
            <line num="668" count="1" complexity="1" type="method" signature="geq(byte) : byte"/>
            <line num="669" count="1" type="stmt"/>
            <line num="670" count="1" type="stmt"/>
            <line num="681" count="1" complexity="1" type="method" signature="geq(double) : double"/>
            <line num="682" count="1" type="stmt"/>
            <line num="683" count="1" type="stmt"/>
            <line num="694" count="1" complexity="1" type="method" signature="geq(float) : float"/>
            <line num="695" count="1" type="stmt"/>
            <line num="696" count="1" type="stmt"/>
            <line num="707" count="1" complexity="1" type="method" signature="geq(int) : int"/>
            <line num="708" count="1" type="stmt"/>
            <line num="709" count="1" type="stmt"/>
            <line num="720" count="1" complexity="1" type="method" signature="geq(long) : long"/>
            <line num="721" count="1" type="stmt"/>
            <line num="722" count="1" type="stmt"/>
            <line num="733" count="1" complexity="1" type="method" signature="geq(short) : short"/>
            <line num="734" count="1" type="stmt"/>
            <line num="735" count="1" type="stmt"/>
            <line num="748" count="1" complexity="1" type="method" signature="leq(Comparable&lt;T&gt;) : T"/>
            <line num="749" count="1" type="stmt"/>
            <line num="750" count="1" type="stmt"/>
            <line num="761" count="1" complexity="1" type="method" signature="leq(byte) : byte"/>
            <line num="762" count="1" type="stmt"/>
            <line num="763" count="1" type="stmt"/>
            <line num="774" count="1" complexity="1" type="method" signature="leq(double) : double"/>
            <line num="775" count="1" type="stmt"/>
            <line num="776" count="1" type="stmt"/>
            <line num="787" count="1" complexity="1" type="method" signature="leq(float) : float"/>
            <line num="788" count="1" type="stmt"/>
            <line num="789" count="1" type="stmt"/>
            <line num="800" count="1" complexity="1" type="method" signature="leq(int) : int"/>
            <line num="801" count="1" type="stmt"/>
            <line num="802" count="1" type="stmt"/>
            <line num="813" count="1" complexity="1" type="method" signature="leq(long) : long"/>
            <line num="814" count="1" type="stmt"/>
            <line num="815" count="1" type="stmt"/>
            <line num="826" count="1" complexity="1" type="method" signature="leq(short) : short"/>
            <line num="827" count="1" type="stmt"/>
            <line num="828" count="1" type="stmt"/>
            <line num="841" count="1" complexity="1" type="method" signature="gt(Comparable&lt;T&gt;) : T"/>
            <line num="842" count="1" type="stmt"/>
            <line num="843" count="1" type="stmt"/>
            <line num="854" count="1" complexity="1" type="method" signature="gt(byte) : byte"/>
            <line num="855" count="1" type="stmt"/>
            <line num="856" count="1" type="stmt"/>
            <line num="867" count="1" complexity="1" type="method" signature="gt(double) : double"/>
            <line num="868" count="1" type="stmt"/>
            <line num="869" count="1" type="stmt"/>
            <line num="880" count="1" complexity="1" type="method" signature="gt(float) : float"/>
            <line num="881" count="1" type="stmt"/>
            <line num="882" count="1" type="stmt"/>
            <line num="893" count="1" complexity="1" type="method" signature="gt(int) : int"/>
            <line num="894" count="1" type="stmt"/>
            <line num="895" count="1" type="stmt"/>
            <line num="906" count="1" complexity="1" type="method" signature="gt(long) : long"/>
            <line num="907" count="1" type="stmt"/>
            <line num="908" count="1" type="stmt"/>
            <line num="919" count="1" complexity="1" type="method" signature="gt(short) : short"/>
            <line num="920" count="1" type="stmt"/>
            <line num="921" count="1" type="stmt"/>
            <line num="934" count="1" complexity="1" type="method" signature="lt(Comparable&lt;T&gt;) : T"/>
            <line num="935" count="1" type="stmt"/>
            <line num="936" count="1" type="stmt"/>
            <line num="947" count="1" complexity="1" type="method" signature="lt(byte) : byte"/>
            <line num="948" count="1" type="stmt"/>
            <line num="949" count="1" type="stmt"/>
            <line num="960" count="1" complexity="1" type="method" signature="lt(double) : double"/>
            <line num="961" count="1" type="stmt"/>
            <line num="962" count="1" type="stmt"/>
            <line num="973" count="1" complexity="1" type="method" signature="lt(float) : float"/>
            <line num="974" count="1" type="stmt"/>
            <line num="975" count="1" type="stmt"/>
            <line num="986" count="1" complexity="1" type="method" signature="lt(int) : int"/>
            <line num="987" count="1" type="stmt"/>
            <line num="988" count="1" type="stmt"/>
            <line num="999" count="1" complexity="1" type="method" signature="lt(long) : long"/>
            <line num="1000" count="1" type="stmt"/>
            <line num="1001" count="1" type="stmt"/>
            <line num="1012" count="1" complexity="1" type="method" signature="lt(short) : short"/>
            <line num="1013" count="1" type="stmt"/>
            <line num="1014" count="1" type="stmt"/>
            <line num="1027" count="1" complexity="1" type="method" signature="isA(Class&lt;T&gt;) : T"/>
            <line num="1028" count="1" type="stmt"/>
            <line num="1029" count="1" type="stmt"/>
            <line num="1040" count="1" complexity="1" type="method" signature="contains(String) : String"/>
            <line num="1041" count="1" type="stmt"/>
            <line num="1042" count="1" type="stmt"/>
            <line num="1054" count="1" complexity="1" type="method" signature="and(boolean,boolean) : boolean"/>
            <line num="1055" count="1" type="stmt"/>
            <line num="1056" count="1" type="stmt"/>
            <line num="1068" count="1" complexity="1" type="method" signature="and(byte,byte) : byte"/>
            <line num="1069" count="1" type="stmt"/>
            <line num="1070" count="1" type="stmt"/>
            <line num="1082" count="1" complexity="1" type="method" signature="and(char,char) : char"/>
            <line num="1083" count="1" type="stmt"/>
            <line num="1084" count="1" type="stmt"/>
            <line num="1096" count="1" complexity="1" type="method" signature="and(double,double) : double"/>
            <line num="1097" count="1" type="stmt"/>
            <line num="1098" count="1" type="stmt"/>
            <line num="1110" count="1" complexity="1" type="method" signature="and(float,float) : float"/>
            <line num="1111" count="1" type="stmt"/>
            <line num="1112" count="1" type="stmt"/>
            <line num="1124" count="1" complexity="1" type="method" signature="and(int,int) : int"/>
            <line num="1125" count="1" type="stmt"/>
            <line num="1126" count="1" type="stmt"/>
            <line num="1138" count="1" complexity="1" type="method" signature="and(long,long) : long"/>
            <line num="1139" count="1" type="stmt"/>
            <line num="1140" count="1" type="stmt"/>
            <line num="1152" count="1" complexity="1" type="method" signature="and(short,short) : short"/>
            <line num="1153" count="1" type="stmt"/>
            <line num="1154" count="1" type="stmt"/>
            <line num="1168" count="1" complexity="1" type="method" signature="and(T,T) : T"/>
            <line num="1169" count="1" type="stmt"/>
            <line num="1170" count="1" type="stmt"/>
            <line num="1182" count="1" complexity="1" type="method" signature="or(boolean,boolean) : boolean"/>
            <line num="1183" count="1" type="stmt"/>
            <line num="1184" count="1" type="stmt"/>
            <line num="1196" count="1" complexity="1" type="method" signature="or(byte,byte) : byte"/>
            <line num="1197" count="1" type="stmt"/>
            <line num="1198" count="1" type="stmt"/>
            <line num="1210" count="1" complexity="1" type="method" signature="or(char,char) : char"/>
            <line num="1211" count="1" type="stmt"/>
            <line num="1212" count="1" type="stmt"/>
            <line num="1224" count="1" complexity="1" type="method" signature="or(double,double) : double"/>
            <line num="1225" count="1" type="stmt"/>
            <line num="1226" count="1" type="stmt"/>
            <line num="1238" count="1" complexity="1" type="method" signature="or(float,float) : float"/>
            <line num="1239" count="1" type="stmt"/>
            <line num="1240" count="1" type="stmt"/>
            <line num="1252" count="1" complexity="1" type="method" signature="or(int,int) : int"/>
            <line num="1253" count="1" type="stmt"/>
            <line num="1254" count="1" type="stmt"/>
            <line num="1266" count="1" complexity="1" type="method" signature="or(long,long) : long"/>
            <line num="1267" count="1" type="stmt"/>
            <line num="1268" count="1" type="stmt"/>
            <line num="1280" count="1" complexity="1" type="method" signature="or(short,short) : short"/>
            <line num="1281" count="1" type="stmt"/>
            <line num="1282" count="1" type="stmt"/>
            <line num="1296" count="1" complexity="1" type="method" signature="or(T,T) : T"/>
            <line num="1297" count="1" type="stmt"/>
            <line num="1298" count="1" type="stmt"/>
            <line num="1308" count="1" complexity="1" type="method" signature="not(boolean) : boolean"/>
            <line num="1309" count="1" type="stmt"/>
            <line num="1310" count="1" type="stmt"/>
            <line num="1320" count="1" complexity="1" type="method" signature="not(byte) : byte"/>
            <line num="1321" count="1" type="stmt"/>
            <line num="1322" count="1" type="stmt"/>
            <line num="1332" count="1" complexity="1" type="method" signature="not(char) : char"/>
            <line num="1333" count="1" type="stmt"/>
            <line num="1334" count="1" type="stmt"/>
            <line num="1344" count="1" complexity="1" type="method" signature="not(double) : double"/>
            <line num="1345" count="1" type="stmt"/>
            <line num="1346" count="1" type="stmt"/>
            <line num="1356" count="1" complexity="1" type="method" signature="not(float) : float"/>
            <line num="1357" count="1" type="stmt"/>
            <line num="1358" count="1" type="stmt"/>
            <line num="1368" count="1" complexity="1" type="method" signature="not(int) : int"/>
            <line num="1369" count="1" type="stmt"/>
            <line num="1370" count="1" type="stmt"/>
            <line num="1380" count="1" complexity="1" type="method" signature="not(long) : long"/>
            <line num="1381" count="1" type="stmt"/>
            <line num="1382" count="1" type="stmt"/>
            <line num="1392" count="1" complexity="1" type="method" signature="not(short) : short"/>
            <line num="1393" count="1" type="stmt"/>
            <line num="1394" count="1" type="stmt"/>
            <line num="1406" count="1" complexity="1" type="method" signature="not(T) : T"/>
            <line num="1407" count="1" type="stmt"/>
            <line num="1408" count="1" type="stmt"/>
            <line num="1418" count="1" complexity="1" type="method" signature="eq(boolean) : boolean"/>
            <line num="1419" count="1" type="stmt"/>
            <line num="1420" count="1" type="stmt"/>
            <line num="1430" count="1" complexity="1" type="method" signature="eq(byte) : byte"/>
            <line num="1431" count="1" type="stmt"/>
            <line num="1432" count="1" type="stmt"/>
            <line num="1442" count="1" complexity="1" type="method" signature="eq(char) : char"/>
            <line num="1443" count="1" type="stmt"/>
            <line num="1444" count="1" type="stmt"/>
            <line num="1454" count="1" complexity="1" type="method" signature="eq(double) : double"/>
            <line num="1455" count="1" type="stmt"/>
            <line num="1456" count="1" type="stmt"/>
            <line num="1466" count="1" complexity="1" type="method" signature="eq(float) : float"/>
            <line num="1467" count="1" type="stmt"/>
            <line num="1468" count="1" type="stmt"/>
            <line num="1478" count="1" complexity="1" type="method" signature="eq(int) : int"/>
            <line num="1479" count="1" type="stmt"/>
            <line num="1480" count="1" type="stmt"/>
            <line num="1490" count="1" complexity="1" type="method" signature="eq(long) : long"/>
            <line num="1491" count="1" type="stmt"/>
            <line num="1492" count="1" type="stmt"/>
            <line num="1502" count="1" complexity="1" type="method" signature="eq(short) : short"/>
            <line num="1503" count="1" type="stmt"/>
            <line num="1504" count="1" type="stmt"/>
            <line num="1516" count="1" complexity="1" type="method" signature="eq(T) : T"/>
            <line num="1517" count="1" type="stmt"/>
            <line num="1518" count="1" type="stmt"/>
            <line num="1529" count="1" complexity="1" type="method" signature="aryEq(boolean[]) : boolean[]"/>
            <line num="1530" count="1" type="stmt"/>
            <line num="1531" count="1" type="stmt"/>
            <line num="1542" count="1" complexity="1" type="method" signature="aryEq(byte[]) : byte[]"/>
            <line num="1543" count="1" type="stmt"/>
            <line num="1544" count="1" type="stmt"/>
            <line num="1555" count="1" complexity="1" type="method" signature="aryEq(char[]) : char[]"/>
            <line num="1556" count="1" type="stmt"/>
            <line num="1557" count="1" type="stmt"/>
            <line num="1568" count="1" complexity="1" type="method" signature="aryEq(double[]) : double[]"/>
            <line num="1569" count="1" type="stmt"/>
            <line num="1570" count="1" type="stmt"/>
            <line num="1581" count="1" complexity="1" type="method" signature="aryEq(float[]) : float[]"/>
            <line num="1582" count="1" type="stmt"/>
            <line num="1583" count="1" type="stmt"/>
            <line num="1594" count="1" complexity="1" type="method" signature="aryEq(int[]) : int[]"/>
            <line num="1595" count="1" type="stmt"/>
            <line num="1596" count="1" type="stmt"/>
            <line num="1607" count="1" complexity="1" type="method" signature="aryEq(long[]) : long[]"/>
            <line num="1608" count="1" type="stmt"/>
            <line num="1609" count="1" type="stmt"/>
            <line num="1620" count="1" complexity="1" type="method" signature="aryEq(short[]) : short[]"/>
            <line num="1621" count="1" type="stmt"/>
            <line num="1622" count="1" type="stmt"/>
            <line num="1635" count="1" complexity="1" type="method" signature="aryEq(T[]) : T[]"/>
            <line num="1636" count="1" type="stmt"/>
            <line num="1637" count="1" type="stmt"/>
            <line num="1656" count="1" complexity="1" type="method" signature="isNull() : T"/>
            <line num="1657" count="1" type="stmt"/>
            <line num="1658" count="1" type="stmt"/>
            <line num="1673" count="1" complexity="1" type="method" signature="isNull(Class&lt;T&gt;) : T"/>
            <line num="1674" count="1" type="stmt"/>
            <line num="1675" count="1" type="stmt"/>
            <line num="1694" count="1" complexity="1" type="method" signature="notNull() : T"/>
            <line num="1695" count="1" type="stmt"/>
            <line num="1696" count="1" type="stmt"/>
            <line num="1711" count="1" complexity="1" type="method" signature="notNull(Class&lt;T&gt;) : T"/>
            <line num="1712" count="1" type="stmt"/>
            <line num="1713" count="1" type="stmt"/>
            <line num="1724" count="1" complexity="1" type="method" signature="find(String) : String"/>
            <line num="1725" count="1" type="stmt"/>
            <line num="1726" count="1" type="stmt"/>
            <line num="1737" count="1" complexity="1" type="method" signature="matches(String) : String"/>
            <line num="1738" count="1" type="stmt"/>
            <line num="1739" count="1" type="stmt"/>
            <line num="1750" count="1" complexity="1" type="method" signature="startsWith(String) : String"/>
            <line num="1751" count="1" type="stmt"/>
            <line num="1752" count="1" type="stmt"/>
            <line num="1763" count="1" complexity="1" type="method" signature="endsWith(String) : String"/>
            <line num="1764" count="1" type="stmt"/>
            <line num="1765" count="1" type="stmt"/>
            <line num="1779" count="1" complexity="1" type="method" signature="eq(double,double) : double"/>
            <line num="1780" count="1" type="stmt"/>
            <line num="1781" count="1" type="stmt"/>
            <line num="1795" count="1" complexity="1" type="method" signature="eq(float,float) : float"/>
            <line num="1796" count="1" type="stmt"/>
            <line num="1797" count="1" type="stmt"/>
            <line num="1810" count="1" complexity="1" type="method" signature="same(T) : T"/>
            <line num="1811" count="1" type="stmt"/>
            <line num="1812" count="1" type="stmt"/>
            <line num="1825" count="1" complexity="1" type="method" signature="cmpEq(Comparable&lt;T&gt;) : T"/>
            <line num="1826" count="1" type="stmt"/>
            <line num="1827" count="1" type="stmt"/>
            <line num="1848" count="1" complexity="1" type="method" signature="cmp(T,Comparator&lt;? super T&gt;,LogicalOperator) : T"/>
            <line num="1850" count="1" type="stmt"/>
            <line num="1851" count="1" type="stmt"/>
            <line num="1871" count="1" complexity="1" type="method" signature="capture(Capture&lt;T&gt;) : T"/>
            <line num="1872" count="1" type="stmt"/>
            <line num="1873" count="1" type="stmt"/>
            <line num="1883" count="1" complexity="1" type="method" signature="captureBoolean(Capture&lt;Boolean&gt;) : boolean"/>
            <line num="1884" count="1" type="stmt"/>
            <line num="1885" count="1" type="stmt"/>
            <line num="1895" count="1" complexity="1" type="method" signature="captureInt(Capture&lt;Integer&gt;) : int"/>
            <line num="1896" count="1" type="stmt"/>
            <line num="1897" count="1" type="stmt"/>
            <line num="1907" count="1" complexity="1" type="method" signature="captureLong(Capture&lt;Long&gt;) : long"/>
            <line num="1908" count="1" type="stmt"/>
            <line num="1909" count="1" type="stmt"/>
            <line num="1919" count="1" complexity="1" type="method" signature="captureFloat(Capture&lt;Float&gt;) : float"/>
            <line num="1920" count="1" type="stmt"/>
            <line num="1921" count="1" type="stmt"/>
            <line num="1931" count="1" complexity="1" type="method" signature="captureDouble(Capture&lt;Double&gt;) : double"/>
            <line num="1932" count="1" type="stmt"/>
            <line num="1933" count="1" type="stmt"/>
            <line num="1943" count="1" complexity="1" type="method" signature="captureByte(Capture&lt;Byte&gt;) : byte"/>
            <line num="1944" count="1" type="stmt"/>
            <line num="1945" count="1" type="stmt"/>
            <line num="1955" count="1" complexity="1" type="method" signature="captureChar(Capture&lt;Character&gt;) : char"/>
            <line num="1956" count="1" type="stmt"/>
            <line num="1957" count="1" type="stmt"/>
            <line num="1970" count="1" complexity="1" type="method" signature="capture(Capture&lt;Boolean&gt;) : boolean"/>
            <line num="1972" count="1" type="stmt"/>
            <line num="1985" count="1" complexity="1" type="method" signature="capture(Capture&lt;Integer&gt;) : int"/>
            <line num="1987" count="1" type="stmt"/>
            <line num="2000" count="1" complexity="1" type="method" signature="capture(Capture&lt;Long&gt;) : long"/>
            <line num="2002" count="1" type="stmt"/>
            <line num="2015" count="1" complexity="1" type="method" signature="capture(Capture&lt;Float&gt;) : float"/>
            <line num="2017" count="1" type="stmt"/>
            <line num="2030" count="1" complexity="1" type="method" signature="capture(Capture&lt;Double&gt;) : double"/>
            <line num="2032" count="1" type="stmt"/>
            <line num="2045" count="1" complexity="1" type="method" signature="capture(Capture&lt;Byte&gt;) : byte"/>
            <line num="2047" count="1" type="stmt"/>
            <line num="2060" count="1" complexity="1" type="method" signature="capture(Capture&lt;Character&gt;) : char"/>
            <line num="2062" count="1" type="stmt"/>
            <line num="2072" count="1" complexity="1" type="method" signature="replay(Object) : void"/>
            <line num="2073" count="1" type="stmt"/>
            <line num="2074" count="1" type="stmt"/>
            <line num="2085" count="1" complexity="1" type="method" signature="reset(Object) : void"/>
            <line num="2086" count="1" type="stmt"/>
            <line num="2087" count="1" type="stmt"/>
            <line num="2099" count="1" complexity="1" type="method" signature="resetToNice(Object) : void"/>
            <line num="2100" count="1" type="stmt"/>
            <line num="2101" count="1" type="stmt"/>
            <line num="2113" count="1" complexity="1" type="method" signature="resetToDefault(Object) : void"/>
            <line num="2114" count="1" type="stmt"/>
            <line num="2115" count="1" type="stmt"/>
            <line num="2127" count="1" complexity="1" type="method" signature="resetToStrict(Object) : void"/>
            <line num="2128" count="1" type="stmt"/>
            <line num="2129" count="1" type="stmt"/>
            <line num="2140" count="1" complexity="1" type="method" signature="verify(Object) : void"/>
            <line num="2141" count="1" type="stmt"/>
            <line num="2142" count="1" type="stmt"/>
            <line num="2157" count="1" complexity="1" type="method" signature="checkOrder(Object,boolean) : void"/>
            <line num="2158" count="1" type="stmt"/>
            <line num="2167" count="1" complexity="1" type="method" signature="reportMatcher(IArgumentMatcher) : void"/>
            <line num="2168" count="1" type="stmt"/>
            <line num="2171" count="1" complexity="1" type="method" signature="getControl(Object) : MocksControl"/>
            <line num="2172" count="1" type="stmt"/>
            <line num="2184" count="1" complexity="2" type="method" signature="getCurrentArguments() : Object[]"/>
            <line num="2185" count="1" type="stmt"/>
            <line num="2186" count="1" type="stmt"/>
            <line num="2186" falsecount="1" type="cond" truecount="1"/>
            <line num="2187" count="1" type="stmt"/>
            <line num="2190" count="1" type="stmt"/>
            <line num="2204" count="1" complexity="1" type="method" signature="makeThreadSafe(Object,boolean) : void"/>
            <line num="2205" count="1" type="stmt"/>
            <line num="2220" count="1" complexity="1" type="method" signature="checkIsUsedInOneThread(Object,boolean) : void"/>
            <line num="2221" count="1" type="stmt"/>
            <line num="2231" count="1" complexity="1" type="method" signature="getEasyMockProperty(String) : String"/>
            <line num="2232" count="1" type="stmt"/>
            <line num="2250" count="1" complexity="1" type="method" signature="setEasyMockProperty(String,String) : String"/>
            <line num="2251" count="1" type="stmt"/>
         </file>
         <file name="EasyMockSupport.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\EasyMockSupport.java">
            <metrics classes="1" methods="28" conditionals="0" ncloc="128" coveredstatements="40" coveredmethods="28" complexity="28" coveredconditionals="0" statements="40" loc="547" coveredelements="68" elements="68"/>
            <class name="EasyMockSupport">
               <metrics methods="28" conditionals="0" coveredstatements="40" coveredmethods="28" complexity="28" coveredconditionals="0" statements="40" coveredelements="68" elements="68"/>
            </class>
            <line num="68" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,Method) : T"/>
            <line num="70" count="1" type="stmt"/>
            <line num="90" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="92" count="1" type="stmt"/>
            <line num="112" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="115" count="1" type="stmt"/>
            <line num="137" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="140" count="1" type="stmt"/>
            <line num="158" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,Method) : T"/>
            <line num="160" count="1" type="stmt"/>
            <line num="180" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="182" count="1" type="stmt"/>
            <line num="202" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="205" count="1" type="stmt"/>
            <line num="227" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="230" count="1" type="stmt"/>
            <line num="249" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,Method) : T"/>
            <line num="251" count="1" type="stmt"/>
            <line num="272" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="274" count="1" type="stmt"/>
            <line num="295" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="298" count="1" type="stmt"/>
            <line num="321" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="324" count="1" type="stmt"/>
            <line num="338" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;) : T"/>
            <line num="339" count="1" type="stmt"/>
            <line num="357" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;) : T"/>
            <line num="358" count="1" type="stmt"/>
            <line num="372" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;) : T"/>
            <line num="373" count="1" type="stmt"/>
            <line num="392" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;) : T"/>
            <line num="393" count="1" type="stmt"/>
            <line num="408" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;) : T"/>
            <line num="409" count="1" type="stmt"/>
            <line num="429" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;) : T"/>
            <line num="430" count="1" type="stmt"/>
            <line num="438" count="1" complexity="1" type="method" signature="createStrictControl() : IMocksControl"/>
            <line num="439" count="1" type="stmt"/>
            <line num="440" count="1" type="stmt"/>
            <line num="441" count="1" type="stmt"/>
            <line num="455" count="1" complexity="1" type="method" signature="createMockBuilder(Class&lt;T&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="456" count="1" type="stmt"/>
            <line num="464" count="1" complexity="1" type="method" signature="createControl() : IMocksControl"/>
            <line num="465" count="1" type="stmt"/>
            <line num="466" count="1" type="stmt"/>
            <line num="467" count="1" type="stmt"/>
            <line num="477" count="1" complexity="1" type="method" signature="createNiceControl() : IMocksControl"/>
            <line num="478" count="1" type="stmt"/>
            <line num="479" count="1" type="stmt"/>
            <line num="480" count="1" type="stmt"/>
            <line num="488" count="1" complexity="1" type="method" signature="replayAll() : void"/>
            <line num="489" count="1" type="stmt"/>
            <line num="490" count="1" type="stmt"/>
            <line num="498" count="1" complexity="1" type="method" signature="resetAll() : void"/>
            <line num="499" count="1" type="stmt"/>
            <line num="500" count="1" type="stmt"/>
            <line num="508" count="1" complexity="1" type="method" signature="verifyAll() : void"/>
            <line num="509" count="1" type="stmt"/>
            <line num="510" count="1" type="stmt"/>
            <line num="519" count="1" complexity="1" type="method" signature="resetAllToNice() : void"/>
            <line num="520" count="1" type="stmt"/>
            <line num="521" count="1" type="stmt"/>
            <line num="530" count="1" complexity="1" type="method" signature="resetAllToDefault() : void"/>
            <line num="531" count="1" type="stmt"/>
            <line num="532" count="1" type="stmt"/>
            <line num="541" count="1" complexity="1" type="method" signature="resetAllToStrict() : void"/>
            <line num="542" count="1" type="stmt"/>
            <line num="543" count="1" type="stmt"/>
         </file>
         <file name="IAnswer.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\IAnswer.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="4" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="40" coveredelements="0" elements="0"/>
            <class name="IAnswer">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IArgumentMatcher.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\IArgumentMatcher.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="5" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="51" coveredelements="0" elements="0"/>
            <class name="IArgumentMatcher">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IExpectationSetters.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\IExpectationSetters.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="17" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="154" coveredelements="0" elements="0"/>
            <class name="IExpectationSetters">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IMockBuilder.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\IMockBuilder.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="23" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="313" coveredelements="0" elements="0"/>
            <class name="IMockBuilder">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IMocksControl.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\IMocksControl.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="23" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="191" coveredelements="0" elements="0"/>
            <class name="IMocksControl">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="LogicalOperator.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\LogicalOperator.java">
            <metrics classes="1" methods="7" conditionals="0" ncloc="41" coveredstatements="7" coveredmethods="7" complexity="7" coveredconditionals="0" statements="7" loc="66" coveredelements="14" elements="14"/>
            <class name="LogicalOperator">
               <metrics methods="7" conditionals="0" coveredstatements="7" coveredmethods="7" complexity="7" coveredconditionals="0" statements="7" coveredelements="14" elements="14"/>
            </class>
            <line num="25" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="27" count="1" type="stmt"/>
            <line num="31" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="33" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="45" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="51" count="1" type="stmt"/>
            <line num="57" count="1" complexity="1" type="method" signature="LogicalOperator(String)"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" count="1" complexity="1" type="method" signature="getSymbol() : String"/>
            <line num="62" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.internal">
         <metrics conditionals="364" methods="277" classes="40" files="35" coveredstatements="1058" complexity="534" loc="4465" ncloc="2661" coveredmethods="277" coveredconditionals="364" statements="1058" coveredelements="1699" elements="1699"/>
         <file name="ArgumentToString.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ArgumentToString.java">
            <metrics classes="1" methods="3" conditionals="18" ncloc="48" coveredstatements="29" coveredmethods="3" complexity="12" coveredconditionals="18" statements="29" loc="97" coveredelements="50" elements="50"/>
            <class name="ArgumentToString">
               <metrics methods="3" conditionals="18" coveredstatements="29" coveredmethods="3" complexity="12" coveredconditionals="18" statements="29" coveredelements="50" elements="50"/>
            </class>
            <line num="33" count="1" complexity="7" type="method" signature="appendArgument(Object,StringBuffer) : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="34" falsecount="1" type="cond" truecount="1"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="36" falsecount="1" type="cond" truecount="1"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="40" falsecount="1" type="cond" truecount="1"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="44" falsecount="1" type="cond" truecount="1"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="46" falsecount="1" type="cond" truecount="1"/>
            <line num="47" count="1" type="stmt"/>
            <line num="47" falsecount="1" type="cond" truecount="1"/>
            <line num="48" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="66" count="1" complexity="1" type="method" signature="argumentToString(Object) : String"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="82" count="1" complexity="4" type="method" signature="argumentsToString(Object) : String"/>
            <line num="83" count="1" type="stmt"/>
            <line num="83" falsecount="1" type="cond" truecount="1"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="89" falsecount="1" type="cond" truecount="1"/>
            <line num="90" count="1" type="stmt"/>
            <line num="90" falsecount="1" type="cond" truecount="1"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
         </file>
         <file name="AssertionErrorWrapper.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\AssertionErrorWrapper.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="11" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" loc="34" coveredelements="4" elements="4"/>
            <class name="AssertionErrorWrapper">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <line num="27" count="1" complexity="1" type="method" signature="AssertionErrorWrapper(AssertionError)"/>
            <line num="28" count="1" type="stmt"/>
            <line num="31" count="1" complexity="1" type="method" signature="getAssertionError() : AssertionError"/>
            <line num="32" count="1" type="stmt"/>
         </file>
         <file name="BridgeMethodResolver.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\BridgeMethodResolver.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="241" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="444" coveredelements="0" elements="0"/>
            <class name="BridgeMethodResolver">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="ClassExtensionHelper.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ClassExtensionHelper.java">
            <metrics classes="1" methods="5" conditionals="6" ncloc="43" coveredstatements="16" coveredmethods="5" complexity="9" coveredconditionals="6" statements="16" loc="88" coveredelements="27" elements="27"/>
            <class name="ClassExtensionHelper">
               <metrics methods="5" conditionals="6" coveredstatements="16" coveredmethods="5" complexity="9" coveredconditionals="6" statements="16" coveredelements="27" elements="27"/>
            </class>
            <line num="39" count="1" complexity="1" type="method" signature="setCurrentConstructorArgs(ConstructorArgs) : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="getCurrentConstructorArgs() : ConstructorArgs"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="1" complexity="1" type="method" signature="getInterceptor(Object) : MockMethodInterceptor"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" count="1" complexity="4" type="method" signature="getControl(Object) : MocksControl"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="56" falsecount="1" type="cond" truecount="1"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="58" falsecount="1" type="cond" truecount="1"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="81" count="1" complexity="2" type="method" signature="getMockedType(V) : Class&lt;T&gt;"/>
            <line num="83" count="1" type="stmt"/>
            <line num="83" falsecount="1" type="cond" truecount="1"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
         </file>
         <file name="ClassInstantiatorFactory.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ClassInstantiatorFactory.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="24" coveredstatements="6" coveredmethods="6" complexity="6" coveredconditionals="0" statements="6" loc="81" coveredelements="12" elements="12"/>
            <class name="ClassInstantiatorFactory">
               <metrics methods="6" conditionals="0" coveredstatements="6" coveredmethods="6" complexity="6" coveredconditionals="0" statements="6" coveredelements="12" elements="12"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="getJVM() : String"/>
            <line num="39" count="1" type="stmt"/>
            <line num="47" count="1" complexity="1" type="method" signature="getJVMSpecificationVersion() : String"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" count="1" complexity="1" type="method" signature="is1_3Specifications() : boolean"/>
            <line num="52" count="1" type="stmt"/>
            <line num="60" count="1" complexity="1" type="method" signature="getInstantiator() : IClassInstantiator"/>
            <line num="61" count="1" type="stmt"/>
            <line num="71" count="1" complexity="1" type="method" signature="setInstantiator(IClassInstantiator) : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="78" count="1" complexity="1" type="method" signature="setDefaultInstantiator() : void"/>
            <line num="79" count="1" type="stmt"/>
         </file>
         <file name="ClassProxyFactory.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ClassProxyFactory.java">
            <metrics classes="2" methods="9" conditionals="16" ncloc="155" coveredstatements="61" coveredmethods="9" complexity="27" coveredconditionals="16" statements="61" loc="271" coveredelements="86" elements="86"/>
            <class name="ClassProxyFactory">
               <metrics methods="3" conditionals="2" coveredstatements="29" coveredmethods="3" complexity="10" coveredconditionals="2" statements="29" coveredelements="34" elements="34"/>
            </class>
            <class name="ClassProxyFactory.MockMethodInterceptor">
               <metrics methods="6" conditionals="14" coveredstatements="32" coveredmethods="6" complexity="17" coveredconditionals="14" statements="32" coveredelements="52" elements="52"/>
            </class>
            <line num="50" count="1" complexity="1" type="method" signature="MockMethodInterceptor(InvocationHandler)"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" count="1" complexity="9" type="method" signature="intercept(Object,Method,Object[],MethodProxy) : Object"/>
            <line num="58" count="1" type="stmt"/>
            <line num="58" falsecount="1" type="cond" truecount="1"/>
            <line num="59" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="64" falsecount="1" type="cond" truecount="1"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="71" falsecount="1" type="cond" truecount="1"/>
            <line num="73" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="86" falsecount="1" type="cond" truecount="1"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="90" falsecount="1" type="cond" truecount="1"/>
            <line num="91" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" count="1" complexity="1" type="method" signature="getHandler() : InvocationHandler"/>
            <line num="98" count="1" type="stmt"/>
            <line num="101" count="1" complexity="1" type="method" signature="setMockedMethods(Method) : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" complexity="3" type="method" signature="readObject(java.io.ObjectInputStream) : void"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="111" falsecount="1" type="cond" truecount="1"/>
            <line num="112" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="127" count="1" complexity="2" type="method" signature="writeObject(java.io.ObjectOutputStream) : void"/>
            <line num="128" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="130" falsecount="1" type="cond" truecount="1"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="156" count="1" complexity="8" type="method" signature="createProxy(Class&lt;T&gt;,InvocationHandler) : T"/>
            <line num="159" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="182" falsecount="1" type="cond" truecount="1"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="213" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="237" count="1" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="247" count="1" complexity="1" type="method" signature="createEnhancer(Class&lt;T&gt;) : Enhancer"/>
            <line num="249" count="1" type="stmt"/>
            <line num="254" count="1" complexity="1" type="method" signature="filterConstructors(Class,List) : void"/>
            <line num="257" count="1" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="269" count="1" type="stmt"/>
         </file>
         <file name="DefaultClassInstantiator.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\DefaultClassInstantiator.java">
            <metrics classes="1" methods="8" conditionals="12" ncloc="115" coveredstatements="48" coveredmethods="8" complexity="22" coveredconditionals="12" statements="48" loc="205" coveredelements="68" elements="68"/>
            <class name="DefaultClassInstantiator">
               <metrics methods="8" conditionals="12" coveredstatements="48" coveredmethods="8" complexity="22" coveredconditionals="12" statements="48" coveredelements="68" elements="68"/>
            </class>
            <line num="38" count="1" complexity="7" type="method" signature="newInstance(Class&lt;?&gt;) : Object"/>
            <line num="40" count="1" type="stmt"/>
            <line num="40" falsecount="1" type="cond" truecount="1"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="76" count="1" complexity="1" type="method" signature="isSerializable(Class&lt;?&gt;) : boolean"/>
            <line num="77" count="1" type="stmt"/>
            <line num="89" count="1" complexity="3" type="method" signature="getConstructorToUse(Class&lt;?&gt;) : Constructor&lt;?&gt;"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="95" falsecount="1" type="cond" truecount="1"/>
            <line num="96" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="109" count="1" complexity="4" type="method" signature="getArgsForTypes(Class&lt;?&gt;[]) : Object[]"/>
            <line num="110" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="112" falsecount="1" type="cond" truecount="1"/>
            <line num="114" count="1" type="stmt"/>
            <line num="114" falsecount="1" type="cond" truecount="1"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="117" falsecount="1" type="cond" truecount="1"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" complexity="1" type="method" signature="getSerializedBytes(Class&lt;?&gt;) : byte[]"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="152" count="1" complexity="4" type="method" signature="getSerializableUID(Class&lt;?&gt;) : Long"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="157" falsecount="1" type="cond" truecount="1"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="175" count="1" complexity="1" type="method" signature="callLongMethod(Class&lt;?&gt;,String) : Long"/>
            <line num="177" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="200" count="1" complexity="1" type="method" signature="readObject(byte[]) : Object"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
         </file>
         <file name="EasyMockProperties.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\EasyMockProperties.java">
            <metrics classes="1" methods="6" conditionals="12" ncloc="69" coveredstatements="28" coveredmethods="6" complexity="16" coveredconditionals="12" statements="28" loc="144" coveredelements="46" elements="46"/>
            <class name="EasyMockProperties">
               <metrics methods="6" conditionals="12" coveredstatements="28" coveredmethods="6" complexity="16" coveredconditionals="12" statements="28" coveredelements="46" elements="46"/>
            </class>
            <line num="45" count="1" complexity="2" type="method" signature="getInstance() : EasyMockProperties"/>
            <line num="46" count="1" type="stmt"/>
            <line num="46" falsecount="1" type="cond" truecount="1"/>
            <line num="47" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" count="1" complexity="6" type="method" signature="EasyMockProperties()"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="61" falsecount="1" type="cond" truecount="1"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="77" falsecount="1" type="cond" truecount="1"/>
            <line num="78" count="1" type="stmt"/>
            <line num="93" count="1" complexity="1" type="method" signature="getProperty(String,String) : String"/>
            <line num="94" count="1" type="stmt"/>
            <line num="105" count="1" complexity="1" type="method" signature="getProperty(String) : String"/>
            <line num="106" count="1" type="stmt"/>
            <line num="119" count="1" complexity="3" type="method" signature="setProperty(String,String) : String"/>
            <line num="120" count="1" type="stmt"/>
            <line num="120" falsecount="1" type="cond" truecount="1"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="124" falsecount="1" type="cond" truecount="1"/>
            <line num="125" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" count="1" complexity="3" type="method" signature="getClassLoader() : ClassLoader"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="138" falsecount="1" type="cond" truecount="1"/>
            <line num="140" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
         </file>
         <file name="ErrorMessage.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ErrorMessage.java">
            <metrics classes="1" methods="5" conditionals="4" ncloc="33" coveredstatements="13" coveredmethods="5" complexity="7" coveredconditionals="4" statements="13" loc="60" coveredelements="22" elements="22"/>
            <class name="ErrorMessage">
               <metrics methods="5" conditionals="4" coveredstatements="13" coveredmethods="5" complexity="7" coveredconditionals="4" statements="13" coveredelements="22" elements="22"/>
            </class>
            <line num="29" count="1" complexity="1" type="method" signature="ErrorMessage(boolean,String,int)"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="isMatching() : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="getMessage() : String"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="getActualCount() : int"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="1" complexity="3" type="method" signature="appendTo(StringBuilder,int) : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="49" falsecount="1" type="cond" truecount="1"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
         </file>
         <file name="ExpectedInvocation.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ExpectedInvocation.java">
            <metrics classes="1" methods="8" conditionals="16" ncloc="86" coveredstatements="32" coveredmethods="8" complexity="17" coveredconditionals="16" statements="32" loc="119" coveredelements="56" elements="56"/>
            <class name="ExpectedInvocation">
               <metrics methods="8" conditionals="16" coveredstatements="32" coveredmethods="8" complexity="17" coveredconditionals="16" statements="32" coveredelements="56" elements="56"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="ExpectedInvocation(Invocation,List&lt;IArgumentMatcher&gt;)"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="3" type="method" signature="createMissingMatchers(Invocation,List&lt;IArgumentMatcher&gt;) : List&lt;IArgumentMatcher&gt;"/>
            <line num="45" count="1" type="stmt"/>
            <line num="45" falsecount="1" type="cond" truecount="1"/>
            <line num="46" count="1" type="stmt"/>
            <line num="46" falsecount="1" type="cond" truecount="1"/>
            <line num="47" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="67" count="1" complexity="3" type="method" signature="equals(Object) : boolean"/>
            <line num="69" count="1" type="stmt"/>
            <line num="69" falsecount="1" type="cond" truecount="1"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="79" count="1" complexity="1" type="method" signature="hashCode() : int"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" count="1" complexity="1" type="method" signature="matches(Invocation) : boolean"/>
            <line num="85" count="1" type="stmt"/>
            <line num="89" count="1" complexity="4" type="method" signature="matches(Object[]) : boolean"/>
            <line num="90" count="1" type="stmt"/>
            <line num="90" falsecount="1" type="cond" truecount="1"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="93" falsecount="1" type="cond" truecount="1"/>
            <line num="94" count="1" type="stmt"/>
            <line num="94" falsecount="1" type="cond" truecount="1"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="101" count="1" complexity="3" type="method" signature="toString() : String"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="106" falsecount="1" type="cond" truecount="1"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="108" falsecount="1" type="cond" truecount="1"/>
            <line num="109" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" count="1" complexity="1" type="method" signature="getMethod() : Method"/>
            <line num="117" count="1" type="stmt"/>
         </file>
         <file name="ExpectedInvocationAndResult.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ExpectedInvocationAndResult.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="4" coveredmethods="3" complexity="3" coveredconditionals="0" statements="4" loc="43" coveredelements="7" elements="7"/>
            <class name="ExpectedInvocationAndResult">
               <metrics methods="3" conditionals="0" coveredstatements="4" coveredmethods="3" complexity="3" coveredconditionals="0" statements="4" coveredelements="7" elements="7"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="ExpectedInvocationAndResult(ExpectedInvocation,Result)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" count="1" complexity="1" type="method" signature="getExpectedInvocation() : ExpectedInvocation"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="getResult() : Result"/>
            <line num="41" count="1" type="stmt"/>
         </file>
         <file name="ExpectedInvocationAndResults.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ExpectedInvocationAndResults.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="20" coveredstatements="5" coveredmethods="4" complexity="4" coveredconditionals="0" statements="5" loc="48" coveredelements="9" elements="9"/>
            <class name="ExpectedInvocationAndResults">
               <metrics methods="4" conditionals="0" coveredstatements="5" coveredmethods="4" complexity="4" coveredconditionals="0" statements="5" coveredelements="9" elements="9"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="ExpectedInvocationAndResults(ExpectedInvocation,Results)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" count="1" complexity="1" type="method" signature="getExpectedInvocation() : ExpectedInvocation"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="getResults() : Results"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="46" count="1" type="stmt"/>
         </file>
         <file name="IClassInstantiator.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\IClassInstantiator.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="4" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="36" coveredelements="0" elements="0"/>
            <class name="IClassInstantiator">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IMocksBehavior.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\IMocksBehavior.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="12" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="43" coveredelements="0" elements="0"/>
            <class name="IMocksBehavior">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IMocksControlState.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\IMocksControlState.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="21" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="58" coveredelements="0" elements="0"/>
            <class name="IMocksControlState">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IProxyFactory.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\IProxyFactory.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="5" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="28" coveredelements="0" elements="0"/>
            <class name="IProxyFactory">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="Invocation.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\Invocation.java">
            <metrics classes="1" methods="19" conditionals="32" ncloc="160" coveredstatements="73" coveredmethods="19" complexity="41" coveredconditionals="32" statements="73" loc="221" coveredelements="124" elements="124"/>
            <class name="Invocation">
               <metrics methods="19" conditionals="32" coveredstatements="73" coveredmethods="19" complexity="41" coveredconditionals="32" statements="73" coveredelements="124" elements="124"/>
            </class>
            <line num="44" count="1" complexity="1" type="method" signature="Invocation(Object,Method,Object[])"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" count="1" complexity="4" type="method" signature="expandVarArgs(boolean,Object[]) : Object[]"/>
            <line num="51" count="1" type="stmt"/>
            <line num="51" falsecount="1" type="cond" truecount="1"/>
            <line num="52" count="1" type="stmt"/>
            <line num="52" falsecount="1" type="cond" truecount="1"/>
            <line num="54" count="1" type="stmt"/>
            <line num="54" falsecount="1" type="cond" truecount="1"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" count="1" complexity="3" type="method" signature="createObjectArray(Object) : Object[]"/>
            <line num="67" count="1" type="stmt"/>
            <line num="67" falsecount="1" type="cond" truecount="1"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="71" falsecount="1" type="cond" truecount="1"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" count="1" complexity="1" type="method" signature="getMock() : Object"/>
            <line num="78" count="1" type="stmt"/>
            <line num="81" count="1" complexity="1" type="method" signature="getMethod() : Method"/>
            <line num="82" count="1" type="stmt"/>
            <line num="85" count="1" complexity="1" type="method" signature="getArguments() : Object[]"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" complexity="3" type="method" signature="equals(Object) : boolean"/>
            <line num="91" count="1" type="stmt"/>
            <line num="91" falsecount="1" type="cond" truecount="1"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="101" count="1" complexity="1" type="method" signature="hashCode() : int"/>
            <line num="103" count="1" type="stmt"/>
            <line num="106" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="108" count="1" type="stmt"/>
            <line num="111" count="1" complexity="6" type="method" signature="equalArguments(Object[]) : boolean"/>
            <line num="112" count="1" type="stmt"/>
            <line num="112" falsecount="1" type="cond" truecount="1"/>
            <line num="113" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="115" falsecount="1" type="cond" truecount="1"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="119" falsecount="1" type="cond" truecount="1"/>
            <line num="120" count="1" type="stmt"/>
            <line num="120" falsecount="1" type="cond" truecount="1"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="124" falsecount="1" type="cond" truecount="1"/>
            <line num="125" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" complexity="2" type="method" signature="isPrimitiveParameter(int) : boolean"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="134" falsecount="1" type="cond" truecount="1"/>
            <line num="135" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="140" count="1" complexity="3" type="method" signature="getMockAndMethodName() : String"/>
            <line num="141" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="145" falsecount="1" type="cond" truecount="1"/>
            <line num="146" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="151" falsecount="1" type="cond" truecount="1"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="159" count="1" complexity="1" type="method" signature="addCapture(Captures&lt;Object&gt;,Object) : void"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="164" count="1" complexity="1" type="method" signature="validateCaptures() : void"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="170" count="1" complexity="1" type="method" signature="clearCaptures() : void"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="177" count="1" complexity="3" type="method" signature="toStringIsDefined(Object) : boolean"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="192" count="1" complexity="5" type="method" signature="isJavaIdentifier(String) : boolean"/>
            <line num="193" count="1" type="stmt"/>
            <line num="193" falsecount="1" type="cond" truecount="1"/>
            <line num="195" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="198" falsecount="1" type="cond" truecount="1"/>
            <line num="199" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="205" count="1" complexity="2" type="method" signature="readObject(java.io.ObjectInputStream) : void"/>
            <line num="207" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="217" count="1" complexity="1" type="method" signature="writeObject(java.io.ObjectOutputStream) : void"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
         </file>
         <file name="JavaProxyFactory.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\JavaProxyFactory.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="9" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" loc="32" coveredelements="2" elements="2"/>
            <class name="JavaProxyFactory">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="createProxy(Class&lt;T&gt;,InvocationHandler) : T"/>
            <line num="30" count="1" type="stmt"/>
         </file>
         <file name="LastControl.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\LastControl.java">
            <metrics classes="1" methods="12" conditionals="14" ncloc="94" coveredstatements="45" coveredmethods="12" complexity="20" coveredconditionals="14" statements="45" loc="135" coveredelements="71" elements="71"/>
            <class name="LastControl">
               <metrics methods="12" conditionals="14" coveredstatements="45" coveredmethods="12" complexity="20" coveredconditionals="14" statements="45" coveredelements="71" elements="71"/>
            </class>
            <line num="47" count="1" complexity="2" type="method" signature="reportLastControl(MocksControl) : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="48" falsecount="1" type="cond" truecount="1"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="55" count="1" complexity="1" type="method" signature="lastControl() : MocksControl"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" complexity="2" type="method" signature="reportMatcher(IArgumentMatcher) : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="61" falsecount="1" type="cond" truecount="1"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" count="1" complexity="2" type="method" signature="pullMatchers() : List&lt;IArgumentMatcher&gt;"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="70" falsecount="1" type="cond" truecount="1"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" count="1" complexity="1" type="method" signature="reportAnd(int) : void"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" complexity="1" type="method" signature="reportNot() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" complexity="2" type="method" signature="popLastArgumentMatchers(int) : List&lt;IArgumentMatcher&gt;"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="95" falsecount="1" type="cond" truecount="1"/>
            <line num="96" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="101" count="1" complexity="2" type="method" signature="assertState(boolean,String) : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="102" falsecount="1" type="cond" truecount="1"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="108" count="1" complexity="1" type="method" signature="reportOr(int) : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" count="1" complexity="3" type="method" signature="getCurrentInvocation() : Invocation"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="116" falsecount="1" type="cond" truecount="1"/>
            <line num="117" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="122" count="1" complexity="2" type="method" signature="pushCurrentInvocation(Invocation) : void"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="124" falsecount="1" type="cond" truecount="1"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="131" count="1" complexity="1" type="method" signature="popCurrentInvocation() : void"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
         </file>
         <file name="MethodSerializationWrapper.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\MethodSerializationWrapper.java">
            <metrics classes="1" methods="3" conditionals="6" ncloc="46" coveredstatements="23" coveredmethods="3" complexity="6" coveredconditionals="6" statements="23" loc="81" coveredelements="32" elements="32"/>
            <class name="MethodSerializationWrapper">
               <metrics methods="3" conditionals="6" coveredstatements="23" coveredmethods="3" complexity="6" coveredconditionals="6" statements="23" coveredelements="32" elements="32"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="&lt;clinit&gt;, line 32()"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="49" count="1" complexity="2" type="method" signature="MethodSerializationWrapper(Method)"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="57" falsecount="1" type="cond" truecount="1"/>
            <line num="58" count="1" type="stmt"/>
            <line num="62" count="1" complexity="3" type="method" signature="getMethod() : Method"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="67" falsecount="1" type="cond" truecount="1"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="69" falsecount="1" type="cond" truecount="1"/>
            <line num="70" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
         </file>
         <file name="MockBuilder.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\MockBuilder.java">
            <metrics classes="1" methods="22" conditionals="22" ncloc="151" coveredstatements="70" coveredmethods="22" complexity="36" coveredconditionals="22" statements="70" loc="222" coveredelements="114" elements="114"/>
            <class name="MockBuilder">
               <metrics methods="22" conditionals="22" coveredstatements="70" coveredmethods="22" complexity="36" coveredconditionals="22" statements="70" coveredelements="114" elements="114"/>
            </class>
            <line num="49" count="1" complexity="1" type="method" signature="MockBuilder(Class&lt;T&gt;)"/>
            <line num="50" count="1" type="stmt"/>
            <line num="62" count="1" complexity="1" type="method" signature="MockBuilder(Class&lt;T&gt;,EasyMockSupport)"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="67" count="1" complexity="2" type="method" signature="addMockedMethod(Method) : IMockBuilder&lt;T&gt;"/>
            <line num="68" count="1" type="stmt"/>
            <line num="68" falsecount="1" type="cond" truecount="1"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" count="1" complexity="2" type="method" signature="addMockedMethod(String) : IMockBuilder&lt;T&gt;"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="77" falsecount="1" type="cond" truecount="1"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" count="1" complexity="2" type="method" signature="addMockedMethod(String,Class&lt;?&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="86" falsecount="1" type="cond" truecount="1"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" count="1" complexity="1" type="method" signature="addMockedMethods(String) : IMockBuilder&lt;T&gt;"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" count="1" complexity="1" type="method" signature="addMockedMethods(Method) : IMockBuilder&lt;T&gt;"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="107" count="1" complexity="1" type="method" signature="withConstructor(Constructor&lt;?&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" count="1" complexity="1" type="method" signature="withConstructor(ConstructorArgs) : IMockBuilder&lt;T&gt;"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="122" count="1" complexity="2" type="method" signature="withConstructor() : IMockBuilder&lt;T&gt;"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="133" count="1" complexity="2" type="method" signature="withConstructor(Object) : IMockBuilder&lt;T&gt;"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="144" count="1" complexity="2" type="method" signature="withConstructor(Class&lt;?&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="145" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" count="1" complexity="3" type="method" signature="withArgs(Object) : IMockBuilder&lt;T&gt;"/>
            <line num="156" count="1" type="stmt"/>
            <line num="156" falsecount="1" type="cond" truecount="1"/>
            <line num="157" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="160" falsecount="1" type="cond" truecount="1"/>
            <line num="161" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="168" count="1" complexity="1" type="method" signature="createMock(IMocksControl) : T"/>
            <line num="169" count="1" type="stmt"/>
            <line num="172" count="1" complexity="1" type="method" signature="createMock() : T"/>
            <line num="173" count="1" type="stmt"/>
            <line num="176" count="1" complexity="1" type="method" signature="createNiceMock() : T"/>
            <line num="177" count="1" type="stmt"/>
            <line num="180" count="1" complexity="1" type="method" signature="createStrictMock() : T"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" count="1" complexity="3" type="method" signature="createMock(String,IMocksControl) : T"/>
            <line num="187" count="1" type="stmt"/>
            <line num="187" falsecount="1" type="cond" truecount="1"/>
            <line num="188" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="192" falsecount="1" type="cond" truecount="1"/>
            <line num="193" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="200" count="1" complexity="2" type="method" signature="createMock(String) : T"/>
            <line num="201" count="1" type="stmt"/>
            <line num="201" falsecount="1" type="cond" truecount="1"/>
            <line num="202" count="1" type="stmt"/>
            <line num="205" count="1" complexity="2" type="method" signature="createNiceMock(String) : T"/>
            <line num="206" count="1" type="stmt"/>
            <line num="206" falsecount="1" type="cond" truecount="1"/>
            <line num="208" count="1" type="stmt"/>
            <line num="211" count="1" complexity="2" type="method" signature="createStrictMock(String) : T"/>
            <line num="212" count="1" type="stmt"/>
            <line num="212" falsecount="1" type="cond" truecount="1"/>
            <line num="214" count="1" type="stmt"/>
            <line num="217" count="1" complexity="2" type="method" signature="checkConstructorNotInitialized() : void"/>
            <line num="218" count="1" type="stmt"/>
            <line num="218" falsecount="1" type="cond" truecount="1"/>
            <line num="219" count="1" type="stmt"/>
         </file>
         <file name="MockInvocationHandler.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\MockInvocationHandler.java">
            <metrics classes="1" methods="3" conditionals="2" ncloc="27" coveredstatements="9" coveredmethods="3" complexity="7" coveredconditionals="2" statements="9" loc="54" coveredelements="14" elements="14"/>
            <class name="MockInvocationHandler">
               <metrics methods="3" conditionals="2" coveredstatements="9" coveredmethods="3" complexity="7" coveredconditionals="2" statements="9" coveredelements="14" elements="14"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="MockInvocationHandler(MocksControl)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="5" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="37" falsecount="1" type="cond" truecount="1"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="51" count="1" complexity="1" type="method" signature="getControl() : MocksControl"/>
            <line num="52" count="1" type="stmt"/>
         </file>
         <file name="MocksBehavior.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\MocksBehavior.java">
            <metrics classes="1" methods="13" conditionals="32" ncloc="140" coveredstatements="71" coveredmethods="13" complexity="31" coveredconditionals="32" statements="71" loc="204" coveredelements="116" elements="116"/>
            <class name="MocksBehavior">
               <metrics methods="13" conditionals="32" coveredstatements="71" coveredmethods="13" complexity="31" coveredconditionals="32" statements="71" coveredelements="116" elements="116"/>
            </class>
            <line num="47" count="1" complexity="1" type="method" signature="MocksBehavior(boolean)"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="55" count="1" complexity="1" type="method" signature="addStub(ExpectedInvocation,Result) : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" complexity="1" type="method" signature="addExpected(ExpectedInvocation,Result,Range) : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" count="1" complexity="2" type="method" signature="getStubResult(Invocation) : Result"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="66" falsecount="1" type="cond" truecount="1"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" complexity="3" type="method" signature="addBehaviorListIfNecessary(ExpectedInvocation) : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="74" falsecount="1" type="cond" truecount="1"/>
            <line num="75" count="1" type="stmt"/>
            <line num="79" count="1" complexity="1" type="method" signature="lastBehaviorList() : UnorderedBehavior"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" complexity="11" type="method" signature="addActual(Invocation) : Result"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="86" falsecount="1" type="cond" truecount="1"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="88" falsecount="1" type="cond" truecount="1"/>
            <line num="89" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="91" falsecount="1" type="cond" truecount="1"/>
            <line num="92" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="97" falsecount="1" type="cond" truecount="1"/>
            <line num="98" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="107" falsecount="1" type="cond" truecount="1"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="114" falsecount="1" type="cond" truecount="1"/>
            <line num="115" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="127" falsecount="1" type="cond" truecount="1"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="131" falsecount="1" type="cond" truecount="1"/>
            <line num="132" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="137" falsecount="1" type="cond" truecount="1"/>
            <line num="138" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="151" count="1" complexity="3" type="method" signature="verify() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="155" falsecount="1" type="cond" truecount="1"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="160" falsecount="1" type="cond" truecount="1"/>
            <line num="161" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="176" count="1" complexity="1" type="method" signature="checkOrder(boolean) : void"/>
            <line num="177" count="1" type="stmt"/>
            <line num="180" count="1" complexity="1" type="method" signature="makeThreadSafe(boolean) : void"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" count="1" complexity="1" type="method" signature="shouldBeUsedInOneThread(boolean) : void"/>
            <line num="185" count="1" type="stmt"/>
            <line num="188" count="1" complexity="1" type="method" signature="isThreadSafe() : boolean"/>
            <line num="189" count="1" type="stmt"/>
            <line num="192" count="1" complexity="4" type="method" signature="checkThreadSafety() : void"/>
            <line num="193" count="1" type="stmt"/>
            <line num="193" falsecount="1" type="cond" truecount="1"/>
            <line num="194" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="196" falsecount="1" type="cond" truecount="1"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="198" falsecount="1" type="cond" truecount="1"/>
            <line num="199" count="1" type="stmt"/>
         </file>
         <file name="MocksControl.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\MocksControl.java">
            <metrics classes="2" methods="33" conditionals="8" ncloc="262" coveredstatements="119" coveredmethods="33" complexity="60" coveredconditionals="8" statements="119" loc="349" coveredelements="160" elements="160"/>
            <class name="MocksControl">
               <metrics methods="33" conditionals="8" coveredstatements="119" coveredmethods="33" complexity="60" coveredconditionals="8" statements="119" coveredelements="160" elements="160"/>
            </class>
            <class name="MocksControl.MockType">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="42" count="1" complexity="1" type="method" signature="MocksControl(MockType)"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="1" complexity="1" type="method" signature="getType() : MockType"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" count="1" complexity="1" type="method" signature="getState() : IMocksControlState"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" count="1" complexity="2" type="method" signature="createMock(Class&lt;T&gt;) : T"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="66" count="1" complexity="2" type="method" signature="createMock(String,Class&lt;T&gt;) : T"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="77" count="1" complexity="2" type="method" signature="createMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="79" count="1" type="stmt"/>
            <line num="79" falsecount="1" type="cond" truecount="1"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="91" count="1" complexity="2" type="method" signature="createMock(Class&lt;T&gt;,Method) : T"/>
            <line num="93" count="1" type="stmt"/>
            <line num="93" falsecount="1" type="cond" truecount="1"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="116" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="127" count="1" complexity="4" type="method" signature="createProxyFactory(Class&lt;T&gt;) : IProxyFactory&lt;T&gt;"/>
            <line num="128" count="1" type="stmt"/>
            <line num="128" falsecount="1" type="cond" truecount="1"/>
            <line num="129" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="133" falsecount="1" type="cond" truecount="1"/>
            <line num="134" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="145" count="1" complexity="1" type="method" signature="reset() : void"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="152" count="1" complexity="1" type="method" signature="resetToNice() : void"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="157" count="1" complexity="1" type="method" signature="resetToDefault() : void"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="162" count="1" complexity="1" type="method" signature="resetToStrict() : void"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="167" count="1" complexity="2" type="method" signature="replay() : void"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="177" count="1" complexity="3" type="method" signature="verify() : void"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="187" count="1" complexity="2" type="method" signature="checkOrder(boolean) : void"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="195" count="1" complexity="2" type="method" signature="makeThreadSafe(boolean) : void"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="203" count="1" complexity="2" type="method" signature="checkIsUsedInOneThread(boolean) : void"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="207" count="1" type="stmt"/>
            <line num="213" count="1" complexity="2" type="method" signature="andReturn(Object) : IExpectationSetters&lt;Object&gt;"/>
            <line num="214" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="222" count="1" complexity="2" type="method" signature="andThrow(Throwable) : IExpectationSetters&lt;Object&gt;"/>
            <line num="223" count="1" type="stmt"/>
            <line num="224" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="231" count="1" complexity="2" type="method" signature="andAnswer(IAnswer&lt;? extends Object&gt;) : IExpectationSetters&lt;Object&gt;"/>
            <line num="232" count="1" type="stmt"/>
            <line num="233" count="1" type="stmt"/>
            <line num="234" count="1" type="stmt"/>
            <line num="236" count="1" type="stmt"/>
            <line num="240" count="1" complexity="2" type="method" signature="andDelegateTo(Object) : IExpectationSetters&lt;Object&gt;"/>
            <line num="241" count="1" type="stmt"/>
            <line num="242" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="245" count="1" type="stmt"/>
            <line num="249" count="1" complexity="2" type="method" signature="andStubReturn(Object) : void"/>
            <line num="250" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="257" count="1" complexity="2" type="method" signature="andStubThrow(Throwable) : void"/>
            <line num="258" count="1" type="stmt"/>
            <line num="259" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="265" count="1" complexity="2" type="method" signature="andStubAnswer(IAnswer&lt;? extends Object&gt;) : void"/>
            <line num="266" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="269" count="1" type="stmt"/>
            <line num="273" count="1" complexity="2" type="method" signature="andStubDelegateTo(Object) : void"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="1" type="stmt"/>
            <line num="277" count="1" type="stmt"/>
            <line num="281" count="1" complexity="2" type="method" signature="asStub() : void"/>
            <line num="282" count="1" type="stmt"/>
            <line num="283" count="1" type="stmt"/>
            <line num="285" count="1" type="stmt"/>
            <line num="289" count="1" complexity="2" type="method" signature="times(int) : IExpectationSetters&lt;Object&gt;"/>
            <line num="290" count="1" type="stmt"/>
            <line num="291" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="298" count="1" complexity="2" type="method" signature="times(int,int) : IExpectationSetters&lt;Object&gt;"/>
            <line num="299" count="1" type="stmt"/>
            <line num="300" count="1" type="stmt"/>
            <line num="301" count="1" type="stmt"/>
            <line num="303" count="1" type="stmt"/>
            <line num="307" count="1" complexity="2" type="method" signature="once() : IExpectationSetters&lt;Object&gt;"/>
            <line num="308" count="1" type="stmt"/>
            <line num="309" count="1" type="stmt"/>
            <line num="310" count="1" type="stmt"/>
            <line num="312" count="1" type="stmt"/>
            <line num="316" count="1" complexity="2" type="method" signature="atLeastOnce() : IExpectationSetters&lt;Object&gt;"/>
            <line num="317" count="1" type="stmt"/>
            <line num="318" count="1" type="stmt"/>
            <line num="319" count="1" type="stmt"/>
            <line num="321" count="1" type="stmt"/>
            <line num="325" count="1" complexity="2" type="method" signature="anyTimes() : IExpectationSetters&lt;Object&gt;"/>
            <line num="326" count="1" type="stmt"/>
            <line num="327" count="1" type="stmt"/>
            <line num="328" count="1" type="stmt"/>
            <line num="330" count="1" type="stmt"/>
         </file>
         <file name="ObjectMethodsFilter.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ObjectMethodsFilter.java">
            <metrics classes="1" methods="6" conditionals="16" ncloc="78" coveredstatements="38" coveredmethods="6" complexity="17" coveredconditionals="16" statements="38" loc="118" coveredelements="60" elements="60"/>
            <class name="ObjectMethodsFilter">
               <metrics methods="6" conditionals="16" coveredstatements="38" coveredmethods="6" complexity="17" coveredconditionals="16" statements="38" coveredelements="60" elements="60"/>
            </class>
            <line num="43" count="1" complexity="6" type="method" signature="ObjectMethodsFilter(Class&lt;?&gt;,MockInvocationHandler,String)"/>
            <line num="44" count="1" type="stmt"/>
            <line num="44" falsecount="1" type="cond" truecount="1"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="49" falsecount="1" type="cond" truecount="1"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="59" falsecount="1" type="cond" truecount="1"/>
            <line num="60" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" count="1" complexity="5" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="73" count="1" type="stmt"/>
            <line num="73" falsecount="1" type="cond" truecount="1"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="76" falsecount="1" type="cond" truecount="1"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="79" falsecount="1" type="cond" truecount="1"/>
            <line num="80" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="82" falsecount="1" type="cond" truecount="1"/>
            <line num="83" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" count="1" complexity="2" type="method" signature="mockToString(Object) : String"/>
            <line num="89" count="1" type="stmt"/>
            <line num="89" falsecount="1" type="cond" truecount="1"/>
            <line num="92" count="1" complexity="1" type="method" signature="getDelegate() : MockInvocationHandler"/>
            <line num="93" count="1" type="stmt"/>
            <line num="96" count="1" complexity="2" type="method" signature="readObject(java.io.ObjectInputStream) : void"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="111" count="1" complexity="1" type="method" signature="writeObject(java.io.ObjectOutputStream) : void"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
         </file>
         <file name="ObjenesisClassInstantiator.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ObjenesisClassInstantiator.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="7" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" loc="29" coveredelements="2" elements="2"/>
            <class name="ObjenesisClassInstantiator">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="25" count="1" complexity="1" type="method" signature="newInstance(Class&lt;?&gt;) : Object"/>
            <line num="26" count="1" type="stmt"/>
         </file>
         <file name="Range.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\Range.java">
            <metrics classes="1" methods="9" conditionals="10" ncloc="51" coveredstatements="20" coveredmethods="9" complexity="14" coveredconditionals="10" statements="20" loc="85" coveredelements="39" elements="39"/>
            <class name="Range">
               <metrics methods="9" conditionals="10" coveredstatements="20" coveredmethods="9" complexity="14" coveredconditionals="10" statements="20" coveredelements="39" elements="39"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Range(int)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="4" type="method" signature="Range(int,int)"/>
            <line num="36" count="1" type="stmt"/>
            <line num="36" falsecount="1" type="cond" truecount="1"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="40" falsecount="1" type="cond" truecount="1"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="44" falsecount="1" type="cond" truecount="1"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" count="1" complexity="1" type="method" signature="hasFixedCount() : boolean"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" count="1" complexity="1" type="method" signature="getMaximum() : int"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" complexity="1" type="method" signature="getMinimum() : int"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" count="1" complexity="3" type="method" signature="toString() : String"/>
            <line num="65" count="1" type="stmt"/>
            <line num="65" falsecount="1" type="cond" truecount="1"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="67" falsecount="1" type="cond" truecount="1"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="74" count="1" complexity="1" type="method" signature="expectedCount() : String"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" count="1" complexity="1" type="method" signature="contains(int) : boolean"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" count="1" complexity="1" type="method" signature="hasOpenCount() : boolean"/>
            <line num="83" count="1" type="stmt"/>
         </file>
         <file name="RecordState.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\RecordState.java">
            <metrics classes="1" methods="34" conditionals="70" ncloc="275" coveredstatements="152" coveredmethods="34" complexity="70" coveredconditionals="70" statements="152" loc="343" coveredelements="256" elements="256"/>
            <class name="RecordState">
               <metrics methods="34" conditionals="70" coveredstatements="152" coveredmethods="34" complexity="70" coveredconditionals="70" statements="152" coveredelements="256" elements="256"/>
            </class>
            <line num="43" count="1" complexity="1" type="method" signature="&lt;clinit&gt;, line 43()"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="57" count="1" complexity="1" type="method" signature="&lt;clinit&gt;, line 57()"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" count="1" complexity="1" type="method" signature="RecordState(IMocksBehavior)"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" count="1" complexity="1" type="method" signature="assertRecordState() : void"/>
            <line num="75" count="1" complexity="1" type="method" signature="invoke(Invocation) : java.lang.Object"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" complexity="2" type="method" signature="replay() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="85" falsecount="1" type="cond" truecount="1"/>
            <line num="86" count="1" type="stmt"/>
            <line num="90" count="1" complexity="1" type="method" signature="verify() : void"/>
            <line num="91" count="1" type="stmt"/>
            <line num="95" count="1" complexity="2" type="method" signature="andReturn(Object) : void"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="99" falsecount="1" type="cond" truecount="1"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" complexity="2" type="method" signature="andThrow(Throwable) : void"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="108" falsecount="1" type="cond" truecount="1"/>
            <line num="109" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" count="1" complexity="2" type="method" signature="andAnswer(IAnswer&lt;?&gt;) : void"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="117" falsecount="1" type="cond" truecount="1"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="123" count="1" complexity="2" type="method" signature="andDelegateTo(Object) : void"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="126" falsecount="1" type="cond" truecount="1"/>
            <line num="127" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" complexity="2" type="method" signature="andStubReturn(Object) : void"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="136" falsecount="1" type="cond" truecount="1"/>
            <line num="137" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" count="1" complexity="1" type="method" signature="asStub() : void"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="150" count="1" complexity="2" type="method" signature="andStubThrow(Throwable) : void"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="153" falsecount="1" type="cond" truecount="1"/>
            <line num="154" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="160" count="1" complexity="2" type="method" signature="andStubAnswer(IAnswer&lt;?&gt;) : void"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="163" falsecount="1" type="cond" truecount="1"/>
            <line num="164" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="170" count="1" complexity="2" type="method" signature="andStubDelegateTo(Object) : void"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="173" falsecount="1" type="cond" truecount="1"/>
            <line num="174" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="180" count="1" complexity="2" type="method" signature="times(Range) : void"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="184" falsecount="1" type="cond" truecount="1"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="190" count="1" complexity="8" type="method" signature="createNumberObject(Object,Class&lt;?&gt;) : Object"/>
            <line num="191" count="1" type="stmt"/>
            <line num="191" falsecount="1" type="cond" truecount="1"/>
            <line num="192" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="195" falsecount="1" type="cond" truecount="1"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="197" falsecount="1" type="cond" truecount="1"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="199" falsecount="1" type="cond" truecount="1"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="201" falsecount="1" type="cond" truecount="1"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="203" falsecount="1" type="cond" truecount="1"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="205" falsecount="1" type="cond" truecount="1"/>
            <line num="206" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="212" count="1" complexity="1" type="method" signature="convertNumberClassIfNeccessary(Object) : Object"/>
            <line num="213" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="217" count="1" complexity="4" type="method" signature="closeMethod() : void"/>
            <line num="218" count="1" type="stmt"/>
            <line num="218" falsecount="1" type="cond" truecount="1"/>
            <line num="219" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="221" falsecount="1" type="cond" truecount="1"/>
            <line num="222" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="229" count="1" complexity="2" type="method" signature="emptyReturnValueFor(Class&lt;?&gt;) : Object"/>
            <line num="230" count="1" type="stmt"/>
            <line num="230" falsecount="1" type="cond" truecount="1"/>
            <line num="233" count="1" complexity="2" type="method" signature="requireMethodCall(String) : void"/>
            <line num="234" count="1" type="stmt"/>
            <line num="234" falsecount="1" type="cond" truecount="1"/>
            <line num="235" count="1" type="stmt"/>
            <line num="240" count="1" complexity="6" type="method" signature="requireAssignable(Object) : void"/>
            <line num="241" count="1" type="stmt"/>
            <line num="241" falsecount="1" type="cond" truecount="1"/>
            <line num="242" count="1" type="stmt"/>
            <line num="244" count="1" type="stmt"/>
            <line num="244" falsecount="1" type="cond" truecount="1"/>
            <line num="245" count="1" type="stmt"/>
            <line num="246" count="1" type="stmt"/>
            <line num="246" falsecount="1" type="cond" truecount="1"/>
            <line num="247" count="1" type="stmt"/>
            <line num="250" count="1" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="253" falsecount="1" type="cond" truecount="1"/>
            <line num="254" count="1" type="stmt"/>
            <line num="257" count="1" type="stmt"/>
            <line num="257" falsecount="1" type="cond" truecount="1"/>
            <line num="258" count="1" type="stmt"/>
            <line num="262" count="1" complexity="3" type="method" signature="requireValidThrowable(Throwable) : void"/>
            <line num="263" count="1" type="stmt"/>
            <line num="263" falsecount="1" type="cond" truecount="1"/>
            <line num="264" count="1" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="266" falsecount="1" type="cond" truecount="1"/>
            <line num="267" count="1" type="stmt"/>
            <line num="270" count="1" type="stmt"/>
            <line num="274" count="1" complexity="2" type="method" signature="requireValidAnswer(IAnswer&lt;?&gt;) : void"/>
            <line num="275" count="1" type="stmt"/>
            <line num="275" falsecount="1" type="cond" truecount="1"/>
            <line num="276" count="1" type="stmt"/>
            <line num="280" count="1" complexity="2" type="method" signature="requireValidDelegation(Object) : void"/>
            <line num="281" count="1" type="stmt"/>
            <line num="281" falsecount="1" type="cond" truecount="1"/>
            <line num="282" count="1" type="stmt"/>
            <line num="289" count="1" complexity="2" type="method" signature="requireLastResultOrVoidMethod() : void"/>
            <line num="290" count="1" type="stmt"/>
            <line num="290" falsecount="1" type="cond" truecount="1"/>
            <line num="291" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="297" count="1" complexity="2" type="method" signature="requireVoidMethod() : void"/>
            <line num="298" count="1" type="stmt"/>
            <line num="298" falsecount="1" type="cond" truecount="1"/>
            <line num="299" count="1" type="stmt"/>
            <line num="301" count="1" type="stmt"/>
            <line num="305" count="1" complexity="1" type="method" signature="isLastResultOrVoidMethod() : boolean"/>
            <line num="306" count="1" type="stmt"/>
            <line num="309" count="1" complexity="1" type="method" signature="lastMethodIsVoidMethod() : boolean"/>
            <line num="310" count="1" type="stmt"/>
            <line num="311" count="1" type="stmt"/>
            <line num="314" count="1" complexity="4" type="method" signature="isValidThrowable(Throwable) : boolean"/>
            <line num="315" count="1" type="stmt"/>
            <line num="315" falsecount="1" type="cond" truecount="1"/>
            <line num="316" count="1" type="stmt"/>
            <line num="318" count="1" type="stmt"/>
            <line num="318" falsecount="1" type="cond" truecount="1"/>
            <line num="319" count="1" type="stmt"/>
            <line num="321" count="1" type="stmt"/>
            <line num="322" count="1" type="stmt"/>
            <line num="323" count="1" type="stmt"/>
            <line num="324" count="1" type="stmt"/>
            <line num="324" falsecount="1" type="cond" truecount="1"/>
            <line num="325" count="1" type="stmt"/>
            <line num="328" count="1" type="stmt"/>
            <line num="331" count="1" complexity="1" type="method" signature="checkOrder(boolean) : void"/>
            <line num="332" count="1" type="stmt"/>
            <line num="333" count="1" type="stmt"/>
            <line num="336" count="1" complexity="1" type="method" signature="makeThreadSafe(boolean) : void"/>
            <line num="337" count="1" type="stmt"/>
            <line num="340" count="1" complexity="1" type="method" signature="checkIsUsedInOneThread(boolean) : void"/>
            <line num="341" count="1" type="stmt"/>
         </file>
         <file name="ReflectionUtils.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ReflectionUtils.java">
            <metrics classes="1" methods="7" conditionals="32" ncloc="109" coveredstatements="54" coveredmethods="7" complexity="25" coveredconditionals="32" statements="54" loc="233" coveredelements="93" elements="93"/>
            <class name="ReflectionUtils">
               <metrics methods="7" conditionals="32" coveredstatements="54" coveredmethods="7" complexity="25" coveredconditionals="32" statements="54" coveredelements="93" elements="93"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="&lt;clinit&gt;, line 32()"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="71" count="1" complexity="1" type="method" signature="findMethod(Class&lt;?&gt;,String) : Method"/>
            <line num="72" count="1" type="stmt"/>
            <line num="91" count="1" complexity="10" type="method" signature="findMethod(Class&lt;?&gt;,String,Class&lt;?&gt;) : Method"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="93" falsecount="1" type="cond" truecount="1"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="98" falsecount="1" type="cond" truecount="1"/>
            <line num="99" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="102" falsecount="1" type="cond" truecount="1"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="105" falsecount="1" type="cond" truecount="1"/>
            <line num="106" count="1" type="stmt"/>
            <line num="106" falsecount="1" type="cond" truecount="1"/>
            <line num="107" count="1" type="stmt"/>
            <line num="107" falsecount="1" type="cond" truecount="1"/>
            <line num="108" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="112" falsecount="1" type="cond" truecount="1"/>
            <line num="113" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="117" falsecount="1" type="cond" truecount="1"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="144" count="1" complexity="4" type="method" signature="getConstructor(Class&lt;T&gt;,Object) : Constructor&lt;T&gt;"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="149" falsecount="1" type="cond" truecount="1"/>
            <line num="150" count="1" type="stmt"/>
            <line num="150" falsecount="1" type="cond" truecount="1"/>
            <line num="152" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="161" falsecount="1" type="cond" truecount="1"/>
            <line num="162" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="173" count="1" complexity="6" type="method" signature="isMatchingConstructor(Constructor&lt;?&gt;,Object) : boolean"/>
            <line num="175" count="1" type="stmt"/>
            <line num="175" falsecount="1" type="cond" truecount="1"/>
            <line num="176" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="180" falsecount="1" type="cond" truecount="1"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="184" falsecount="1" type="cond" truecount="1"/>
            <line num="185" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="188" falsecount="1" type="cond" truecount="1"/>
            <line num="189" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="193" falsecount="1" type="cond" truecount="1"/>
            <line num="194" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="209" count="1" complexity="1" type="method" signature="wrapPrimitive(Class&lt;?&gt;) : Class&lt;?&gt;"/>
            <line num="210" count="1" type="stmt"/>
            <line num="225" count="1" complexity="2" type="method" signature="getDeclaredMethod(Class&lt;?&gt;,String,Class&lt;?&gt;[]) : Method"/>
            <line num="227" count="1" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="230" count="1" type="stmt"/>
         </file>
         <file name="ReplayState.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ReplayState.java">
            <metrics classes="1" methods="24" conditionals="4" ncloc="104" coveredstatements="38" coveredmethods="24" complexity="27" coveredconditionals="4" statements="38" loc="156" coveredelements="66" elements="66"/>
            <class name="ReplayState">
               <metrics methods="24" conditionals="4" coveredstatements="38" coveredmethods="24" complexity="27" coveredconditionals="4" statements="38" coveredelements="66" elements="66"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="ReplayState(IMocksBehavior)"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" count="1" complexity="2" type="method" signature="invoke(Invocation) : Object"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="42" falsecount="1" type="cond" truecount="1"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" count="1" complexity="3" type="method" signature="invokeInner(Invocation) : Object"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="62" falsecount="1" type="cond" truecount="1"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="72" count="1" complexity="1" type="method" signature="verify() : void"/>
            <line num="73" count="1" type="stmt"/>
            <line num="76" count="1" complexity="1" type="method" signature="replay() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" count="1" complexity="1" type="method" signature="callback(Runnable) : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" count="1" complexity="1" type="method" signature="checkOrder(boolean) : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" count="1" complexity="1" type="method" signature="makeThreadSafe(boolean) : void"/>
            <line num="89" count="1" type="stmt"/>
            <line num="92" count="1" complexity="1" type="method" signature="checkIsUsedInOneThread(boolean) : void"/>
            <line num="93" count="1" type="stmt"/>
            <line num="96" count="1" complexity="1" type="method" signature="andReturn(Object) : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" count="1" complexity="1" type="method" signature="andThrow(Throwable) : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="104" count="1" complexity="1" type="method" signature="andAnswer(IAnswer&lt;?&gt;) : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" count="1" complexity="1" type="method" signature="andDelegateTo(Object) : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="112" count="1" complexity="1" type="method" signature="andStubReturn(Object) : void"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" count="1" complexity="1" type="method" signature="andStubThrow(Throwable) : void"/>
            <line num="117" count="1" type="stmt"/>
            <line num="120" count="1" complexity="1" type="method" signature="andStubAnswer(IAnswer&lt;?&gt;) : void"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" count="1" complexity="1" type="method" signature="andStubDelegateTo(Object) : void"/>
            <line num="125" count="1" type="stmt"/>
            <line num="128" count="1" complexity="1" type="method" signature="asStub() : void"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" complexity="1" type="method" signature="times(Range) : void"/>
            <line num="133" count="1" type="stmt"/>
            <line num="136" count="1" complexity="1" type="method" signature="setDefaultReturnValue(Object) : void"/>
            <line num="137" count="1" type="stmt"/>
            <line num="140" count="1" complexity="1" type="method" signature="setDefaultThrowable(Throwable) : void"/>
            <line num="141" count="1" type="stmt"/>
            <line num="144" count="1" complexity="1" type="method" signature="setDefaultVoidCallable() : void"/>
            <line num="145" count="1" type="stmt"/>
            <line num="148" count="1" complexity="1" type="method" signature="throwWrappedIllegalStateException() : void"/>
            <line num="149" count="1" type="stmt"/>
            <line num="153" count="1" complexity="1" type="method" signature="assertRecordState() : void"/>
            <line num="154" count="1" type="stmt"/>
         </file>
         <file name="Result.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\Result.java">
            <metrics classes="4" methods="14" conditionals="0" ncloc="76" coveredstatements="21" coveredmethods="14" complexity="16" coveredconditionals="0" statements="21" loc="117" coveredelements="35" elements="35"/>
            <class name="Result">
               <metrics methods="8" conditionals="0" coveredstatements="9" coveredmethods="8" complexity="8" coveredconditionals="0" statements="9" coveredelements="17" elements="17"/>
            </class>
            <class name="Result.ThrowingAnswer">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <class name="Result.ReturningAnswer">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <class name="Result.DelegatingAnswer">
               <metrics methods="2" conditionals="0" coveredstatements="8" coveredmethods="2" complexity="4" coveredconditionals="0" statements="8" coveredelements="10" elements="10"/>
            </class>
            <line num="35" count="1" complexity="1" type="method" signature="Result(IAnswer&lt;?&gt;,boolean)"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="createThrowResult(Throwable) : Result"/>
            <line num="45" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" count="1" complexity="1" type="method" signature="createReturnResult(Object) : Result"/>
            <line num="62" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="68" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="74" count="1" complexity="1" type="method" signature="createDelegatingResult(Object) : Result"/>
            <line num="79" count="1" complexity="3" type="method" signature="answer() : Object"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="93" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="101" count="1" complexity="1" type="method" signature="createAnswerResult(IAnswer&lt;?&gt;) : Result"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="106" count="1" type="stmt"/>
            <line num="109" count="1" complexity="1" type="method" signature="shouldFillInStackTrace() : boolean"/>
            <line num="110" count="1" type="stmt"/>
            <line num="113" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="115" count="1" type="stmt"/>
         </file>
         <file name="Results.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\Results.java">
            <metrics classes="1" methods="7" conditionals="18" ncloc="74" coveredstatements="36" coveredmethods="7" complexity="17" coveredconditionals="18" statements="36" loc="107" coveredelements="61" elements="61"/>
            <class name="Results">
               <metrics methods="7" conditionals="18" coveredstatements="36" coveredmethods="7" complexity="17" coveredconditionals="18" statements="36" coveredelements="61" elements="61"/>
            </class>
            <line num="36" count="1" complexity="3" type="method" signature="add(Result,Range) : void"/>
            <line num="37" count="1" type="stmt"/>
            <line num="37" falsecount="1" type="cond" truecount="1"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="39" falsecount="1" type="cond" truecount="1"/>
            <line num="40" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" count="1" complexity="4" type="method" signature="hasResults() : boolean"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="52" falsecount="1" type="cond" truecount="1"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="56" falsecount="1" type="cond" truecount="1"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" count="1" complexity="4" type="method" signature="next() : Result"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="65" falsecount="1" type="cond" truecount="1"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="67" falsecount="1" type="cond" truecount="1"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="72" falsecount="1" type="cond" truecount="1"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" count="1" complexity="1" type="method" signature="hasValidCallCount() : boolean"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" complexity="3" type="method" signature="getMainInterval() : Range"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="94" falsecount="1" type="cond" truecount="1"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="104" count="1" complexity="1" type="method" signature="getCallCount() : int"/>
            <line num="105" count="1" type="stmt"/>
         </file>
         <file name="RuntimeExceptionWrapper.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\RuntimeExceptionWrapper.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="11" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" loc="34" coveredelements="4" elements="4"/>
            <class name="RuntimeExceptionWrapper">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <line num="27" count="1" complexity="1" type="method" signature="RuntimeExceptionWrapper(RuntimeException)"/>
            <line num="28" count="1" type="stmt"/>
            <line num="31" count="1" complexity="1" type="method" signature="getRuntimeException() : RuntimeException"/>
            <line num="32" count="1" type="stmt"/>
         </file>
         <file name="ThrowableWrapper.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\ThrowableWrapper.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="11" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" loc="34" coveredelements="4" elements="4"/>
            <class name="ThrowableWrapper">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <line num="27" count="1" complexity="1" type="method" signature="ThrowableWrapper(Throwable)"/>
            <line num="28" count="1" type="stmt"/>
            <line num="31" count="1" complexity="1" type="method" signature="getThrowable() : Throwable"/>
            <line num="32" count="1" type="stmt"/>
         </file>
         <file name="UnorderedBehavior.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\UnorderedBehavior.java">
            <metrics classes="1" methods="6" conditionals="14" ncloc="73" coveredstatements="39" coveredmethods="6" complexity="16" coveredconditionals="14" statements="39" loc="112" coveredelements="59" elements="59"/>
            <class name="UnorderedBehavior">
               <metrics methods="6" conditionals="14" coveredstatements="39" coveredmethods="6" complexity="16" coveredconditionals="14" statements="39" coveredelements="59" elements="59"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="UnorderedBehavior(boolean)"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="2" type="method" signature="addExpected(ExpectedInvocation,Result,Range) : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="39" falsecount="1" type="cond" truecount="1"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="3" type="method" signature="addActual(Invocation) : Result"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="53" falsecount="1" type="cond" truecount="1"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="57" falsecount="1" type="cond" truecount="1"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" complexity="2" type="method" signature="verify() : boolean"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="75" falsecount="1" type="cond" truecount="1"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" count="1" complexity="4" type="method" signature="getMessages(Invocation) : List&lt;ErrorMessage&gt;"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="89" falsecount="1" type="cond" truecount="1"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="101" count="1" complexity="4" type="method" signature="allowsExpectedInvocation(ExpectedInvocation,boolean) : boolean"/>
            <line num="102" count="1" type="stmt"/>
            <line num="102" falsecount="1" type="cond" truecount="1"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="104" falsecount="1" type="cond" truecount="1"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.internal.matchers">
         <metrics conditionals="38" methods="77" classes="24" files="24" coveredstatements="127" complexity="115" loc="1132" ncloc="483" coveredmethods="77" coveredconditionals="38" statements="127" coveredelements="242" elements="242"/>
         <file name="And.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\And.java">
            <metrics classes="1" methods="3" conditionals="6" ncloc="30" coveredstatements="11" coveredmethods="3" complexity="6" coveredconditionals="6" statements="11" loc="56" coveredelements="20" elements="20"/>
            <class name="And">
               <metrics methods="3" conditionals="6" coveredstatements="11" coveredmethods="3" complexity="6" coveredconditionals="6" statements="11" coveredelements="20" elements="20"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="And(List&lt;IArgumentMatcher&gt;)"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="2" type="method" signature="matches(Object) : boolean"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="39" falsecount="1" type="cond" truecount="1"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="3" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="48" falsecount="1" type="cond" truecount="1"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
         </file>
         <file name="Any.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Any.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" loc="42" coveredelements="5" elements="5"/>
            <class name="Any">
               <metrics methods="3" conditionals="0" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" coveredelements="5" elements="5"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Any()"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="ArrayEquals.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\ArrayEquals.java">
            <metrics classes="1" methods="3" conditionals="18" ncloc="38" coveredstatements="22" coveredmethods="3" complexity="30" coveredconditionals="18" statements="22" loc="63" coveredelements="43" elements="43"/>
            <class name="ArrayEquals">
               <metrics methods="3" conditionals="18" coveredstatements="22" coveredmethods="3" complexity="30" coveredconditionals="18" statements="22" coveredelements="43" elements="43"/>
            </class>
            <line num="29" count="1" complexity="1" type="method" signature="ArrayEquals(Object)"/>
            <line num="30" count="1" type="stmt"/>
            <line num="33" count="1" complexity="28" type="method" signature="matches(Object) : boolean"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="36" falsecount="1" type="cond" truecount="1"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="38" falsecount="1" type="cond" truecount="1"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="40" falsecount="1" type="cond" truecount="1"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="42" falsecount="1" type="cond" truecount="1"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="44" falsecount="1" type="cond" truecount="1"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="46" falsecount="1" type="cond" truecount="1"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="48" falsecount="1" type="cond" truecount="1"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="52" falsecount="1" type="cond" truecount="1"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="59" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="61" count="1" type="stmt"/>
         </file>
         <file name="Captures.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Captures.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="27" coveredstatements="6" coveredmethods="5" complexity="5" coveredconditionals="0" statements="6" loc="59" coveredelements="11" elements="11"/>
            <class name="Captures">
               <metrics methods="5" conditionals="0" coveredstatements="6" coveredmethods="5" complexity="5" coveredconditionals="0" statements="6" coveredelements="11" elements="11"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="Captures(Capture&lt;T&gt;)"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="setPotentialValue(T) : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" count="1" complexity="1" type="method" signature="validateCapture() : void"/>
            <line num="57" count="1" type="stmt"/>
         </file>
         <file name="Compare.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Compare.java">
            <metrics classes="1" methods="3" conditionals="2" ncloc="26" coveredstatements="7" coveredmethods="3" complexity="4" coveredconditionals="2" statements="7" loc="58" coveredelements="12" elements="12"/>
            <class name="Compare">
               <metrics methods="3" conditionals="2" coveredstatements="7" coveredmethods="3" complexity="4" coveredconditionals="2" statements="7" coveredelements="12" elements="12"/>
            </class>
            <line num="40" count="1" complexity="1" type="method" signature="Compare(T,Comparator&lt;? super T&gt;,LogicalOperator)"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" count="1" complexity="2" type="method" signature="matches(Object) : boolean"/>
            <line num="52" count="1" type="stmt"/>
            <line num="52" falsecount="1" type="cond" truecount="1"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
         </file>
         <file name="CompareEqual.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\CompareEqual.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="41" coveredelements="6" elements="6"/>
            <class name="CompareEqual">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="CompareEqual(Comparable&lt;T&gt;)"/>
            <line num="29" count="1" type="stmt"/>
            <line num="32" count="1" complexity="1" type="method" signature="getName() : String"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="CompareTo.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\CompareTo.java">
            <metrics classes="1" methods="3" conditionals="2" ncloc="22" coveredstatements="5" coveredmethods="3" complexity="4" coveredconditionals="2" statements="5" loc="55" coveredelements="10" elements="10"/>
            <class name="CompareTo">
               <metrics methods="3" conditionals="2" coveredstatements="5" coveredmethods="3" complexity="4" coveredconditionals="2" statements="5" coveredelements="10" elements="10"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="CompareTo(Comparable&lt;T&gt;)"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" count="1" complexity="2" type="method" signature="matches(Object) : boolean"/>
            <line num="41" count="1" type="stmt"/>
            <line num="41" falsecount="1" type="cond" truecount="1"/>
            <line num="42" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="49" count="1" type="stmt"/>
         </file>
         <file name="Contains.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Contains.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="42" coveredelements="6" elements="6"/>
            <class name="Contains">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Contains(String)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="EndsWith.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\EndsWith.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="42" coveredelements="6" elements="6"/>
            <class name="EndsWith">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="EndsWith(String)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="Equals.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Equals.java">
            <metrics classes="1" methods="6" conditionals="4" ncloc="36" coveredstatements="11" coveredmethods="6" complexity="9" coveredconditionals="4" statements="11" loc="66" coveredelements="21" elements="21"/>
            <class name="Equals">
               <metrics methods="6" conditionals="4" coveredstatements="11" coveredmethods="6" complexity="9" coveredconditionals="4" statements="11" coveredelements="21" elements="21"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="Equals(Object)"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" count="1" complexity="2" type="method" signature="matches(Object) : boolean"/>
            <line num="37" count="1" type="stmt"/>
            <line num="37" falsecount="1" type="cond" truecount="1"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="1" complexity="1" type="method" signature="getExpected() : Object"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" count="1" complexity="3" type="method" signature="equals(Object) : boolean"/>
            <line num="53" count="1" type="stmt"/>
            <line num="53" falsecount="1" type="cond" truecount="1"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="61" count="1" complexity="1" type="method" signature="hashCode() : int"/>
            <line num="63" count="1" type="stmt"/>
         </file>
         <file name="EqualsWithDelta.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\EqualsWithDelta.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="20" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" loc="47" coveredelements="8" elements="8"/>
            <class name="EqualsWithDelta">
               <metrics methods="3" conditionals="0" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" coveredelements="8" elements="8"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="EqualsWithDelta(Number,Number)"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="44" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="45" count="1" type="stmt"/>
         </file>
         <file name="Find.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Find.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="17" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="43" coveredelements="6" elements="6"/>
            <class name="Find">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="Find(String)"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="41" count="1" type="stmt"/>
         </file>
         <file name="GreaterOrEqual.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\GreaterOrEqual.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="41" coveredelements="6" elements="6"/>
            <class name="GreaterOrEqual">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="GreaterOrEqual(Comparable&lt;T&gt;)"/>
            <line num="29" count="1" type="stmt"/>
            <line num="32" count="1" complexity="1" type="method" signature="getName() : String"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="GreaterThan.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\GreaterThan.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="41" coveredelements="6" elements="6"/>
            <class name="GreaterThan">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="GreaterThan(Comparable&lt;T&gt;)"/>
            <line num="29" count="1" type="stmt"/>
            <line num="32" count="1" complexity="1" type="method" signature="getName() : String"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="InstanceOf.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\InstanceOf.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="42" coveredelements="6" elements="6"/>
            <class name="InstanceOf">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="InstanceOf(Class&lt;?&gt;)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="LessOrEqual.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\LessOrEqual.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="41" coveredelements="6" elements="6"/>
            <class name="LessOrEqual">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="LessOrEqual(Comparable&lt;T&gt;)"/>
            <line num="29" count="1" type="stmt"/>
            <line num="32" count="1" complexity="1" type="method" signature="getName() : String"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="LessThan.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\LessThan.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="41" coveredelements="6" elements="6"/>
            <class name="LessThan">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="28" count="1" complexity="1" type="method" signature="LessThan(Comparable&lt;T&gt;)"/>
            <line num="29" count="1" type="stmt"/>
            <line num="32" count="1" complexity="1" type="method" signature="getName() : String"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="Matches.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Matches.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="42" coveredelements="6" elements="6"/>
            <class name="Matches">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Matches(String)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="Not.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Not.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="18" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" loc="44" coveredelements="8" elements="8"/>
            <class name="Not">
               <metrics methods="3" conditionals="0" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" coveredelements="8" elements="8"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Not(IArgumentMatcher)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
         </file>
         <file name="NotNull.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\NotNull.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" loc="42" coveredelements="5" elements="5"/>
            <class name="NotNull">
               <metrics methods="3" conditionals="0" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" coveredelements="5" elements="5"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="NotNull()"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="Null.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Null.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="15" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" loc="41" coveredelements="5" elements="5"/>
            <class name="Null">
               <metrics methods="3" conditionals="0" coveredstatements="2" coveredmethods="3" complexity="3" coveredconditionals="0" statements="2" coveredelements="5" elements="5"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="Null()"/>
            <line num="34" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="39" count="1" type="stmt"/>
         </file>
         <file name="Or.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Or.java">
            <metrics classes="1" methods="3" conditionals="6" ncloc="30" coveredstatements="11" coveredmethods="3" complexity="6" coveredconditionals="6" statements="11" loc="56" coveredelements="20" elements="20"/>
            <class name="Or">
               <metrics methods="3" conditionals="6" coveredstatements="11" coveredmethods="3" complexity="6" coveredconditionals="6" statements="11" coveredelements="20" elements="20"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="Or(List&lt;IArgumentMatcher&gt;)"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" count="1" complexity="2" type="method" signature="matches(Object) : boolean"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="39" falsecount="1" type="cond" truecount="1"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="3" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="48" falsecount="1" type="cond" truecount="1"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="50" falsecount="1" type="cond" truecount="1"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
         </file>
         <file name="Same.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\Same.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="19" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" loc="45" coveredelements="8" elements="8"/>
            <class name="Same">
               <metrics methods="3" conditionals="0" coveredstatements="5" coveredmethods="3" complexity="3" coveredconditionals="0" statements="5" coveredelements="8" elements="8"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="Same(Object)"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
         </file>
         <file name="StartsWith.java" path="D:\Programmation\easymock-clean\easymock\src\main\java\org\easymock\internal\matchers\StartsWith.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" loc="42" coveredelements="6" elements="6"/>
            <class name="StartsWith">
               <metrics methods="3" conditionals="0" coveredstatements="3" coveredmethods="3" complexity="3" coveredconditionals="0" statements="3" coveredelements="6" elements="6"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="StartsWith(String)"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="matches(Object) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" count="1" complexity="1" type="method" signature="appendTo(StringBuffer) : void"/>
            <line num="40" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.classextension.internal">
         <metrics conditionals="0" methods="2" classes="2" files="2" coveredstatements="2" complexity="2" loc="68" ncloc="20" coveredmethods="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
         <file name="MockBuilder.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\internal\MockBuilder.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="10" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" loc="35" coveredelements="2" elements="2"/>
            <class name="MockBuilder">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="MockBuilder(Class&lt;T&gt;)"/>
            <line num="32" count="1" type="stmt"/>
         </file>
         <file name="MocksClassControl.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\internal\MocksClassControl.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="10" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" loc="33" coveredelements="2" elements="2"/>
            <class name="MocksClassControl">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="30" count="1" complexity="1" type="method" signature="MocksClassControl(MockType)"/>
            <line num="31" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.classextension">
         <metrics conditionals="0" methods="20" classes="5" files="5" coveredstatements="26" complexity="20" loc="508" ncloc="122" coveredmethods="20" coveredconditionals="0" statements="26" coveredelements="46" elements="46"/>
         <file name="ConstructorArgs.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\ConstructorArgs.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="8" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" loc="40" coveredelements="2" elements="2"/>
            <class name="ConstructorArgs">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="ConstructorArgs(Constructor&lt;?&gt;,Object)"/>
            <line num="38" count="1" type="stmt"/>
         </file>
         <file name="EasyMock.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\EasyMock.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="20" coveredstatements="4" coveredmethods="4" complexity="4" coveredconditionals="0" statements="4" loc="58" coveredelements="8" elements="8"/>
            <class name="EasyMock">
               <metrics methods="4" conditionals="0" coveredstatements="4" coveredmethods="4" complexity="4" coveredconditionals="0" statements="4" coveredelements="8" elements="8"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="createStrictControl() : IMocksControl"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" count="1" complexity="1" type="method" signature="createControl() : IMocksControl"/>
            <line num="42" count="1" type="stmt"/>
            <line num="45" count="1" complexity="1" type="method" signature="createNiceControl() : IMocksControl"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="createMockBuilder(Class&lt;T&gt;) : IMockBuilder&lt;T&gt;"/>
            <line num="50" count="1" type="stmt"/>
         </file>
         <file name="EasyMockSupport.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\EasyMockSupport.java">
            <metrics classes="1" methods="15" conditionals="0" ncloc="86" coveredstatements="21" coveredmethods="15" complexity="15" coveredconditionals="0" statements="21" loc="349" coveredelements="36" elements="36"/>
            <class name="EasyMockSupport">
               <metrics methods="15" conditionals="0" coveredstatements="21" coveredmethods="15" complexity="15" coveredconditionals="0" statements="21" coveredelements="36" elements="36"/>
            </class>
            <line num="49" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,Method) : T"/>
            <line num="51" count="1" type="stmt"/>
            <line num="72" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="75" count="1" type="stmt"/>
            <line num="96" count="1" complexity="1" type="method" signature="createStrictMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="99" count="1" type="stmt"/>
            <line num="123" count="1" complexity="1" type="method" signature="createStrictMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="126" count="1" type="stmt"/>
            <line num="146" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,Method) : T"/>
            <line num="148" count="1" type="stmt"/>
            <line num="169" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="172" count="1" type="stmt"/>
            <line num="193" count="1" complexity="1" type="method" signature="createMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="196" count="1" type="stmt"/>
            <line num="220" count="1" complexity="1" type="method" signature="createMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="223" count="1" type="stmt"/>
            <line num="244" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,Method) : T"/>
            <line num="246" count="1" type="stmt"/>
            <line num="268" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,Method) : T"/>
            <line num="271" count="1" type="stmt"/>
            <line num="293" count="1" complexity="1" type="method" signature="createNiceMock(Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="296" count="1" type="stmt"/>
            <line num="321" count="1" complexity="1" type="method" signature="createNiceMock(String,Class&lt;T&gt;,ConstructorArgs,Method) : T"/>
            <line num="324" count="1" type="stmt"/>
            <line num="328" count="1" complexity="1" type="method" signature="createStrictControl() : IMocksControl"/>
            <line num="330" count="1" type="stmt"/>
            <line num="331" count="1" type="stmt"/>
            <line num="332" count="1" type="stmt"/>
            <line num="335" count="1" complexity="1" type="method" signature="createControl() : IMocksControl"/>
            <line num="337" count="1" type="stmt"/>
            <line num="338" count="1" type="stmt"/>
            <line num="339" count="1" type="stmt"/>
            <line num="342" count="1" complexity="1" type="method" signature="createNiceControl() : IMocksControl"/>
            <line num="344" count="1" type="stmt"/>
            <line num="345" count="1" type="stmt"/>
            <line num="346" count="1" type="stmt"/>
         </file>
         <file name="IMockBuilder.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\IMockBuilder.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="4" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="31" coveredelements="0" elements="0"/>
            <class name="IMockBuilder">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IMocksControl.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\main\java\org\easymock\classextension\IMocksControl.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="4" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="30" coveredelements="0" elements="0"/>
            <class name="IMocksControl">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
      </package>
   </project>
   <testproject timestamp="1320887575141" name="EasyMock Parent 3.1 (Aggregated)">
      <metrics conditionals="92" methods="909" classes="153" files="92" packages="4" coveredstatements="3945" complexity="1237" loc="12839" ncloc="8843" coveredmethods="857" coveredconditionals="57" statements="4239" coveredelements="4859" elements="5240"/>
      <package name="org.easymock.tests">
         <metrics conditionals="24" methods="402" classes="89" files="51" coveredstatements="1518" complexity="565" loc="5730" ncloc="3792" coveredmethods="380" coveredconditionals="12" statements="1675" coveredelements="1910" elements="2101"/>
         <file name="ArgumentToStringTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ArgumentToStringTest.java">
            <metrics classes="1" methods="10" conditionals="0" ncloc="51" coveredstatements="14" coveredmethods="10" complexity="10" coveredconditionals="0" statements="14" loc="83" coveredelements="24" elements="24"/>
            <class name="ArgumentToStringTest">
               <metrics conditionals="0" methods="10" coveredstatements="14" complexity="10" testpasses="40" testruns="40" coveredmethods="10" coveredconditionals="0" statements="14" testfailures="0" coveredelements="24" elements="24" testduration="0.036000002"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0060" signature="testAppendArgument_null() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAppendArgument_String() : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAppendArgument_Character() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAppendArgument_Array() : void"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAppendArgument_Full() : void"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" count="1" complexity="1" type="method" signature="assertString(String,Object) : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testArgumentToString() : void"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testArgumentsToString() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testArgumentsToString_null() : void"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
         </file>
         <file name="CapturesMatcherTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\CapturesMatcherTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="42" coveredstatements="16" coveredmethods="4" complexity="4" coveredconditionals="0" statements="16" loc="77" coveredelements="20" elements="20"/>
            <class name="CapturesMatcherTest">
               <metrics conditionals="0" methods="4" coveredstatements="16" complexity="4" testpasses="5" testruns="5" coveredmethods="4" coveredconditionals="0" statements="16" testfailures="0" coveredelements="20" elements="20" testduration="0.0030"/>
            </class>
            <line num="40" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="tearDown() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="test() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="74" count="1" complexity="1" type="method" signature="clearBuffer() : void"/>
            <line num="75" count="1" type="stmt"/>
         </file>
         <file name="CglibTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\CglibTest.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="31" coveredstatements="13" coveredmethods="3" complexity="3" coveredconditionals="0" statements="13" loc="72" coveredelements="16" elements="16"/>
            <class name="CglibTest">
               <metrics conditionals="0" methods="3" coveredstatements="13" complexity="3" testpasses="5" testruns="5" coveredmethods="3" coveredconditionals="0" statements="13" testfailures="0" coveredelements="16" elements="16" testduration="0.049"/>
            </class>
            <line num="41" testsuccess="true" count="1" complexity="1" type="method" testduration="0.01" signature="test() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" count="1" complexity="1" type="method" signature="createMock() : Factory"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" complexity="1" type="method" signature="intercept(Object,Method,Object[],MethodProxy) : Object"/>
            <line num="54" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
         </file>
         <file name="ClassInstantiatorFactoryTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ClassInstantiatorFactoryTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="39" coveredstatements="10" coveredmethods="6" complexity="6" coveredconditionals="0" statements="10" loc="66" coveredelements="16" elements="16"/>
            <class name="ClassInstantiatorFactoryTest">
               <metrics conditionals="0" methods="6" coveredstatements="10" complexity="6" testpasses="20" testruns="20" coveredmethods="6" coveredconditionals="0" statements="10" testfailures="0" coveredelements="16" elements="16" testduration="0.013000001"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="37" count="1" complexity="1" type="method" signature="tearDown() : void"/>
            <line num="41" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="getInstantiator_Default() : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0050" signature="getInstantiator_Overriden() : void"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="getInstantiator_BackToDefault() : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="getJVM() : void"/>
            <line num="64" count="1" type="stmt"/>
         </file>
         <file name="ConstructorTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ConstructorTest.java">
            <metrics classes="4" methods="5" conditionals="0" ncloc="35" coveredstatements="9" coveredmethods="3" complexity="5" coveredconditionals="0" statements="11" loc="72" coveredelements="12" elements="16"/>
            <class name="ConstructorTest">
               <metrics conditionals="0" methods="3" coveredstatements="9" complexity="3" testpasses="10" testruns="10" coveredmethods="3" coveredconditionals="0" statements="9" testfailures="0" coveredelements="12" elements="12" testduration="0.037000004"/>
            </class>
            <class name="ConstructorTest.FooClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <class name="ConstructorTest.EmptyConstructorClass">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="ConstructorTest.ConstructorCallingPublicMethodClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <line num="29" count="0" complexity="1" type="method" signature="foo() : void"/>
            <line num="31" count="0" type="stmt"/>
            <line num="40" count="0" complexity="1" type="method" signature="ConstructorCallingPublicMethodClass()"/>
            <line num="41" count="0" type="stmt"/>
            <line num="45" count="1" complexity="1" type="method" signature="testConstructor(Class&lt;? extends FooClass&gt;) : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="emptyConstructor() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="constructorCallingPublicMethod() : void"/>
            <line num="70" count="1" type="stmt"/>
         </file>
         <file name="DefaultClassInstantiatorTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\DefaultClassInstantiatorTest.java">
            <metrics classes="11" methods="25" conditionals="0" ncloc="132" coveredstatements="22" coveredmethods="22" complexity="28" coveredconditionals="0" statements="27" loc="189" coveredelements="44" elements="52"/>
            <class name="DefaultClassInstantiatorTest">
               <metrics conditionals="0" methods="15" coveredstatements="21" complexity="18" testpasses="60" testruns="60" coveredmethods="15" coveredconditionals="0" statements="24" testfailures="0" coveredelements="36" elements="39" testduration="0.21500003"/>
            </class>
            <class name="DefaultClassInstantiatorTest.PrimitiveParamClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.FinalParamClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.ProtectedConstructorClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.ProtectedWithPrimitiveConstructorClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.ParamClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.ObjectParamClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.PrivateConstructorClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <class name="DefaultClassInstantiatorTest.ConstructorWithCodeClass">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <class name="DefaultClassInstantiatorTest.SerializableClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <class name="DefaultClassInstantiatorTest.BadlyDoneSerializableClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <line num="40" count="1" complexity="1" type="method" signature="PrimitiveParamClass(int)"/>
            <line num="45" count="1" complexity="1" type="method" signature="FinalParamClass(String)"/>
            <line num="50" count="1" complexity="1" type="method" signature="ProtectedConstructorClass()"/>
            <line num="55" count="1" complexity="1" type="method" signature="ProtectedWithPrimitiveConstructorClass(int)"/>
            <line num="60" count="1" complexity="1" type="method" signature="ParamClass(FinalParamClass)"/>
            <line num="65" count="1" complexity="1" type="method" signature="ObjectParamClass(ParamClass)"/>
            <line num="70" count="0" complexity="1" type="method" signature="PrivateConstructorClass()"/>
            <line num="75" count="1" complexity="1" type="method" signature="ConstructorWithCodeClass()"/>
            <line num="76" count="1" type="stmt"/>
            <line num="82" count="0" complexity="1" type="method" signature="SerializableClass()"/>
            <line num="83" count="0" type="stmt"/>
            <line num="92" count="0" complexity="1" type="method" signature="BadlyDoneSerializableClass()"/>
            <line num="93" count="0" type="stmt"/>
            <line num="99" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" complexity="1" type="method" signature="tearDown() : void"/>
            <line num="108" count="1" type="stmt"/>
            <line num="111" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="emptyConstructor() : void"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0090" signature="primitiveType() : void"/>
            <line num="118" count="1" type="stmt"/>
            <line num="121" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="finalType() : void"/>
            <line num="123" count="1" type="stmt"/>
            <line num="126" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="protectedConstructor() : void"/>
            <line num="128" count="1" type="stmt"/>
            <line num="131" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="protectedWithPrimitiveConstructor() : void"/>
            <line num="133" count="1" type="stmt"/>
            <line num="136" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="objectParamRecusion() : void"/>
            <line num="138" count="1" type="stmt"/>
            <line num="141" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0030" signature="constructorWithCodeLimitation() : void"/>
            <line num="143" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="0" type="stmt"/>
            <line num="150" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0050" signature="privateConstructorLimitation() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="0" type="stmt"/>
            <line num="159" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="privateConstructor() : void"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="0" type="stmt"/>
            <line num="169" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="newInstance() : void"/>
            <line num="171" count="1" type="stmt"/>
            <line num="174" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="serializable() : void"/>
            <line num="176" count="1" type="stmt"/>
            <line num="179" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="badSerializable() : void"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="185" count="1" complexity="1" type="method" signature="checkInstatiation(Class&lt;T&gt;) : void"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
         </file>
         <file name="ErrorMessageTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ErrorMessageTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="34" coveredstatements="16" coveredmethods="4" complexity="4" coveredconditionals="0" statements="16" loc="59" coveredelements="20" elements="20"/>
            <class name="ErrorMessageTest">
               <metrics conditionals="0" methods="4" coveredstatements="16" complexity="4" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="16" testfailures="0" coveredelements="20" elements="20" testduration="0.0080"/>
            </class>
            <line num="28" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testGetters() : void"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAppendTo_matchingOne() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAppendTo_matchingNone() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAppendTo_matchingMultiple() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
         </file>
         <file name="ExpectedMethodCallTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ExpectedMethodCallTest.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="24" coveredstatements="6" coveredmethods="2" complexity="3" coveredconditionals="0" statements="7" loc="50" coveredelements="8" elements="9"/>
            <class name="ExpectedMethodCallTest">
               <metrics conditionals="0" methods="2" coveredstatements="6" complexity="3" testpasses="5" testruns="5" coveredmethods="2" coveredconditionals="0" statements="7" testfailures="0" coveredelements="8" elements="9" testduration="0.0"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testHashCode() : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="0" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
         </file>
         <file name="GenericTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\GenericTest.java">
            <metrics classes="7" methods="8" conditionals="0" ncloc="65" coveredstatements="18" coveredmethods="6" complexity="8" coveredconditionals="0" statements="21" loc="115" coveredelements="24" elements="29"/>
            <class name="GenericTest">
               <metrics conditionals="0" methods="4" coveredstatements="16" complexity="4" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="16" testfailures="0" coveredelements="20" elements="20" testduration="0.158"/>
            </class>
            <class name="GenericTest.C">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="GenericTest.B">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <class name="GenericTest.AbstractFoo">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="2" coveredelements="0" elements="3"/>
            </class>
            <class name="GenericTest.ConcreteFoo">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="GenericTest.GenericHolder">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <class name="GenericTest.StringHolder">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="38" count="0" complexity="1" type="method" signature="doCMethod(Integer) : void"/>
            <line num="39" count="0" type="stmt"/>
            <line num="43" testsuccess="true" count="1" complexity="1" type="method" testduration="0.036" signature="testTheBridgeMethodIsRecordedNotTheBridge() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testPartialMockingSeesBridgeHasUnmocked() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="64" count="0" complexity="1" type="method" signature="getSomeStrings() : Collection&lt;String&gt;"/>
            <line num="65" count="0" type="stmt"/>
            <line num="66" count="0" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testPackageScope() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="91" count="1" complexity="1" type="method" signature="go(T) : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="99" count="1" complexity="1" type="method" signature="set(String) : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="109" testsuccess="true" count="1" complexity="1" type="method" testduration="0.017" signature="testPartialMockBridgeMethodAreUnmocked() : void"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
         </file>
         <file name="IMethods.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\IMethods.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="43" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="102" coveredelements="0" elements="0"/>
            <class name="IMethods">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="IVarArgs.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\IVarArgs.java">
            <metrics classes="1" methods="0" conditionals="0" ncloc="13" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" loc="41" coveredelements="0" elements="0"/>
            <class name="IVarArgs">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
         </file>
         <file name="InvocationTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\InvocationTest.java">
            <metrics classes="3" methods="10" conditionals="0" ncloc="73" coveredstatements="28" coveredmethods="8" complexity="11" coveredconditionals="0" statements="29" loc="119" coveredelements="36" elements="39"/>
            <class name="InvocationTest">
               <metrics conditionals="0" methods="5" coveredstatements="25" complexity="6" testpasses="20" testruns="20" coveredmethods="5" coveredconditionals="0" statements="26" testfailures="0" coveredelements="30" elements="31" testduration="0.0070000007"/>
            </class>
            <class name="InvocationTest.ToString">
               <metrics methods="3" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="3" coveredconditionals="0" statements="2" coveredelements="4" elements="5"/>
            </class>
            <class name="InvocationTest.NoToString">
               <metrics methods="2" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="2" coveredconditionals="0" statements="1" coveredelements="2" elements="3"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testEquals() : void"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testHashCode() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="0" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="67" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testShouldDisplayMocksToStringIfValidJavaIdentifier() : void"/>
            <line num="72" count="1" complexity="1" type="method" signature="ToString(String)"/>
            <line num="73" count="1" type="stmt"/>
            <line num="76" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="78" count="1" type="stmt"/>
            <line num="81" count="0" complexity="1" type="method" signature="aMethod() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="96" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testShouldDisplayMocksToStringIfNoToStringMethod() : void"/>
            <line num="101" count="1" complexity="1" type="method" signature="NoToString(String)"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="0" complexity="1" type="method" signature="aMethod() : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
         </file>
         <file name="LimitationsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\LimitationsTest.java">
            <metrics classes="4" methods="7" conditionals="0" ncloc="52" coveredstatements="12" coveredmethods="5" complexity="9" coveredconditionals="0" statements="16" loc="85" coveredelements="17" elements="23"/>
            <class name="LimitationsTest">
               <metrics conditionals="0" methods="5" coveredstatements="11" complexity="7" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="15" testfailures="0" coveredelements="15" elements="20" testduration="0.083"/>
            </class>
            <class name="LimitationsTest.MyClass">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <class name="LimitationsTest.PrivateClass">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <class name="LimitationsTest.NativeClass">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="foo() : int"/>
            <line num="34" count="1" type="stmt"/>
            <line num="39" count="0" complexity="1" type="method" signature="PrivateClass()"/>
            <line num="47" count="0" complexity="2" type="method" signature="finalClass() : void"/>
            <line num="48" count="0" type="stmt"/>
            <line num="49" count="0" type="stmt"/>
            <line num="50" count="0" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0070" signature="abstractClass() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0020" signature="mockFinalMethod() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="0" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="privateConstructor() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="mockNativeMethod() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
         </file>
         <file name="MatchableArgumentsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\MatchableArgumentsTest.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="26" coveredstatements="8" coveredmethods="2" complexity="2" coveredconditionals="0" statements="8" loc="56" coveredelements="10" elements="10"/>
            <class name="MatchableArgumentsTest">
               <metrics conditionals="0" methods="2" coveredstatements="8" complexity="2" testpasses="5" testruns="5" coveredmethods="2" coveredconditionals="0" statements="8" testfailures="0" coveredelements="10" elements="10" testduration="0.0"/>
            </class>
            <line num="36" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testEquals() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
         </file>
         <file name="MethodSerializationWrapperTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\MethodSerializationWrapperTest.java">
            <metrics classes="2" methods="2" conditionals="0" ncloc="19" coveredstatements="3" coveredmethods="1" complexity="2" coveredconditionals="0" statements="3" loc="44" coveredelements="4" elements="5"/>
            <class name="MethodSerializationWrapperTest">
               <metrics conditionals="0" methods="1" coveredstatements="3" complexity="1" testpasses="5" testruns="5" coveredmethods="1" coveredconditionals="0" statements="3" testfailures="0" coveredelements="4" elements="4" testduration="0.012000001"/>
            </class>
            <class name="MethodSerializationWrapperTest.A">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <line num="31" count="0" complexity="1" type="method" signature="foo(String,int,String[],int[],String) : void"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testGetMethod() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
         </file>
         <file name="MockClassControlTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\MockClassControlTest.java">
            <metrics classes="5" methods="19" conditionals="0" ncloc="100" coveredstatements="26" coveredmethods="14" complexity="19" coveredconditionals="0" statements="30" loc="168" coveredelements="40" elements="49"/>
            <class name="MockClassControlTest">
               <metrics conditionals="0" methods="14" coveredstatements="26" complexity="14" testpasses="40" testruns="40" coveredmethods="14" coveredconditionals="0" statements="26" testfailures="0" coveredelements="40" elements="40" testduration="0.064"/>
            </class>
            <class name="MockClassControlTest.ClassToMock">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="MockClassControlTest.ClassToMockWithOverload">
               <metrics methods="3" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="3" coveredconditionals="0" statements="3" coveredelements="0" elements="6"/>
            </class>
            <class name="MockClassControlTest.ClassWithAnotherOverload">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <class name="MockClassControlTest.ClassWithFinalize">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <line num="48" count="0" complexity="1" type="method" signature="equals(Object) : boolean"/>
            <line num="50" count="0" type="stmt"/>
            <line num="53" count="0" complexity="1" type="method" signature="hashCode() : int"/>
            <line num="55" count="0" type="stmt"/>
            <line num="58" count="0" complexity="1" type="method" signature="toString() : String"/>
            <line num="60" count="0" type="stmt"/>
            <line num="66" count="0" complexity="1" type="method" signature="toString() : String"/>
            <line num="68" count="0" type="stmt"/>
            <line num="74" count="0" complexity="1" type="method" signature="finalize() : void"/>
            <line num="81" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="85" count="1" complexity="1" type="method" signature="tearDown() : void"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" count="1" complexity="1" type="method" signature="initMock(Class&lt;?&gt;) : void"/>
            <line num="91" count="1" type="stmt"/>
            <line num="94" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testEquals() : void"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testEquals_WithOverload() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="107" count="1" complexity="1" type="method" signature="testEquals(Class&lt;?&gt;) : void"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testHashCode() : void"/>
            <line num="116" count="1" type="stmt"/>
            <line num="119" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testHashCode_WithOverload() : void"/>
            <line num="121" count="1" type="stmt"/>
            <line num="128" count="1" complexity="1" type="method" signature="testHashCode(Class&lt;?&gt;) : void"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="135" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testToString() : void"/>
            <line num="137" count="1" type="stmt"/>
            <line num="140" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testToString_WithOverload() : void"/>
            <line num="142" count="1" type="stmt"/>
            <line num="145" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testToString_WithTwoOverload() : void"/>
            <line num="147" count="1" type="stmt"/>
            <line num="153" count="1" complexity="1" type="method" signature="testToString(Class&lt;?&gt;) : void"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="161" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testFinalize_AreIgnored() : void"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
         </file>
         <file name="MockNameTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\MockNameTest.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="13" coveredstatements="4" coveredmethods="1" complexity="1" coveredconditionals="0" statements="4" loc="35" coveredelements="5" elements="5"/>
            <class name="MockNameTest">
               <metrics conditionals="0" methods="1" coveredstatements="4" complexity="1" testpasses="5" testruns="5" coveredmethods="1" coveredconditionals="0" statements="4" testfailures="0" coveredelements="5" elements="5" testduration="0.029000003"/>
            </class>
            <line num="28" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0070" signature="defaultName() : void"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
         </file>
         <file name="MockingTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\MockingTest.java">
            <metrics classes="2" methods="18" conditionals="0" ncloc="99" coveredstatements="32" coveredmethods="17" complexity="19" coveredconditionals="0" statements="34" loc="148" coveredelements="49" elements="52"/>
            <class name="MockingTest">
               <metrics conditionals="0" methods="16" coveredstatements="31" complexity="17" testpasses="50" testruns="50" coveredmethods="16" coveredconditionals="0" statements="32" testfailures="0" coveredelements="47" elements="48" testduration="0.058999997"/>
            </class>
            <class name="MockingTest.ClassToMock">
               <metrics methods="2" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="2" coveredconditionals="0" statements="2" coveredelements="2" elements="4"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="foo() : int"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" count="0" complexity="1" type="method" signature="method() : int"/>
            <line num="43" count="0" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testTwoMocks() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testInterfaceMocking() : void"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNiceInterfaceMocking() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testStrictInterfaceMocking() : void"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testClassMocking() : void"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testStrictClassMocking() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNiceClassMocking() : void"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" count="1" complexity="1" type="method" signature="checkInterfaceMock(Object,MockType) : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0070" signature="testPartialClassMocking() : void"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="104" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testStrictPartialClassMocking() : void"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="111" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNicePartialClassMocking() : void"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="118" count="1" complexity="1" type="method" signature="checkPartialClassMocking(ClassToMock,MockType) : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="128" count="1" complexity="1" type="method" signature="checkClassMocking(Object,MockType) : void"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" complexity="1" type="method" signature="checkBehavior(Object,MockType) : void"/>
            <line num="133" count="1" type="stmt"/>
            <line num="136" count="1" complexity="1" type="method" signature="extractBehavior(Object) : MockType"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="141" count="1" complexity="2" type="method" signature="getMethod() : Method[]"/>
            <line num="142" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="145" count="0" type="stmt"/>
         </file>
         <file name="NiceMockControlLongCompatibleReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\NiceMockControlLongCompatibleReturnValueTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="37" coveredstatements="12" coveredmethods="6" complexity="6" coveredconditionals="0" statements="12" loc="66" coveredelements="18" elements="18"/>
            <class name="NiceMockControlLongCompatibleReturnValueTest">
               <metrics conditionals="0" methods="6" coveredstatements="12" complexity="6" testpasses="25" testruns="25" coveredmethods="6" coveredconditionals="0" statements="12" testfailures="0" coveredelements="18" elements="18" testduration="0.0"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="byteReturningValue() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="shortReturningValue() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="charReturningValue() : void"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="intReturningValue() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longReturningValue() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
         </file>
         <file name="NiceMockControlTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\NiceMockControlTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="33" coveredstatements="10" coveredmethods="5" complexity="5" coveredconditionals="0" statements="10" loc="60" coveredelements="15" elements="15"/>
            <class name="NiceMockControlTest">
               <metrics conditionals="0" methods="5" coveredstatements="10" complexity="5" testpasses="20" testruns="20" coveredmethods="5" coveredconditionals="0" statements="10" testfailures="0" coveredelements="15" elements="15" testduration="0.0010"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueBoolean() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueFloat() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueDouble() : void"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueObject() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
         </file>
         <file name="ObjectMethodsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ObjectMethodsTest.java">
            <metrics classes="4" methods="7" conditionals="0" ncloc="54" coveredstatements="16" coveredmethods="7" complexity="7" coveredconditionals="0" statements="16" loc="90" coveredelements="23" elements="23"/>
            <class name="ObjectMethodsTest">
               <metrics conditionals="0" methods="7" coveredstatements="16" complexity="7" testpasses="30" testruns="30" coveredmethods="7" coveredconditionals="0" statements="16" testfailures="0" coveredelements="23" elements="23" testduration="0.010000001"/>
            </class>
            <class name="ObjectMethodsTest.EmptyInterface">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="ObjectMethodsTest.MockedClass">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="ObjectMethodsTest.DummyProxy">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsBeforeActivation() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsAfterActivation() : void"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testHashCode() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="toStringBeforeActivation() : void"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="toStringAfterActivation() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="82" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="toStringForClasses() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidDefaultReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidDefaultReturnValueTest.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="21" coveredstatements="4" coveredmethods="2" complexity="3" coveredconditionals="0" statements="5" loc="45" coveredelements="6" elements="7"/>
            <class name="RecordStateInvalidDefaultReturnValueTest">
               <metrics conditionals="0" methods="2" coveredstatements="4" complexity="3" testpasses="5" testruns="5" coveredmethods="2" coveredconditionals="0" statements="5" testfailures="0" coveredelements="6" elements="7" testduration="0.0060"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setInvalidStubReturnValue() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="0" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidDefaultThrowableTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidDefaultThrowableTest.java">
            <metrics classes="2" methods="4" conditionals="0" ncloc="45" coveredstatements="10" coveredmethods="4" complexity="7" coveredconditionals="0" statements="13" loc="74" coveredelements="14" elements="17"/>
            <class name="RecordStateInvalidDefaultThrowableTest">
               <metrics conditionals="0" methods="4" coveredstatements="10" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="13" testfailures="0" coveredelements="14" elements="17" testduration="0.0020"/>
            </class>
            <class name="RecordStateInvalidDefaultThrowableTest.CheckedException">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwNull() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="0" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="53" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwCheckedExceptionWhereNoCheckedExceptionIsThrown() : void"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="0" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwWrongCheckedException() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="0" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidRangeTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidRangeTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="65" coveredstatements="23" coveredmethods="6" complexity="11" coveredconditionals="0" statements="28" loc="94" coveredelements="29" elements="34"/>
            <class name="RecordStateInvalidRangeTest">
               <metrics conditionals="0" methods="6" coveredstatements="23" complexity="11" testpasses="25" testruns="25" coveredmethods="6" coveredconditionals="0" statements="28" testfailures="0" coveredelements="29" elements="34" testduration="0.0030"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setOpenCallCountTwice() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="0" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="48" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setCloseCallAfterOpenOne() : void"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="0" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setIllegalMinimumCount() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="0" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="setIllegalMaximumCount() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="0" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="84" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setMinimumBiggerThanMaximum() : void"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="0" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidReturnValueTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="40" coveredstatements="11" coveredmethods="4" complexity="7" coveredconditionals="0" statements="14" loc="67" coveredelements="15" elements="18"/>
            <class name="RecordStateInvalidReturnValueTest">
               <metrics conditionals="0" methods="4" coveredstatements="11" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="14" testfailures="0" coveredelements="15" elements="18" testduration="0.0010"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setInvalidBooleanReturnValue() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="0" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="47" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setReturnValueForVoidMethod() : void"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="0" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nullForPrimitive() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="0" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidStateChangeTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidStateChangeTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="48" coveredstatements="14" coveredmethods="4" complexity="7" coveredconditionals="0" statements="17" loc="74" coveredelements="18" elements="21"/>
            <class name="RecordStateInvalidStateChangeTest">
               <metrics conditionals="0" methods="4" coveredstatements="14" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="17" testfailures="0" coveredelements="18" elements="21" testduration="0.0080"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="activateWithoutReturnValue() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="0" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="secondCallWithoutReturnValue() : void"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="0" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="65" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="verifyWithoutActivation() : void"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="0" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidThrowableTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidThrowableTest.java">
            <metrics classes="2" methods="4" conditionals="0" ncloc="48" coveredstatements="13" coveredmethods="4" complexity="7" coveredconditionals="0" statements="16" loc="77" coveredelements="17" elements="20"/>
            <class name="RecordStateInvalidThrowableTest">
               <metrics conditionals="0" methods="4" coveredstatements="13" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="16" testfailures="0" coveredelements="17" elements="20" testduration="0.0020"/>
            </class>
            <class name="RecordStateInvalidThrowableTest.CheckedException">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwNull() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="0" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="54" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwCheckedExceptionWhereNoCheckedExceptionIsThrown() : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="0" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwWrongCheckedException() : void"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="0" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
         </file>
         <file name="RecordStateInvalidUsageTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateInvalidUsageTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="38" coveredstatements="10" coveredmethods="4" complexity="7" coveredconditionals="0" statements="13" loc="65" coveredelements="14" elements="17"/>
            <class name="RecordStateInvalidUsageTest">
               <metrics conditionals="0" methods="4" coveredstatements="10" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="13" testfailures="0" coveredelements="14" elements="17" testduration="0.0"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="notAMockPassedToExpect() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="0" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="openVoidCallCountWithoutMethodCall() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="0" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="56" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setWrongReturnValueBoolean() : void"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="0" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
         </file>
         <file name="RecordStateMethodCallMissingTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\RecordStateMethodCallMissingTest.java">
            <metrics classes="1" methods="28" conditionals="0" ncloc="246" coveredstatements="77" coveredmethods="26" complexity="52" coveredconditionals="0" statements="103" loc="299" coveredelements="103" elements="131"/>
            <class name="RecordStateMethodCallMissingTest">
               <metrics conditionals="0" methods="28" coveredstatements="77" complexity="52" testpasses="120" testruns="120" coveredmethods="26" coveredconditionals="0" statements="103" testfailures="0" coveredelements="103" elements="131" testduration="0.011000001"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="assertMessage(String,IllegalStateException) : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setBooleanReturnValueWithoutMethodCall() : void"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="0" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setLongReturnValueWithoutMethodCall() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="0" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="67" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setFloatReturnValueWithoutMethodCall() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="0" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setDoubleReturnValueWithoutMethodCall() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="0" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="87" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setObjectReturnValueWithoutMethodCall() : void"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="0" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="97" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setThrowableWithoutMethodCall() : void"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="0" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="107" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="setAnswerWithoutMethodCall() : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="0" complexity="1" type="method" signature="answer() : Object"/>
            <line num="112" count="0" type="stmt"/>
            <line num="116" count="0" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="122" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setDelegateToWithoutMethodCall() : void"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="0" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="132" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setAnyTimesWithoutMethodCall() : void"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="0" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="142" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setAtLeastOnceWithoutMethodCall() : void"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="0" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="152" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setTimesWithoutMethodCall() : void"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="0" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="162" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setTimesMinMaxWithoutMethodCall() : void"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="0" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="172" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setOnceWithoutMethodCall() : void"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="0" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="182" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setBooleanDefaultReturnValueWithoutMethodCall() : void"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="0" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="192" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setLongDefaultReturnValueWithoutMethodCall() : void"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="0" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="202" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setFloatDefaultReturnValueWithoutMethodCall() : void"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="206" count="0" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="212" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setDoubleDefaultReturnValueWithoutMethodCall() : void"/>
            <line num="214" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="216" count="0" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="222" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setObjectDefaultReturnValueWithoutMethodCall() : void"/>
            <line num="224" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="226" count="0" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="232" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="setDefaultVoidCallableWithoutMethodCall() : void"/>
            <line num="234" count="1" type="stmt"/>
            <line num="235" count="1" type="stmt"/>
            <line num="236" count="0" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="242" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="setDefaultThrowableWithoutMethodCall() : void"/>
            <line num="244" count="1" type="stmt"/>
            <line num="245" count="1" type="stmt"/>
            <line num="246" count="0" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="252" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="setStubAnswerWithoutMethodCall() : void"/>
            <line num="254" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="256" count="0" complexity="1" type="method" signature="answer() : Object"/>
            <line num="257" count="0" type="stmt"/>
            <line num="261" count="0" type="stmt"/>
            <line num="263" count="1" type="stmt"/>
            <line num="267" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="setStubDelegateToWithoutMethodCall() : void"/>
            <line num="269" count="1" type="stmt"/>
            <line num="270" count="1" type="stmt"/>
            <line num="271" count="0" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="277" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="timesWithoutReturnValue() : void"/>
            <line num="279" count="1" type="stmt"/>
            <line num="280" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="282" count="0" type="stmt"/>
            <line num="284" count="1" type="stmt"/>
            <line num="288" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="asStubWithNonVoidMethod() : void"/>
            <line num="290" count="1" type="stmt"/>
            <line num="291" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="0" type="stmt"/>
            <line num="295" count="1" type="stmt"/>
         </file>
         <file name="ReplayStateInvalidCallsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ReplayStateInvalidCallsTest.java">
            <metrics classes="1" methods="24" conditionals="0" ncloc="106" coveredstatements="24" coveredmethods="23" complexity="24" coveredconditionals="0" statements="24" loc="152" coveredelements="47" elements="48"/>
            <class name="ReplayStateInvalidCallsTest">
               <metrics conditionals="0" methods="24" coveredstatements="24" complexity="24" testpasses="110" testruns="110" coveredmethods="23" coveredconditionals="0" statements="24" testfailures="0" coveredelements="47" elements="48" testduration="0.0080"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="expectAndThrowLongWithMinMax() : void"/>
            <line num="42" count="1" type="stmt"/>
            <line num="45" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="expectAndReturnObjectWithMinMax() : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="asStub() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="setDefaultReturnValue() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="setDefaultThrowable() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="65" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="setDefaultVoidCallable() : void"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="replay() : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="checkOrder() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="makeThreadSafe() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="85" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubReturn() : void"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubThrow() : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubAnswer() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubDelegateTo() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="times() : void"/>
            <line num="107" count="1" type="stmt"/>
            <line num="110" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="callback() : void"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="0" complexity="1" type="method" signature="run() : void"/>
            <line num="118" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andReturn() : void"/>
            <line num="120" count="1" type="stmt"/>
            <line num="123" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andThrow() : void"/>
            <line num="125" count="1" type="stmt"/>
            <line num="128" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andAnswer() : void"/>
            <line num="130" count="1" type="stmt"/>
            <line num="133" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andDelegateTo() : void"/>
            <line num="135" count="1" type="stmt"/>
            <line num="138" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultThrowable() : void"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValue() : void"/>
            <line num="145" count="1" type="stmt"/>
            <line num="148" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultVoidCallable() : void"/>
            <line num="150" count="1" type="stmt"/>
         </file>
         <file name="ReplayStateInvalidUsageTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ReplayStateInvalidUsageTest.java">
            <metrics classes="1" methods="13" conditionals="0" ncloc="72" coveredstatements="18" coveredmethods="13" complexity="13" coveredconditionals="0" statements="18" loc="112" coveredelements="31" elements="31"/>
            <class name="ReplayStateInvalidUsageTest">
               <metrics conditionals="0" methods="13" coveredstatements="18" complexity="13" testpasses="60" testruns="60" coveredmethods="13" coveredconditionals="0" statements="18" testfailures="0" coveredelements="31" elements="31" testduration="0.0030"/>
            </class>
            <line num="42" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="53" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="setVoidCallable() : void"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="replay() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="createMock() : void"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="createMockWithName() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="checkOrder() : void"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="makeThreadSafe() : void"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="checkIsUsedInOneThread() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubReturn() : void"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andStubThrow() : void"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="asStub() : void"/>
            <line num="100" count="1" type="stmt"/>
            <line num="103" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="times() : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="anyTimes() : void"/>
            <line num="110" count="1" type="stmt"/>
         </file>
         <file name="ResultTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\ResultTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="31" coveredstatements="12" coveredmethods="4" complexity="4" coveredconditionals="0" statements="12" loc="59" coveredelements="16" elements="16"/>
            <class name="ResultTest">
               <metrics conditionals="0" methods="4" coveredstatements="12" complexity="4" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="12" testfailures="0" coveredelements="16" elements="16" testduration="0.0060000005"/>
            </class>
            <line num="30" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="createThrowResultToString() : void"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="createReturnResultToString() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="createDelegateResultToString() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="emptyResults() : void"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
         </file>
         <file name="StacktraceTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\StacktraceTest.java">
            <metrics classes="2" methods="11" conditionals="0" ncloc="108" coveredstatements="38" coveredmethods="11" complexity="18" coveredconditionals="0" statements="39" loc="140" coveredelements="49" elements="50"/>
            <class name="StacktraceTest">
               <metrics conditionals="0" methods="10" coveredstatements="37" complexity="17" testpasses="35" testruns="35" coveredmethods="10" coveredconditionals="0" statements="38" testfailures="0" coveredelements="47" elements="48" testduration="0.033000004"/>
            </class>
            <class name="StacktraceTest.ToStringThrowsException">
               <metrics methods="1" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="1" coveredconditionals="0" statements="1" coveredelements="2" elements="2"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="45" count="1" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock() : void"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="71" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock() : void"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="82" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="0" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="95" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="assertFillWhenThrowingAnswer() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="106" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="assertNoFillWhenDelegatingAnswer() : void"/>
            <line num="108" count="1" type="stmt"/>
            <line num="110" count="1" complexity="1" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="112" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="125" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="assertNoFillWhenIAnswerAnswer() : void"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" complexity="1" type="method" signature="answer() : String"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
         </file>
         <file name="UsageCallCountTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageCallCountTest.java">
            <metrics classes="2" methods="15" conditionals="0" ncloc="105" coveredstatements="48" coveredmethods="15" complexity="17" coveredconditionals="0" statements="50" loc="143" coveredelements="63" elements="65"/>
            <class name="UsageCallCountTest">
               <metrics conditionals="0" methods="15" coveredstatements="48" complexity="17" testpasses="45" testruns="45" coveredmethods="15" coveredconditionals="0" statements="50" testfailures="0" coveredelements="63" elements="65" testduration="0.014000001"/>
            </class>
            <class name="UsageCallCountTest.VoidMethodInterface">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="35" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="mockWithNoExpectedCallsPassesWithNoCalls() : void"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="mockWithNoExpectedCallsFailsAtFirstCall() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="mockWithOneExpectedCallFailsAtVerify() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="mockWithOneExpectedCallPassesWithOneCall() : void"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="67" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="mockWithOneExpectedCallFailsAtSecondCall() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="tooFewCalls() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="correctNumberOfCalls() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="91" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="tooManyCalls() : void"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" count="1" complexity="1" type="method" signature="callMethodOnce() : void"/>
            <line num="100" count="1" type="stmt"/>
            <line num="103" count="1" complexity="1" type="method" signature="callMethodTwice() : void"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" count="1" complexity="1" type="method" signature="callMethodThreeTimes() : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" count="1" complexity="2" type="method" signature="assertVerifyFails() : void"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="0" type="stmt"/>
            <line num="122" count="1" complexity="2" type="method" signature="assertMethodCallFails() : void"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="0" type="stmt"/>
            <line num="130" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="noUpperLimitWithoutCallCountSet() : void"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
         </file>
         <file name="UsageDefaultReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageDefaultReturnValueTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="85" coveredstatements="52" coveredmethods="6" complexity="8" coveredconditionals="0" statements="54" loc="130" coveredelements="58" elements="60"/>
            <class name="UsageDefaultReturnValueTest">
               <metrics conditionals="0" methods="6" coveredstatements="52" complexity="8" testpasses="25" testruns="25" coveredmethods="6" coveredconditionals="0" statements="54" testfailures="0" coveredelements="58" elements="60" testduration="0.012000001"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValue() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="defaultVoidCallable() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="0" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="defaultThrowable() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="0" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="102" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="defaultReturnValueBoolean() : void"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="returnValueAndDefaultReturnValue() : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
         </file>
         <file name="UsageExpectAndDefaultReturnTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageExpectAndDefaultReturnTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="52" coveredstatements="26" coveredmethods="6" complexity="6" coveredconditionals="0" statements="26" loc="84" coveredelements="32" elements="32"/>
            <class name="UsageExpectAndDefaultReturnTest">
               <metrics conditionals="0" methods="6" coveredstatements="26" complexity="6" testpasses="25" testruns="25" coveredmethods="6" coveredconditionals="0" statements="26" testfailures="0" coveredelements="32" elements="32" testduration="0.0010"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="booleanType() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longType() : void"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="floatType() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="doubleType() : void"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="objectType() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
         </file>
         <file name="UsageExpectAndDefaultThrowTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageExpectAndDefaultThrowTest.java">
            <metrics classes="1" methods="7" conditionals="0" ncloc="122" coveredstatements="56" coveredmethods="7" complexity="20" coveredconditionals="0" statements="66" loc="159" coveredelements="63" elements="73"/>
            <class name="UsageExpectAndDefaultThrowTest">
               <metrics conditionals="0" methods="7" coveredstatements="56" complexity="20" testpasses="30" testruns="30" coveredmethods="7" coveredconditionals="0" statements="66" testfailures="0" coveredelements="63" elements="73" testduration="0.0060000005"/>
            </class>
            <line num="36" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="booleanType() : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="0" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="0" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="longType() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="0" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="0" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="floatType() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="0" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="0" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="doubleType() : void"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="0" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="0" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="117" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="object() : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="0" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="0" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="136" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="throwableAndDefaultThrowable() : void"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
         </file>
         <file name="UsageExpectAndReturnTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageExpectAndReturnTest.java">
            <metrics classes="1" methods="21" conditionals="0" ncloc="162" coveredstatements="91" coveredmethods="21" complexity="21" coveredconditionals="0" statements="91" loc="205" coveredelements="112" elements="112"/>
            <class name="UsageExpectAndReturnTest">
               <metrics conditionals="0" methods="21" coveredstatements="91" complexity="21" testpasses="100" testruns="100" coveredmethods="21" coveredconditionals="0" statements="91" testfailures="0" coveredelements="112" elements="112" testduration="0.0150000015"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="booleanType() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longType() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="floatType() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="doubleType() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="object() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="76" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="booleanAndRange() : void"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longAndRange() : void"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="floatAndRange() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="doubleAndRange() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="objectAndRange() : void"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="booleanAndCount() : void"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="125" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longAndCount() : void"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="floatAndCount() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="doubleAndCount() : void"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="152" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="objectAndCount() : void"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="161" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="booleanAndMinMax() : void"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="170" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="longAndMinMax() : void"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="179" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="floatAndMinMax() : void"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="188" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="doubleAndMinMax() : void"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="197" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="objectAndMinMax() : void"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
         </file>
         <file name="UsageExpectAndThrowTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageExpectAndThrowTest.java">
            <metrics classes="1" methods="21" conditionals="0" ncloc="348" coveredstatements="171" coveredmethods="21" complexity="56" coveredconditionals="0" statements="206" loc="393" coveredelements="192" elements="227"/>
            <class name="UsageExpectAndThrowTest">
               <metrics conditionals="0" methods="21" coveredstatements="171" complexity="56" testpasses="100" testruns="100" coveredmethods="21" coveredconditionals="0" statements="206" testfailures="0" coveredelements="192" elements="227" testduration="0.029000003"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="booleanType() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="0" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="longType() : void"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="0" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="floatType() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="0" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="doubleType() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="0" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="object() : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="0" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="103" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="booleanAndRange() : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="0" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="longAndRange() : void"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="0" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="129" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="floatAndRange() : void"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="0" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="142" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="doubleAndRange() : void"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="0" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="objectAndRange() : void"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="0" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="168" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="booleanAndCount() : void"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="0" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="0" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="187" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="longAndCount() : void"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="0" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="0" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="206" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="floatAndCount() : void"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="211" count="1" type="stmt"/>
            <line num="212" count="0" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="0" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="225" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="doubleAndCount() : void"/>
            <line num="227" count="1" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="229" count="1" type="stmt"/>
            <line num="230" count="1" type="stmt"/>
            <line num="231" count="0" type="stmt"/>
            <line num="233" count="1" type="stmt"/>
            <line num="235" count="1" type="stmt"/>
            <line num="236" count="1" type="stmt"/>
            <line num="237" count="0" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="244" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="objectAndCount() : void"/>
            <line num="246" count="1" type="stmt"/>
            <line num="247" count="1" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="249" count="1" type="stmt"/>
            <line num="250" count="0" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="254" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="256" count="0" type="stmt"/>
            <line num="258" count="1" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="263" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="booleanAndMinMax() : void"/>
            <line num="265" count="1" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="268" count="1" type="stmt"/>
            <line num="269" count="0" type="stmt"/>
            <line num="271" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="0" type="stmt"/>
            <line num="277" count="1" type="stmt"/>
            <line num="279" count="1" type="stmt"/>
            <line num="280" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="282" count="0" type="stmt"/>
            <line num="284" count="1" type="stmt"/>
            <line num="286" count="1" type="stmt"/>
            <line num="289" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0010" signature="longAndMinMax() : void"/>
            <line num="291" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="295" count="0" type="stmt"/>
            <line num="297" count="1" type="stmt"/>
            <line num="299" count="1" type="stmt"/>
            <line num="300" count="1" type="stmt"/>
            <line num="301" count="0" type="stmt"/>
            <line num="303" count="1" type="stmt"/>
            <line num="305" count="1" type="stmt"/>
            <line num="306" count="1" type="stmt"/>
            <line num="307" count="1" type="stmt"/>
            <line num="308" count="0" type="stmt"/>
            <line num="310" count="1" type="stmt"/>
            <line num="312" count="1" type="stmt"/>
            <line num="315" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="floatAndMinMax() : void"/>
            <line num="317" count="1" type="stmt"/>
            <line num="318" count="1" type="stmt"/>
            <line num="319" count="1" type="stmt"/>
            <line num="320" count="1" type="stmt"/>
            <line num="321" count="0" type="stmt"/>
            <line num="323" count="1" type="stmt"/>
            <line num="325" count="1" type="stmt"/>
            <line num="326" count="1" type="stmt"/>
            <line num="327" count="0" type="stmt"/>
            <line num="329" count="1" type="stmt"/>
            <line num="331" count="1" type="stmt"/>
            <line num="332" count="1" type="stmt"/>
            <line num="333" count="1" type="stmt"/>
            <line num="334" count="0" type="stmt"/>
            <line num="336" count="1" type="stmt"/>
            <line num="338" count="1" type="stmt"/>
            <line num="341" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="doubleAndMinMax() : void"/>
            <line num="343" count="1" type="stmt"/>
            <line num="344" count="1" type="stmt"/>
            <line num="345" count="1" type="stmt"/>
            <line num="346" count="1" type="stmt"/>
            <line num="347" count="0" type="stmt"/>
            <line num="349" count="1" type="stmt"/>
            <line num="351" count="1" type="stmt"/>
            <line num="352" count="1" type="stmt"/>
            <line num="353" count="0" type="stmt"/>
            <line num="355" count="1" type="stmt"/>
            <line num="357" count="1" type="stmt"/>
            <line num="358" count="1" type="stmt"/>
            <line num="359" count="1" type="stmt"/>
            <line num="360" count="0" type="stmt"/>
            <line num="362" count="1" type="stmt"/>
            <line num="364" count="1" type="stmt"/>
            <line num="367" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="objectAndMinMax() : void"/>
            <line num="369" count="1" type="stmt"/>
            <line num="370" count="1" type="stmt"/>
            <line num="371" count="1" type="stmt"/>
            <line num="372" count="1" type="stmt"/>
            <line num="373" count="0" type="stmt"/>
            <line num="375" count="1" type="stmt"/>
            <line num="377" count="1" type="stmt"/>
            <line num="378" count="1" type="stmt"/>
            <line num="379" count="0" type="stmt"/>
            <line num="381" count="1" type="stmt"/>
            <line num="383" count="1" type="stmt"/>
            <line num="384" count="1" type="stmt"/>
            <line num="385" count="1" type="stmt"/>
            <line num="386" count="0" type="stmt"/>
            <line num="388" count="1" type="stmt"/>
            <line num="390" count="1" type="stmt"/>
         </file>
         <file name="UsageFloatingPointReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageFloatingPointReturnValueTest.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="32" coveredstatements="15" coveredmethods="3" complexity="3" coveredconditionals="0" statements="15" loc="63" coveredelements="18" elements="18"/>
            <class name="UsageFloatingPointReturnValueTest">
               <metrics conditionals="0" methods="3" coveredstatements="15" complexity="3" testpasses="10" testruns="10" coveredmethods="3" coveredconditionals="0" statements="15" testfailures="0" coveredelements="18" elements="18" testduration="0.0020"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnFloat() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnDouble() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
         </file>
         <file name="UsageLongCompatibleReturnValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageLongCompatibleReturnValueTest.java">
            <metrics classes="1" methods="6" conditionals="0" ncloc="62" coveredstatements="36" coveredmethods="6" complexity="6" coveredconditionals="0" statements="36" loc="105" coveredelements="42" elements="42"/>
            <class name="UsageLongCompatibleReturnValueTest">
               <metrics conditionals="0" methods="6" coveredstatements="36" complexity="6" testpasses="25" testruns="25" coveredmethods="6" coveredconditionals="0" statements="36" testfailures="0" coveredelements="42" elements="42" testduration="0.0040"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnByte() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnShort() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnChar() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="returnInt() : void"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="returnLong() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
         </file>
         <file name="UsageOverloadedDefaultValueTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageOverloadedDefaultValueTest.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="64" coveredstatements="45" coveredmethods="3" complexity="4" coveredconditionals="0" statements="46" loc="113" coveredelements="48" elements="49"/>
            <class name="UsageOverloadedDefaultValueTest">
               <metrics conditionals="0" methods="3" coveredstatements="45" complexity="4" testpasses="10" testruns="10" coveredmethods="3" coveredconditionals="0" statements="46" testfailures="0" coveredelements="48" elements="49" testduration="0.0080"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="overloading() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="defaultThrowable() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="0" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
         </file>
         <file name="UsageOverloadedMethodTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageOverloadedMethodTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="95" coveredstatements="65" coveredmethods="4" complexity="7" coveredconditionals="0" statements="68" loc="154" coveredelements="69" elements="72"/>
            <class name="UsageOverloadedMethodTest">
               <metrics conditionals="0" methods="4" coveredstatements="65" complexity="7" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="68" testfailures="0" coveredelements="69" elements="72" testduration="0.012000001"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="overloading() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="nullReturnValue() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="109" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="moreThanOneResultAndOpenCallCount() : void"/>
            <line num="111" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="127" count="0" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="0" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="0" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
         </file>
         <file name="UsageRangeTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageRangeTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="58" coveredstatements="30" coveredmethods="5" complexity="6" coveredconditionals="0" statements="31" loc="97" coveredelements="35" elements="36"/>
            <class name="UsageRangeTest">
               <metrics conditionals="0" methods="5" coveredstatements="30" complexity="6" testpasses="20" testruns="20" coveredmethods="5" coveredconditionals="0" statements="31" testfailures="0" coveredelements="35" elements="36" testduration="0.0050000004"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="zeroOrMoreNoCalls() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="zeroOrMoreOneCall() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="zeroOrMoreThreeCalls() : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="combination() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="0" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
         </file>
         <file name="UsageStrictMockTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageStrictMockTest.java">
            <metrics classes="1" methods="10" conditionals="16" ncloc="178" coveredstatements="95" coveredmethods="10" complexity="26" coveredconditionals="8" statements="103" loc="232" coveredelements="113" elements="129"/>
            <class name="UsageStrictMockTest">
               <metrics conditionals="16" methods="10" coveredstatements="95" complexity="26" testpasses="45" testruns="45" coveredmethods="10" coveredconditionals="8" statements="103" testfailures="0" coveredelements="113" elements="129" testduration="0.018000001"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testVerify() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="orderedCallsSucces() : void"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="unorderedCallsFailure() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="65" falsecount="1" type="cond" truecount="0"/>
            <line num="66" count="0" type="stmt"/>
            <line num="70" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="tooManyCallsFailure() : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="81" falsecount="1" type="cond" truecount="0"/>
            <line num="82" count="0" type="stmt"/>
            <line num="86" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="tooFewCallsFailure() : void"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="97" falsecount="1" type="cond" truecount="0"/>
            <line num="98" count="0" type="stmt"/>
            <line num="102" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0010" signature="differentMethods() : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="127" falsecount="1" type="cond" truecount="0"/>
            <line num="128" count="0" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="142" falsecount="1" type="cond" truecount="0"/>
            <line num="143" count="0" type="stmt"/>
            <line num="147" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="range() : void"/>
            <line num="150" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="178" falsecount="1" type="cond" truecount="0"/>
            <line num="179" count="0" type="stmt"/>
            <line num="183" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="defaultBehavior() : void"/>
            <line num="185" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="207" count="1" type="stmt"/>
            <line num="207" falsecount="1" type="cond" truecount="0"/>
            <line num="208" count="0" type="stmt"/>
            <line num="212" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="unexpectedCallWithArray() : void"/>
            <line num="214" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="223" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="227" falsecount="1" type="cond" truecount="0"/>
            <line num="228" count="0" type="stmt"/>
         </file>
         <file name="UsageTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageTest.java">
            <metrics classes="1" methods="10" conditionals="6" ncloc="152" coveredstatements="68" coveredmethods="10" complexity="24" coveredconditionals="3" statements="77" loc="207" coveredelements="81" elements="93"/>
            <class name="UsageTest">
               <metrics conditionals="6" methods="10" coveredstatements="68" complexity="24" testpasses="45" testruns="45" coveredmethods="10" coveredconditionals="3" statements="77" testfailures="0" coveredelements="81" elements="93" testduration="0.0150000015"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="exactCallCountByLastCall() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="51" falsecount="1" type="cond" truecount="0"/>
            <line num="52" count="0" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="openCallCountByLastCall() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0" signature="exactCallCountByLastThrowable() : void"/>
            <line num="68" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" count="0" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="90" falsecount="1" type="cond" truecount="0"/>
            <line num="91" count="0" type="stmt"/>
            <line num="94" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="openCallCountByLastThrowable() : void"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="114" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="moreThanOneArgument() : void"/>
            <line num="116" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="0" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="131" falsecount="1" type="cond" truecount="0"/>
            <line num="132" count="0" type="stmt"/>
            <line num="136" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="unexpectedCallWithArray() : void"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="143" count="0" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="150" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="wrongArguments() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="0" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="166" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="summarizeSameObjectArguments() : void"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="0" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="183" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="argumentsOrdered() : void"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="0" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
         </file>
         <file name="UsageThrowableTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageThrowableTest.java">
            <metrics classes="1" methods="11" conditionals="0" ncloc="99" coveredstatements="42" coveredmethods="11" complexity="15" coveredconditionals="0" statements="46" loc="145" coveredelements="53" elements="57"/>
            <class name="UsageThrowableTest">
               <metrics conditionals="0" methods="11" coveredstatements="42" complexity="15" testpasses="40" testruns="40" coveredmethods="11" coveredconditionals="0" statements="46" testfailures="0" coveredelements="53" elements="57" testduration="0.0050000004"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="noUpperLimit() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwRuntimeException() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwSubclassOfRuntimeException() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwError() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="69" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwSubclassOfError() : void"/>
            <line num="71" count="1" type="stmt"/>
            <line num="76" count="1" complexity="2" type="method" signature="testThrowUncheckedException(Throwable) : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="0" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwCheckedException() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="throwSubclassOfCheckedException() : void"/>
            <line num="99" count="1" type="stmt"/>
            <line num="104" count="1" complexity="3" type="method" signature="testThrowCheckedException(IOException) : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="110" count="0" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="0" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="126" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="throwAfterReturnValue() : void"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="0" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
         </file>
         <file name="UsageUnorderedTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageUnorderedTest.java">
            <metrics classes="2" methods="1" conditionals="0" ncloc="33" coveredstatements="14" coveredmethods="1" complexity="2" coveredconditionals="0" statements="15" loc="60" coveredelements="15" elements="16"/>
            <class name="UsageUnorderedTest">
               <metrics conditionals="0" methods="1" coveredstatements="14" complexity="2" testpasses="5" testruns="5" coveredmethods="1" coveredconditionals="0" statements="15" testfailures="0" coveredelements="15" elements="16" testduration="0.0080"/>
            </class>
            <class name="UsageUnorderedTest.Interface">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="32" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="message() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="0" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
         </file>
         <file name="UsageVarargTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageVarargTest.java">
            <metrics classes="1" methods="14" conditionals="0" ncloc="144" coveredstatements="87" coveredmethods="14" complexity="15" coveredconditionals="0" statements="88" loc="195" coveredelements="101" elements="102"/>
            <class name="UsageVarargTest">
               <metrics conditionals="0" methods="14" coveredstatements="87" complexity="15" testpasses="60" testruns="60" coveredmethods="14" coveredconditionals="0" statements="88" testfailures="0" coveredelements="101" elements="102" testduration="0.036000002"/>
            </class>
            <line num="35" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargObjectAccepted() : void"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargBooleanAccepted() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargByteAccepted() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargCharAccepted() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargDoubleAccepted() : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="101" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargFloatAccepted() : void"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="112" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargIntAccepted() : void"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="123" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargLongAccepted() : void"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="varargShortAccepted() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="145" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="varargAcceptedIfArrayIsGiven() : void"/>
            <line num="147" count="1" type="stmt"/>
            <line num="150" count="1" complexity="1" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="166" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="allKinds() : void"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="differentLength() : void"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="0" type="stmt"/>
         </file>
         <file name="UsageVerifyTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\UsageVerifyTest.java">
            <metrics classes="1" methods="4" conditionals="2" ncloc="102" coveredstatements="43" coveredmethods="4" complexity="14" coveredconditionals="1" statements="53" loc="151" coveredelements="48" elements="59"/>
            <class name="UsageVerifyTest">
               <metrics conditionals="2" methods="4" coveredstatements="43" complexity="14" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="1" statements="53" testfailures="0" coveredelements="48" elements="59" testduration="0.009000001"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0010" signature="twoReturns() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="0" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="59" falsecount="1" type="cond" truecount="0"/>
            <line num="60" count="0" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="0" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="atLeastTwoReturns() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="0" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" testsuccess="true" count="1" complexity="7" type="method" testduration="0.0010" signature="twoThrows() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="0" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="0" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="0" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="0" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="0" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="0" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
         </file>
         <file name="Util.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests\Util.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="16" coveredstatements="5" coveredmethods="2" complexity="3" coveredconditionals="0" statements="5" loc="39" coveredelements="7" elements="8"/>
            <class name="Util">
               <metrics methods="3" conditionals="0" coveredstatements="5" coveredmethods="2" complexity="3" coveredconditionals="0" statements="5" coveredelements="7" elements="8"/>
            </class>
            <line num="26" count="0" complexity="1" type="method" signature="Util()"/>
            <line num="29" count="1" complexity="1" type="method" signature="getStackTrace(Throwable) : String"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="35" count="1" complexity="1" type="method" signature="startWithClass(Throwable,Class&lt;?&gt;) : boolean"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.tests2">
         <metrics conditionals="62" methods="372" classes="46" files="29" coveredstatements="1949" complexity="504" loc="5345" ncloc="3829" coveredmethods="349" coveredconditionals="39" statements="2050" coveredelements="2337" elements="2484"/>
         <file name="AnswerTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\AnswerTest.java">
            <metrics classes="4" methods="13" conditionals="0" ncloc="123" coveredstatements="57" coveredmethods="13" complexity="16" coveredconditionals="0" statements="60" loc="172" coveredelements="70" elements="73"/>
            <class name="AnswerTest">
               <metrics conditionals="0" methods="13" coveredstatements="57" complexity="16" testpasses="30" testruns="30" coveredmethods="13" coveredconditionals="0" statements="60" testfailures="0" coveredelements="70" elements="73" testduration="0.036000002"/>
            </class>
            <class name="AnswerTest.A">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="AnswerTest.B">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <class name="AnswerTest.C">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0030" signature="answer() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="0" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="stubAnswer() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="102" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nullAnswerNotAllowed() : void"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="0" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="112" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nullStubAnswerNotAllowed() : void"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="0" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="132" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testGenericityFlexibility() : void"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="140" count="1" complexity="1" type="method" signature="answer() : B"/>
            <line num="141" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="answerOnVoidMethod() : void"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
         </file>
         <file name="CallbackAndArgumentsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\CallbackAndArgumentsTest.java">
            <metrics classes="1" methods="7" conditionals="0" ncloc="60" coveredstatements="29" coveredmethods="7" complexity="7" coveredconditionals="0" statements="29" loc="100" coveredelements="36" elements="36"/>
            <class name="CallbackAndArgumentsTest">
               <metrics conditionals="0" methods="7" coveredstatements="29" complexity="7" testpasses="15" testruns="15" coveredmethods="7" coveredconditionals="0" statements="29" testfailures="0" coveredelements="36" elements="36" testduration="0.016"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="callbackGetsArguments() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="currentArgumentsFailsOutsideCallbacks() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="callbackGetsArgumentsEvenIfAMockCallsAnother() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="76" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" complexity="1" type="method" signature="answer() : Object"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
         </file>
         <file name="CallbackTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\CallbackTest.java">
            <metrics classes="2" methods="6" conditionals="0" ncloc="67" coveredstatements="31" coveredmethods="5" complexity="10" coveredconditionals="0" statements="31" loc="101" coveredelements="36" elements="37"/>
            <class name="CallbackTest">
               <metrics conditionals="0" methods="2" coveredstatements="27" complexity="6" testpasses="5" testruns="5" coveredmethods="2" coveredconditionals="0" statements="27" testfailures="0" coveredelements="29" elements="29" testduration="0.0070"/>
            </class>
            <class name="CallbackTest.Callback">
               <metrics methods="4" conditionals="0" coveredstatements="4" coveredmethods="3" complexity="4" coveredconditionals="0" statements="4" coveredelements="7" elements="8"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="Callback(T)"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" count="0" complexity="1" type="method" signature="run() : void"/>
            <line num="45" count="1" complexity="1" type="method" signature="getCallCount() : int"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="answer() : T"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="55" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0010" signature="callback() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
         </file>
         <file name="CaptureTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\CaptureTest.java">
            <metrics classes="2" methods="22" conditionals="4" ncloc="292" coveredstatements="200" coveredmethods="21" complexity="27" coveredconditionals="4" statements="204" loc="391" coveredelements="225" elements="230"/>
            <class name="CaptureTest">
               <metrics conditionals="4" methods="21" coveredstatements="200" complexity="26" testpasses="85" testruns="85" coveredmethods="21" coveredconditionals="4" statements="203" testfailures="0" coveredelements="225" elements="228" testduration="0.037999995"/>
            </class>
            <class name="CaptureTest.A">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <line num="36" count="0" complexity="1" type="method" signature="foo(IMethods) : String"/>
            <line num="37" count="0" type="stmt"/>
            <line num="41" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="45" count="1" complexity="1" type="method" signature="tearDown() : void"/>
            <line num="49" count="1" complexity="1" type="method" signature="testCaptureType(CaptureType) : Capture&lt;Integer&gt;"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCaptureFirst() : void"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCaptureLast() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="85" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCaptureAll() : void"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="91" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCaptureNone() : void"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="100" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCaptureRightOne() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="119" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testPrimitiveVsObject() : void"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="139" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAnd() : void"/>
            <line num="141" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="154" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testPrimitiveDeprecated() : void"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="196" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testPrimitive() : void"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="206" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="211" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="213" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="223" count="1" type="stmt"/>
            <line num="224" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="229" count="1" type="stmt"/>
            <line num="230" count="1" type="stmt"/>
            <line num="231" count="1" type="stmt"/>
            <line num="232" count="1" type="stmt"/>
            <line num="234" count="1" type="stmt"/>
            <line num="237" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="testCapture() : void"/>
            <line num="239" count="1" type="stmt"/>
            <line num="240" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="242" count="1" type="stmt"/>
            <line num="243" count="0" type="stmt"/>
            <line num="245" count="1" type="stmt"/>
            <line num="247" count="1" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="249" count="1" type="stmt"/>
            <line num="250" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="254" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="256" count="0" type="stmt"/>
            <line num="258" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="1" type="stmt"/>
            <line num="263" count="1" type="stmt"/>
            <line num="264" count="1" type="stmt"/>
            <line num="267" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCaptureMultiple() : void"/>
            <line num="269" count="1" type="stmt"/>
            <line num="270" count="1" type="stmt"/>
            <line num="271" count="1" type="stmt"/>
            <line num="272" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="0" type="stmt"/>
            <line num="276" count="1" type="stmt"/>
            <line num="278" count="1" type="stmt"/>
            <line num="281" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCapture_2617107() : void"/>
            <line num="284" count="1" type="stmt"/>
            <line num="286" count="1" type="stmt"/>
            <line num="287" count="1" type="stmt"/>
            <line num="288" count="1" type="stmt"/>
            <line num="289" count="1" type="stmt"/>
            <line num="291" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="296" count="1" type="stmt"/>
            <line num="298" count="1" type="stmt"/>
            <line num="300" count="1" type="stmt"/>
            <line num="301" count="1" type="stmt"/>
            <line num="304" count="1" type="stmt"/>
            <line num="305" count="1" type="stmt"/>
            <line num="306" count="1" type="stmt"/>
            <line num="307" count="1" type="stmt"/>
            <line num="309" count="1" type="stmt"/>
            <line num="312" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCaptureNonStrictControl_2133741() : void"/>
            <line num="314" count="1" type="stmt"/>
            <line num="317" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCaptureStrictControl_2133741() : void"/>
            <line num="319" count="1" type="stmt"/>
            <line num="322" count="1" complexity="1" type="method" signature="testCaptureHelper(IMethods) : void"/>
            <line num="323" count="1" type="stmt"/>
            <line num="324" count="1" type="stmt"/>
            <line num="326" count="1" type="stmt"/>
            <line num="327" count="1" type="stmt"/>
            <line num="329" count="1" type="stmt"/>
            <line num="330" count="1" type="stmt"/>
            <line num="331" count="1" type="stmt"/>
            <line num="332" count="1" type="stmt"/>
            <line num="334" count="1" type="stmt"/>
            <line num="335" count="1" type="stmt"/>
            <line num="336" count="1" type="stmt"/>
            <line num="339" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCapture1_2446744() : void"/>
            <line num="341" count="1" type="stmt"/>
            <line num="342" count="1" type="stmt"/>
            <line num="343" count="1" type="stmt"/>
            <line num="344" count="1" type="stmt"/>
            <line num="345" count="1" type="stmt"/>
            <line num="346" count="1" type="stmt"/>
            <line num="347" count="1" type="stmt"/>
            <line num="349" count="1" type="stmt"/>
            <line num="351" count="1" type="stmt"/>
            <line num="351" falsecount="1" type="cond" truecount="1"/>
            <line num="352" count="1" type="stmt"/>
            <line num="353" count="1" type="stmt"/>
            <line num="356" count="1" type="stmt"/>
            <line num="357" count="1" type="stmt"/>
            <line num="358" count="1" type="stmt"/>
            <line num="361" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCapture2_2446744() : void"/>
            <line num="363" count="1" type="stmt"/>
            <line num="364" count="1" type="stmt"/>
            <line num="365" count="1" type="stmt"/>
            <line num="366" count="1" type="stmt"/>
            <line num="367" count="1" type="stmt"/>
            <line num="369" count="1" type="stmt"/>
            <line num="371" count="1" type="stmt"/>
            <line num="371" falsecount="1" type="cond" truecount="1"/>
            <line num="372" count="1" type="stmt"/>
            <line num="373" count="1" type="stmt"/>
            <line num="376" count="1" type="stmt"/>
            <line num="379" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCaptureFromStub() : void"/>
            <line num="381" count="1" type="stmt"/>
            <line num="382" count="1" type="stmt"/>
            <line num="383" count="1" type="stmt"/>
            <line num="385" count="1" type="stmt"/>
            <line num="387" count="1" type="stmt"/>
            <line num="389" count="1" type="stmt"/>
         </file>
         <file name="ClassExtensionHelperTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\ClassExtensionHelperTest.java">
            <metrics classes="1" methods="8" conditionals="0" ncloc="73" coveredstatements="21" coveredmethods="7" complexity="11" coveredconditionals="0" statements="25" loc="103" coveredelements="28" elements="33"/>
            <class name="ClassExtensionHelperTest">
               <metrics conditionals="0" methods="8" coveredstatements="21" complexity="11" testpasses="35" testruns="35" coveredmethods="7" coveredconditionals="0" statements="25" testfailures="0" coveredelements="28" elements="33" testduration="0.029000003"/>
            </class>
            <line num="40" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetControl_EasyMock() : void"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetControl_EasyMockClassExtension() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0020" signature="testGetControl_EnhancedButNotAMock() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="0" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="63" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0030" signature="testGetControl_ProxyButNotMock() : void"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="0" complexity="1" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="69" count="0" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="0" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testGetControl_NotAMock() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="0" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="90" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMockType_Class() : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMockType_Interface() : void"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
         </file>
         <file name="CompareToTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\CompareToTest.java">
            <metrics classes="1" methods="9" conditionals="0" ncloc="54" coveredstatements="15" coveredmethods="7" complexity="9" coveredconditionals="0" statements="18" loc="93" coveredelements="22" elements="27"/>
            <class name="CompareToTest">
               <metrics conditionals="0" methods="9" coveredstatements="15" complexity="9" testpasses="30" testruns="30" coveredmethods="7" coveredconditionals="0" statements="18" testfailures="0" coveredelements="22" elements="27" testduration="0.039999988"/>
            </class>
            <line num="30" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNotComparable() : void"/>
            <line num="32" count="1" type="stmt"/>
            <line num="36" count="0" complexity="1" type="method" signature="getName() : String"/>
            <line num="38" count="0" type="stmt"/>
            <line num="41" count="0" complexity="1" type="method" signature="matchResult(int) : boolean"/>
            <line num="43" count="0" type="stmt"/>
            <line num="44" count="0" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testLessThan() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testGreateThan() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testLessOrEqual() : void"/>
            <line num="64" count="1" type="stmt"/>
            <line num="67" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGreateOrEqual() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCompareEqual() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" count="1" complexity="1" type="method" signature="test(CompareTo&lt;String&gt;,boolean,boolean,boolean,String) : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
         </file>
         <file name="ConstraintsToStringTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\ConstraintsToStringTest.java">
            <metrics classes="1" methods="23" conditionals="0" ncloc="134" coveredstatements="52" coveredmethods="23" complexity="23" coveredconditionals="0" statements="52" loc="179" coveredelements="75" elements="75"/>
            <class name="ConstraintsToStringTest">
               <metrics conditionals="0" methods="23" coveredstatements="52" complexity="23" testpasses="100" testruns="100" coveredmethods="23" coveredconditionals="0" statements="52" testfailures="0" coveredelements="75" elements="75" testduration="0.06299997"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="36" count="1" type="stmt"/>
            <line num="39" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="sameToStringWithString() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="nullToString() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="notNullToString() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="anyToString() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="sameToStringWithChar() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="sameToStringWithObject() : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsToStringWithString() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="89" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsToStringWithChar() : void"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsToStringWithObject() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" complexity="1" type="method" signature="toString() : String"/>
            <line num="100" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="107" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsToStringWithArray() : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="orToString() : void"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="123" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="notToString() : void"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="129" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="andToString() : void"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="138" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="startsWithToString() : void"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="144" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="endsWithToString() : void"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="150" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="containsToString() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="156" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="findToString() : void"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="162" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="matchesToString() : void"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="168" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="equalsWithDeltaToString() : void"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="174" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="arrayEqualsToString() : void"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
         </file>
         <file name="ConstructorArgsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\ConstructorArgsTest.java">
            <metrics classes="2" methods="11" conditionals="0" ncloc="55" coveredstatements="14" coveredmethods="11" complexity="11" coveredconditionals="0" statements="14" loc="91" coveredelements="25" elements="25"/>
            <class name="ConstructorArgsTest">
               <metrics conditionals="0" methods="10" coveredstatements="14" complexity="10" testpasses="45" testruns="45" coveredmethods="10" coveredconditionals="0" statements="14" testfailures="0" coveredelements="24" elements="24" testduration="0.0080"/>
            </class>
            <class name="ConstructorArgsTest.A">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="A(String,int)"/>
            <line num="38" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="1" complexity="1" type="method" signature="checkArgs(ConstructorArgs) : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testConstructorArgs_WrongArgument() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_NullPrimitive() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_PrimitiveForObject() : void"/>
            <line num="64" count="1" type="stmt"/>
            <line num="67" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_NullObject() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_WrongPrimitive() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_WrongNumberOfArgs() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_TypeExistsButPrivate() : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_TypeExistsButNotStatic() : void"/>
            <line num="89" count="1" type="stmt"/>
         </file>
         <file name="DelegateToTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\DelegateToTest.java">
            <metrics classes="2" methods="9" conditionals="0" ncloc="98" coveredstatements="46" coveredmethods="9" complexity="13" coveredconditionals="0" statements="50" loc="138" coveredelements="55" elements="59"/>
            <class name="DelegateToTest">
               <metrics conditionals="0" methods="9" coveredstatements="46" complexity="13" testpasses="30" testruns="30" coveredmethods="9" coveredconditionals="0" statements="50" testfailures="0" coveredelements="55" elements="59" testduration="0.017"/>
            </class>
            <class name="DelegateToTest.IMyInterface">
               <metrics methods="0" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="0" coveredconditionals="0" statements="0" coveredelements="0" elements="0"/>
            </class>
            <line num="32" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testDelegate() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" count="1" complexity="1" type="method" signature="getInt(int) : int"/>
            <line num="39" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testStubDelegate() : void"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" count="1" complexity="1" type="method" signature="getInt(int) : int"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testReturnException() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" complexity="1" type="method" signature="getInt(int) : int"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="0" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="102" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWrongClass() : void"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="0" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="117" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nullDelegationNotAllowed() : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="0" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="128" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nullStubDelegationNotAllowed() : void"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="0" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
         </file>
         <file name="DependencyTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\DependencyTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="50" coveredstatements="18" coveredmethods="4" complexity="6" coveredconditionals="0" statements="20" loc="74" coveredelements="22" elements="24"/>
            <class name="DependencyTest">
               <metrics conditionals="0" methods="4" coveredstatements="18" complexity="6" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="20" testfailures="0" coveredelements="22" elements="24" testduration="1.4999999"/>
            </class>
            <line num="33" testsuccess="true" count="1" complexity="1" type="method" testduration="0.101" signature="testInterfaceMocking() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" testsuccess="true" count="1" complexity="2" type="method" testduration="0.056" signature="testClassMocking() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="0" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="54" testsuccess="true" count="1" complexity="1" type="method" testduration="0.087" signature="testInterfaceMockingSupport() : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" testsuccess="true" count="1" complexity="2" type="method" testduration="0.059" signature="testClassMockingSupport() : void"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="0" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
         </file>
         <file name="EasyMockClassExtensionTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\EasyMockClassExtensionTest.java">
            <metrics classes="2" methods="30" conditionals="6" ncloc="288" coveredstatements="140" coveredmethods="30" complexity="40" coveredconditionals="6" statements="147" loc="384" coveredelements="176" elements="183"/>
            <class name="EasyMockClassExtensionTest">
               <metrics conditionals="2" methods="25" coveredstatements="129" complexity="33" testpasses="85" testruns="85" coveredmethods="25" coveredconditionals="2" statements="136" testfailures="0" coveredelements="156" elements="163" testduration="0.10999999"/>
            </class>
            <class name="EasyMockClassExtensionTest.ParamEntry">
               <metrics methods="5" conditionals="4" coveredstatements="11" coveredmethods="5" complexity="7" coveredconditionals="4" statements="11" coveredelements="20" elements="20"/>
            </class>
            <line num="44" count="1" complexity="1" type="method" signature="ParamEntry(Class&lt;?&gt;[],Object[])"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="isNamed() : boolean"/>
            <line num="50" count="1" type="stmt"/>
            <line num="53" count="1" complexity="1" type="method" signature="isConstructorCalled() : boolean"/>
            <line num="54" count="1" type="stmt"/>
            <line num="57" count="1" complexity="1" type="method" signature="getMock(String) : A"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" count="1" complexity="3" type="method" signature="test(A) : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="63" falsecount="1" type="cond" truecount="1"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="66" falsecount="1" type="cond" truecount="1"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="90" count="1" complexity="5" type="method" signature="&lt;clinit&gt;, line 90()"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="96" count="0" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="0" type="stmt"/>
            <line num="104" count="0" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="115" falsecount="1" type="cond" truecount="1"/>
            <line num="116" count="1" type="stmt"/>
            <line num="120" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testDisablingClassMocking() : void"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="125" count="0" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testClassMocking() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="140" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testInterfaceMocking() : void"/>
            <line num="142" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="146" count="1" complexity="1" type="method" signature="testList(List&lt;?&gt;) : void"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="153" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testResetReplay() : void"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="164" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testResetTo() : void"/>
            <line num="166" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="173" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMakeThreadSafe() : void"/>
            <line num="175" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="180" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testVarargs() : void"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="199" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCheckOrder() : void"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="206" count="1" type="stmt"/>
            <line num="207" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="212" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0090" signature="testStrictMock_Partial() : void"/>
            <line num="215" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="223" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="227" count="0" type="stmt"/>
            <line num="232" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMock_Partial() : void"/>
            <line num="235" count="1" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="245" count="1" type="stmt"/>
            <line num="246" count="1" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="251" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNiceMock_Partial() : void"/>
            <line num="253" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="257" count="1" type="stmt"/>
            <line num="258" count="1" type="stmt"/>
            <line num="261" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCompare() : void"/>
            <line num="264" count="1" type="stmt"/>
            <line num="265" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="268" count="1" type="stmt"/>
            <line num="270" count="1" type="stmt"/>
            <line num="272" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="277" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNamedMock() : void"/>
            <line num="280" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="282" count="1" type="stmt"/>
            <line num="283" count="1" type="stmt"/>
            <line num="284" count="1" type="stmt"/>
            <line num="285" count="1" type="stmt"/>
            <line num="289" count="1" type="stmt"/>
            <line num="291" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="295" count="1" type="stmt"/>
            <line num="296" count="1" type="stmt"/>
            <line num="299" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0070" signature="testStrictMock() : void"/>
            <line num="301" count="1" type="stmt"/>
            <line num="302" count="1" type="stmt"/>
            <line num="303" count="1" type="stmt"/>
            <line num="304" count="1" type="stmt"/>
            <line num="308" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testNormalMock() : void"/>
            <line num="310" count="1" type="stmt"/>
            <line num="311" count="1" type="stmt"/>
            <line num="312" count="1" type="stmt"/>
            <line num="313" count="1" type="stmt"/>
            <line num="317" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNiceMock() : void"/>
            <line num="319" count="1" type="stmt"/>
            <line num="320" count="1" type="stmt"/>
            <line num="321" count="1" type="stmt"/>
            <line num="322" count="1" type="stmt"/>
            <line num="326" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockBuilder() : void"/>
            <line num="328" count="1" type="stmt"/>
            <line num="329" count="1" type="stmt"/>
            <line num="330" count="1" type="stmt"/>
            <line num="335" count="1" complexity="2" type="method" signature="testStrict(A) : void"/>
            <line num="336" count="1" type="stmt"/>
            <line num="337" count="1" type="stmt"/>
            <line num="338" count="1" type="stmt"/>
            <line num="339" count="1" type="stmt"/>
            <line num="340" count="1" type="stmt"/>
            <line num="341" count="1" type="stmt"/>
            <line num="342" count="0" type="stmt"/>
            <line num="347" count="1" complexity="2" type="method" signature="testNormal(A) : void"/>
            <line num="348" count="1" type="stmt"/>
            <line num="349" count="1" type="stmt"/>
            <line num="350" count="1" type="stmt"/>
            <line num="351" count="1" type="stmt"/>
            <line num="353" count="1" type="stmt"/>
            <line num="354" count="1" type="stmt"/>
            <line num="356" count="1" type="stmt"/>
            <line num="357" count="1" type="stmt"/>
            <line num="358" count="0" type="stmt"/>
            <line num="363" count="1" complexity="1" type="method" signature="testNice(A) : void"/>
            <line num="364" count="1" type="stmt"/>
            <line num="365" count="1" type="stmt"/>
            <line num="366" count="1" type="stmt"/>
            <line num="367" count="1" type="stmt"/>
            <line num="372" count="1" complexity="1" type="method" signature="testNamed(A) : void"/>
            <line num="373" count="1" type="stmt"/>
            <line num="376" count="1" complexity="1" type="method" signature="testPartial_NoConstructorCalled(A) : void"/>
            <line num="378" count="1" type="stmt"/>
            <line num="381" count="1" complexity="1" type="method" signature="testPartial_ConstructorCalled(A) : void"/>
            <line num="382" count="1" type="stmt"/>
         </file>
         <file name="EasyMockPropertiesTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\EasyMockPropertiesTest.java">
            <metrics classes="1" methods="15" conditionals="4" ncloc="131" coveredstatements="59" coveredmethods="13" complexity="18" coveredconditionals="2" statements="64" loc="224" coveredelements="74" elements="83"/>
            <class name="EasyMockPropertiesTest">
               <metrics conditionals="4" methods="15" coveredstatements="59" complexity="18" testpasses="30" testruns="30" coveredmethods="13" coveredconditionals="2" statements="64" testfailures="0" coveredelements="74" elements="83" testduration="0.0050000004"/>
            </class>
            <line num="34" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetInstance() : void"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="74" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetProperty() : void"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="86" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testSetProperty() : void"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNoThreadContextClassLoader() : void"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testBadPropertiesFile() : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="124" count="1" complexity="2" type="method" signature="getResourceAsStream(String) : InputStream"/>
            <line num="126" count="1" type="stmt"/>
            <line num="126" falsecount="0" type="cond" truecount="1"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" complexity="1" type="method" signature="close() : void"/>
            <line num="130" count="1" type="stmt"/>
            <line num="133" count="1" complexity="1" type="method" signature="read(byte[],int,int) : int"/>
            <line num="135" count="1" type="stmt"/>
            <line num="138" count="0" complexity="1" type="method" signature="read(byte[]) : int"/>
            <line num="140" count="0" type="stmt"/>
            <line num="143" count="0" complexity="1" type="method" signature="read() : int"/>
            <line num="145" count="0" type="stmt"/>
            <line num="149" count="0" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="0" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="176" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNoEasymockPropertiesFile() : void"/>
            <line num="179" count="1" type="stmt"/>
            <line num="181" count="1" complexity="2" type="method" signature="getResourceAsStream(String) : InputStream"/>
            <line num="183" count="1" type="stmt"/>
            <line num="183" falsecount="0" type="cond" truecount="1"/>
            <line num="184" count="1" type="stmt"/>
            <line num="186" count="0" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="214" count="1" complexity="1" type="method" signature="resetInstance() : void"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="221" count="1" complexity="1" type="method" signature="assertExpectedValue(String,String) : void"/>
            <line num="222" count="1" type="stmt"/>
         </file>
         <file name="EasyMockSupportClassTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\EasyMockSupportClassTest.java">
            <metrics classes="2" methods="27" conditionals="0" ncloc="155" coveredstatements="57" coveredmethods="26" complexity="27" coveredconditionals="0" statements="58" loc="206" coveredelements="83" elements="85"/>
            <class name="EasyMockSupportClassTest">
               <metrics conditionals="0" methods="26" coveredstatements="57" complexity="26" testpasses="125" testruns="125" coveredmethods="26" coveredconditionals="0" statements="57" testfailures="0" coveredelements="83" elements="83" testduration="0.056999985"/>
            </class>
            <class name="EasyMockSupportClassTest.ToMock">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <line num="37" count="0" complexity="1" type="method" signature="foo() : int"/>
            <line num="38" count="0" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCreateStrictControl() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateControl() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceControl() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockClassOfTMethodArray() : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockStringClassOfTMethodArray() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateStrictMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="85" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="87" count="1" type="stmt"/>
            <line num="90" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockClassOfTMethodArray() : void"/>
            <line num="92" count="1" type="stmt"/>
            <line num="95" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockStringClassOfTMethodArray() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="107" count="1" type="stmt"/>
            <line num="110" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfTMethodArray() : void"/>
            <line num="112" count="1" type="stmt"/>
            <line num="115" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceMockStringClassOfTMethodArray() : void"/>
            <line num="117" count="1" type="stmt"/>
            <line num="120" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="122" count="1" type="stmt"/>
            <line num="125" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockClassOfT() : void"/>
            <line num="132" count="1" type="stmt"/>
            <line num="135" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockStringClassOfT() : void"/>
            <line num="137" count="1" type="stmt"/>
            <line num="140" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockClassOfT() : void"/>
            <line num="142" count="1" type="stmt"/>
            <line num="145" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockStringClassOfT() : void"/>
            <line num="147" count="1" type="stmt"/>
            <line num="150" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfT() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="155" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockStringClassOfT() : void"/>
            <line num="157" count="1" type="stmt"/>
            <line num="160" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAll() : void"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="173" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="testCreateMockBuilder() : void"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="182" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockBuilder_existingControl() : void"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="192" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAllMockBuilderFlavors() : void"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
         </file>
         <file name="EasyMockSupportTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\EasyMockSupportTest.java">
            <metrics classes="1" methods="16" conditionals="0" ncloc="212" coveredstatements="141" coveredmethods="16" complexity="21" coveredconditionals="0" statements="146" loc="273" coveredelements="157" elements="162"/>
            <class name="EasyMockSupportTest">
               <metrics conditionals="0" methods="16" coveredstatements="141" complexity="21" testpasses="65" testruns="65" coveredmethods="16" coveredconditionals="0" statements="146" testfailures="0" coveredelements="157" elements="162" testduration="0.033"/>
            </class>
            <line num="35" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateControl() : void"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMock() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNamedMock() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" complexity="1" type="method" signature="testDefaultMock() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="72" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceControl() : void"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMock() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNamedNiceMock() : void"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="96" count="1" complexity="1" type="method" signature="testNiceMock() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="107" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testCreateStrictControl() : void"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="0" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="127" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateStrictMock() : void"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNamedStrictMock() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" count="1" complexity="3" type="method" signature="testStrictMock() : void"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="0" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="0" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="166" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testVerify() : void"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultResetToNice() : void"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="204" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="strictResetToDefault() : void"/>
            <line num="206" count="1" type="stmt"/>
            <line num="207" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="211" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="223" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="230" count="1" type="stmt"/>
            <line num="233" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="niceToStrict() : void"/>
            <line num="235" count="1" type="stmt"/>
            <line num="236" count="1" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="244" count="1" type="stmt"/>
            <line num="246" count="1" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="249" count="1" type="stmt"/>
            <line num="250" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="256" count="1" type="stmt"/>
            <line num="257" count="0" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="0" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="268" count="1" type="stmt"/>
            <line num="269" count="1" type="stmt"/>
            <line num="271" count="1" type="stmt"/>
         </file>
         <file name="FilteringRule.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\FilteringRule.java">
            <metrics classes="3" methods="9" conditionals="20" ncloc="116" coveredstatements="47" coveredmethods="9" complexity="21" coveredconditionals="13" statements="51" loc="162" coveredelements="69" elements="80"/>
            <class name="FilteringRule">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <class name="FilteringClassLoader">
               <metrics methods="5" conditionals="20" coveredstatements="36" coveredmethods="5" complexity="16" coveredconditionals="13" statements="39" coveredelements="54" elements="64"/>
            </class>
            <class name="FilteringStatement">
               <metrics methods="2" conditionals="0" coveredstatements="9" coveredmethods="2" complexity="3" coveredconditionals="0" statements="10" coveredelements="11" elements="12"/>
            </class>
            <line num="36" count="1" complexity="1" type="method" signature="FilteringRule(String)"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" complexity="1" type="method" signature="apply(Statement,Description) : Statement"/>
            <line num="41" count="1" type="stmt"/>
            <line num="55" count="1" complexity="1" type="method" signature="FilteringClassLoader(Collection&lt;String&gt;)"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" count="1" complexity="6" type="method" signature="loadClass(String,boolean) : Class&lt;?&gt;"/>
            <line num="61" count="1" type="stmt"/>
            <line num="61" falsecount="1" type="cond" truecount="1"/>
            <line num="62" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="65" falsecount="1" type="cond" truecount="0"/>
            <line num="66" count="0" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="69" falsecount="1" type="cond" truecount="1"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="0" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="79" falsecount="1" type="cond" truecount="0"/>
            <line num="80" count="0" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" count="1" complexity="2" type="method" signature="shouldBeDeferred(String) : boolean"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="89" falsecount="1" type="cond" truecount="1"/>
            <line num="90" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="96" count="1" complexity="5" type="method" signature="loadClass0(String) : Class&lt;?&gt;"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="106" falsecount="0" type="cond" truecount="0"/>
            <line num="107" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="113" falsecount="1" type="cond" truecount="0"/>
            <line num="115" count="1" type="stmt"/>
            <line num="115" falsecount="0" type="cond" truecount="1"/>
            <line num="116" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="118" falsecount="0" type="cond" truecount="1"/>
            <line num="119" count="1" type="stmt"/>
            <line num="124" count="1" complexity="2" type="method" signature="isIgnored(String) : boolean"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="126" falsecount="1" type="cond" truecount="1"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="142" count="1" complexity="1" type="method" signature="FilteringStatement(Statement,Description,String[])"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="149" count="1" complexity="2" type="method" signature="evaluate() : void"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="158" count="0" type="stmt"/>
         </file>
         <file name="MockBuilderTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\MockBuilderTest.java">
            <metrics classes="2" methods="27" conditionals="0" ncloc="262" coveredstatements="109" coveredmethods="26" complexity="43" coveredconditionals="0" statements="125" loc="318" coveredelements="135" elements="152"/>
            <class name="MockBuilderTest">
               <metrics conditionals="0" methods="26" coveredstatements="109" complexity="42" testpasses="125" testruns="125" coveredmethods="26" coveredconditionals="0" statements="125" testfailures="0" coveredelements="135" elements="151" testduration="0.029000003"/>
            </class>
            <class name="MockBuilderTest.A">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <line num="37" count="0" complexity="1" type="method" signature="foo(String) : void"/>
            <line num="45" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAddMockedMethod() : void"/>
            <line num="53" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="81" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAddMethod_NotExisting() : void"/>
            <line num="83" count="1" type="stmt"/>
            <line num="86" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAddMethodWithParams_NotExisting() : void"/>
            <line num="88" count="1" type="stmt"/>
            <line num="91" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0010" signature="testAddMethod_Final() : void"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="0" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="0" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="0" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="115" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="testAddMethods_Final() : void"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="0" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="127" count="0" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="133" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructorParams() : void"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="0" type="stmt"/>
            <line num="143" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructor_WrongClass() : void"/>
            <line num="145" count="1" type="stmt"/>
            <line num="148" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testWithEmptyConstructor() : void"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="158" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithEmptyConstructor_NoEmptyConstructor() : void"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="0" type="stmt"/>
            <line num="167" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructor() : void"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="0" type="stmt"/>
            <line num="177" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructor_Twice() : void"/>
            <line num="179" count="1" type="stmt"/>
            <line num="182" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructorConstructorArgs() : void"/>
            <line num="184" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="0" type="stmt"/>
            <line num="194" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructorWithArgs() : void"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="0" type="stmt"/>
            <line num="204" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructorWithArgs_NotExisting() : void"/>
            <line num="206" count="1" type="stmt"/>
            <line num="209" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithArgsTwice() : void"/>
            <line num="211" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="213" count="0" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="219" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithArgs_WithoutConstructor() : void"/>
            <line num="221" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="223" count="0" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="230" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockIMocksControl() : void"/>
            <line num="232" count="1" type="stmt"/>
            <line num="233" count="1" type="stmt"/>
            <line num="234" count="1" type="stmt"/>
            <line num="237" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCreateMock() : void"/>
            <line num="239" count="1" type="stmt"/>
            <line num="240" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="242" count="1" type="stmt"/>
            <line num="243" count="0" type="stmt"/>
            <line num="248" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMock() : void"/>
            <line num="250" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="256" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testCreateStrictMock() : void"/>
            <line num="258" count="1" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="1" type="stmt"/>
            <line num="263" count="1" type="stmt"/>
            <line num="264" count="1" type="stmt"/>
            <line num="265" count="0" type="stmt"/>
            <line num="270" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockStringIMocksControl() : void"/>
            <line num="272" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="1" type="stmt"/>
            <line num="278" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCreateMockString() : void"/>
            <line num="280" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="282" count="1" type="stmt"/>
            <line num="283" count="1" type="stmt"/>
            <line num="284" count="0" type="stmt"/>
            <line num="286" count="1" type="stmt"/>
            <line num="290" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceMockString() : void"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="295" count="1" type="stmt"/>
            <line num="296" count="1" type="stmt"/>
            <line num="299" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testCreateStrictMockString() : void"/>
            <line num="301" count="1" type="stmt"/>
            <line num="303" count="1" type="stmt"/>
            <line num="304" count="1" type="stmt"/>
            <line num="305" count="1" type="stmt"/>
            <line num="306" count="1" type="stmt"/>
            <line num="307" count="1" type="stmt"/>
            <line num="308" count="0" type="stmt"/>
            <line num="310" count="1" type="stmt"/>
            <line num="314" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMock_ConstructorWithoutArgs() : void"/>
            <line num="316" count="1" type="stmt"/>
         </file>
         <file name="MockedExceptionTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\MockedExceptionTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="65" coveredstatements="37" coveredmethods="4" complexity="8" coveredconditionals="0" statements="37" loc="107" coveredelements="41" elements="41"/>
            <class name="MockedExceptionTest">
               <metrics conditionals="0" methods="4" coveredstatements="37" complexity="8" testpasses="20" testruns="20" coveredmethods="4" coveredconditionals="0" statements="37" testfailures="0" coveredelements="41" elements="41" testduration="0.048999995"/>
            </class>
            <line num="28" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0070" signature="testMockedException() : void"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testExplicitFillInStackTrace() : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testNotMockedFillInStackTrace() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testRealException() : void"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
         </file>
         <file name="MocksControlTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\MocksControlTest.java">
            <metrics classes="2" methods="13" conditionals="0" ncloc="132" coveredstatements="60" coveredmethods="11" complexity="17" coveredconditionals="0" statements="67" loc="185" coveredelements="71" elements="80"/>
            <class name="MocksControlTest">
               <metrics conditionals="0" methods="9" coveredstatements="58" complexity="13" testpasses="40" testruns="40" coveredmethods="9" coveredconditionals="0" statements="62" testfailures="0" coveredelements="67" elements="71" testduration="0.022000002"/>
            </class>
            <class name="MocksControlTest.A">
               <metrics methods="4" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="4" coveredconditionals="0" statements="5" coveredelements="4" elements="9"/>
            </class>
            <line num="37" count="1" complexity="1" type="method" signature="A(int)"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" count="1" complexity="1" type="method" signature="foo() : int"/>
            <line num="42" count="1" type="stmt"/>
            <line num="45" count="0" complexity="1" type="method" signature="bar() : int"/>
            <line num="46" count="0" type="stmt"/>
            <line num="49" count="0" complexity="1" type="method" signature="add(int) : boolean"/>
            <line num="50" count="0" type="stmt"/>
            <line num="51" count="0" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_Interface() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_Class() : void"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="69" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMocksControl_Class_WithName() : void"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="76" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testMocksControl_PartialMock_NoConstructorCalled() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_NamedPartialMock_NoConstructorCalled() : void"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_PartialMock_ConstructorCalled() : void"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="127" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMocksControl_NamedPartialMock_ConstructorCalled() : void"/>
            <line num="130" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="146" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0" signature="testInterfaceForbidden_PartialMock() : void"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="0" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="0" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="0" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="0" type="stmt"/>
            <line num="179" count="1" complexity="1" type="method" signature="testList(IMocksControl,List&lt;?&gt;) : void"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
         </file>
         <file name="NameTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\NameTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="70" coveredstatements="36" coveredmethods="5" complexity="10" coveredconditionals="0" statements="37" loc="96" coveredelements="41" elements="42"/>
            <class name="NameTest">
               <metrics conditionals="0" methods="5" coveredstatements="36" complexity="10" testpasses="25" testruns="25" coveredmethods="5" coveredconditionals="0" statements="37" testfailures="0" coveredelements="41" elements="42" testduration="0.0040"/>
            </class>
            <line num="29" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="nameForMock() : void"/>
            <line num="31" count="1" type="stmt"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="43" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nameForStrictMock() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="nameForNiceMock() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="71" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="nameForMocksControl() : void"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="86" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier() : void"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="0" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
         </file>
         <file name="NiceMockTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\NiceMockTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="34" coveredstatements="10" coveredmethods="5" complexity="5" coveredconditionals="0" statements="10" loc="61" coveredelements="15" elements="15"/>
            <class name="NiceMockTest">
               <metrics conditionals="0" methods="5" coveredstatements="10" complexity="5" testpasses="20" testruns="20" coveredmethods="5" coveredconditionals="0" statements="10" testfailures="0" coveredelements="15" elements="15" testduration="0.0"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="38" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueBoolean() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueFloat() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueDouble() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="defaultReturnValueObject() : void"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
         </file>
         <file name="PartialMockingTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\PartialMockingTest.java">
            <metrics classes="2" methods="7" conditionals="0" ncloc="64" coveredstatements="19" coveredmethods="6" complexity="9" coveredconditionals="0" statements="25" loc="99" coveredelements="25" elements="32"/>
            <class name="PartialMockingTest">
               <metrics conditionals="0" methods="5" coveredstatements="18" complexity="7" testpasses="25" testruns="25" coveredmethods="5" coveredconditionals="0" statements="23" testfailures="0" coveredelements="23" elements="28" testduration="0.024"/>
            </class>
            <class name="PartialMockingTest.A">
               <metrics methods="2" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="2" coveredconditionals="0" statements="2" coveredelements="2" elements="4"/>
            </class>
            <line num="38" count="1" complexity="1" type="method" signature="A(String)"/>
            <line num="39" count="1" type="stmt"/>
            <line num="42" count="0" complexity="1" type="method" signature="A(int)"/>
            <line num="43" count="0" type="stmt"/>
            <line num="49" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testPartialMock_PublicConstructor() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="56" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="testPartialMock_ProtectedConstructor() : void"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testPartialMock_ConstructorNotFound() : void"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="0" type="stmt"/>
            <line num="73" count="0" type="stmt"/>
            <line num="75" count="0" type="stmt"/>
            <line num="76" count="0" type="stmt"/>
            <line num="80" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testPartialMock_InvalidParams() : void"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="0" type="stmt"/>
            <line num="87" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testPartialMock_ExceptionInConstructor() : void"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
         </file>
         <file name="ReflectionUtilsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\ReflectionUtilsTest.java">
            <metrics classes="3" methods="26" conditionals="0" ncloc="118" coveredstatements="31" coveredmethods="16" complexity="28" coveredconditionals="0" statements="32" loc="167" coveredelements="47" elements="58"/>
            <class name="ReflectionUtilsTest">
               <metrics conditionals="0" methods="16" coveredstatements="31" complexity="18" testpasses="80" testruns="80" coveredmethods="16" coveredconditionals="0" statements="32" testfailures="0" coveredelements="47" elements="48" testduration="0.009000001"/>
            </class>
            <class name="ReflectionUtilsTest.B">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="0" coveredelements="0" elements="1"/>
            </class>
            <class name="ReflectionUtilsTest.A">
               <metrics methods="9" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="9" coveredconditionals="0" statements="0" coveredelements="0" elements="9"/>
            </class>
            <line num="32" count="0" complexity="1" type="method" signature="foo(long) : void"/>
            <line num="38" count="0" complexity="1" type="method" signature="A(boolean,byte,int,short,char,long,float,double)"/>
            <line num="42" count="0" complexity="1" type="method" signature="A(int)"/>
            <line num="45" count="0" complexity="1" type="method" signature="A(long)"/>
            <line num="48" count="0" complexity="1" type="method" signature="A(byte)"/>
            <line num="51" count="0" complexity="1" type="method" signature="A(char)"/>
            <line num="54" count="0" complexity="1" type="method" signature="A(CharSequence)"/>
            <line num="57" count="0" complexity="1" type="method" signature="A(StringBuilder)"/>
            <line num="60" count="0" complexity="1" type="method" signature="foo(String) : void"/>
            <line num="63" count="0" complexity="1" type="method" signature="foo(int) : void"/>
            <line num="67" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFindMethod() : void"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFindMethod_NotFound() : void"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testFindMethod_Ambiguous() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="88" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFindMethod_WrongParams() : void"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="94" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFindMethod_Superclass() : void"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="100" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFindMethodClassOfQStringClassOfQArray() : void"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="106" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_public() : void"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="112" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_protected() : void"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="118" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_default() : void"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_private() : void"/>
            <line num="126" count="1" type="stmt"/>
            <line num="129" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_twoMatching() : void"/>
            <line num="131" count="1" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_notFound() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="139" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_WrongParams() : void"/>
            <line num="141" count="1" type="stmt"/>
            <line num="144" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetConstructor_AllPrimitives() : void"/>
            <line num="146" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="151" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testGetDeclareMethod_Found() : void"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="158" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testGetDeclareMethod_NotFound() : void"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="0" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
         </file>
         <file name="SerializationTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\SerializationTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="66" coveredstatements="36" coveredmethods="4" complexity="5" coveredconditionals="0" statements="36" loc="124" coveredelements="40" elements="41"/>
            <class name="SerializationTest">
               <metrics conditionals="0" methods="5" coveredstatements="36" complexity="5" testpasses="15" testruns="15" coveredmethods="4" coveredconditionals="0" statements="36" testfailures="0" coveredelements="40" elements="41" testduration="0.232"/>
            </class>
            <line num="35" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0080" signature="test() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.028" signature="testClass() : void"/>
            <line num="62" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" testsuccess="true" count="1" complexity="1" type="method" testduration="0.015" signature="testAllMockedMethod() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="104" count="0" complexity="1" type="method" signature="testChangingClassLoader() : void"/>
            <line num="110" count="1" complexity="1" type="method" signature="serialize(T) : T"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
         </file>
         <file name="StubTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\StubTest.java">
            <metrics classes="1" methods="3" conditionals="0" ncloc="55" coveredstatements="30" coveredmethods="3" complexity="6" coveredconditionals="0" statements="30" loc="86" coveredelements="33" elements="33"/>
            <class name="StubTest">
               <metrics conditionals="0" methods="3" coveredstatements="30" complexity="6" testpasses="10" testruns="10" coveredmethods="3" coveredconditionals="0" statements="30" testfailures="0" coveredelements="33" elements="33" testduration="0.0060000005"/>
            </class>
            <line num="31" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="33" count="1" type="stmt"/>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="stub() : void"/>
            <line num="38" count="1" type="stmt"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="stubWithReturnValue() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
         </file>
         <file name="ThreadingTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\ThreadingTest.java">
            <metrics classes="1" methods="10" conditionals="0" ncloc="127" coveredstatements="67" coveredmethods="10" complexity="13" coveredconditionals="0" statements="68" loc="204" coveredelements="77" elements="78"/>
            <class name="ThreadingTest">
               <metrics conditionals="0" methods="10" coveredstatements="67" complexity="13" testpasses="30" testruns="30" coveredmethods="10" coveredconditionals="0" statements="68" testfailures="0" coveredelements="77" elements="78" testduration="0.061999984"/>
            </class>
            <line num="41" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0070" signature="testThreadSafe() : void"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" complexity="1" type="method" signature="call() : String"/>
            <line num="51" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testThreadNotSafe() : void"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" complexity="1" type="method" signature="call() : String"/>
            <line num="82" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="110" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMockUsedCorrectly() : void"/>
            <line num="112" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="125" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testChangeDefault() : void"/>
            <line num="127" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" complexity="1" type="method" signature="run() : void"/>
            <line num="138" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="0" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="156" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testRecordingInMultipleThreads() : void"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" complexity="1" type="method" signature="call() : String"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="185" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testCleanupAfterFailureInRecordPhase() : void"/>
            <line num="188" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
         </file>
         <file name="UsageConstraintsTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\UsageConstraintsTest.java">
            <metrics classes="2" methods="35" conditionals="6" ncloc="530" coveredstatements="373" coveredmethods="35" complexity="47" coveredconditionals="3" statements="382" loc="651" coveredelements="411" elements="423"/>
            <class name="UsageConstraintsTest">
               <metrics conditionals="6" methods="33" coveredstatements="371" complexity="45" testpasses="145" testruns="145" coveredmethods="33" coveredconditionals="3" statements="380" testfailures="0" coveredelements="407" elements="419" testduration="0.087000005"/>
            </class>
            <class name="UsageConstraintsTest.A">
               <metrics methods="2" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="2" coveredconditionals="0" statements="2" coveredelements="4" elements="4"/>
            </class>
            <line num="39" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0" signature="equalsMissing() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="0" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="0" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="0" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="74" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="differentConstraintsOnSameCall() : void"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="equals() : void"/>
            <line num="85" count="1" type="stmt"/>
            <line num="86" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="0" type="stmt"/>
            <line num="96" testsuccess="true" count="1" complexity="7" type="method" testduration="0.0" signature="constraints() : void"/>
            <line num="98" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="107" falsecount="1" type="cond" truecount="0"/>
            <line num="108" count="0" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="116" falsecount="1" type="cond" truecount="0"/>
            <line num="117" count="0" type="stmt"/>
            <line num="119" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="123" count="1" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="125" falsecount="1" type="cond" truecount="0"/>
            <line num="126" count="0" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="132" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="andOverloaded() : void"/>
            <line num="134" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="1" type="stmt"/>
            <line num="142" count="1" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="158" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="orOverloaded() : void"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="162" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="184" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="notOverloaded() : void"/>
            <line num="186" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="202" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="206" count="1" type="stmt"/>
            <line num="207" count="1" type="stmt"/>
            <line num="210" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="lessOrEqualOverloaded() : void"/>
            <line num="212" count="1" type="stmt"/>
            <line num="213" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="223" count="1" type="stmt"/>
            <line num="224" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="230" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="lessThanOverloaded() : void"/>
            <line num="232" count="1" type="stmt"/>
            <line num="233" count="1" type="stmt"/>
            <line num="234" count="1" type="stmt"/>
            <line num="235" count="1" type="stmt"/>
            <line num="236" count="1" type="stmt"/>
            <line num="237" count="1" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="240" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="242" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="244" count="1" type="stmt"/>
            <line num="245" count="1" type="stmt"/>
            <line num="246" count="1" type="stmt"/>
            <line num="247" count="1" type="stmt"/>
            <line num="250" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="greaterOrEqualOverloaded() : void"/>
            <line num="252" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="254" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="256" count="1" type="stmt"/>
            <line num="257" count="1" type="stmt"/>
            <line num="258" count="1" type="stmt"/>
            <line num="259" count="1" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="1" type="stmt"/>
            <line num="263" count="1" type="stmt"/>
            <line num="264" count="1" type="stmt"/>
            <line num="265" count="1" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="270" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="greaterThanOverloaded() : void"/>
            <line num="272" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="1" type="stmt"/>
            <line num="276" count="1" type="stmt"/>
            <line num="277" count="1" type="stmt"/>
            <line num="278" count="1" type="stmt"/>
            <line num="279" count="1" type="stmt"/>
            <line num="280" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="282" count="1" type="stmt"/>
            <line num="283" count="1" type="stmt"/>
            <line num="284" count="1" type="stmt"/>
            <line num="285" count="1" type="stmt"/>
            <line num="286" count="1" type="stmt"/>
            <line num="287" count="1" type="stmt"/>
            <line num="290" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="cmpTo() : void"/>
            <line num="292" count="1" type="stmt"/>
            <line num="293" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="295" count="1" type="stmt"/>
            <line num="301" count="1" complexity="1" type="method" signature="A(int)"/>
            <line num="302" count="1" type="stmt"/>
            <line num="305" count="1" complexity="1" type="method" signature="getValue() : int"/>
            <line num="306" count="1" type="stmt"/>
            <line num="310" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0060" signature="compareWithComparator() : void"/>
            <line num="313" count="1" type="stmt"/>
            <line num="314" count="1" complexity="1" type="method" signature="compare(A,A) : int"/>
            <line num="315" count="1" type="stmt"/>
            <line num="318" count="1" complexity="1" type="method" signature="compare(Object,Object) : int"/>
            <line num="319" count="1" type="stmt"/>
            <line num="324" count="1" type="stmt"/>
            <line num="325" count="1" type="stmt"/>
            <line num="326" count="1" type="stmt"/>
            <line num="329" count="1" type="stmt"/>
            <line num="331" count="1" type="stmt"/>
            <line num="333" count="1" type="stmt"/>
            <line num="335" count="1" type="stmt"/>
            <line num="336" count="1" type="stmt"/>
            <line num="338" count="1" type="stmt"/>
            <line num="339" count="1" type="stmt"/>
            <line num="341" count="1" type="stmt"/>
            <line num="343" count="1" type="stmt"/>
            <line num="345" count="1" type="stmt"/>
            <line num="346" count="1" type="stmt"/>
            <line num="347" count="1" type="stmt"/>
            <line num="348" count="0" type="stmt"/>
            <line num="352" count="1" type="stmt"/>
            <line num="353" count="1" type="stmt"/>
            <line num="354" count="1" type="stmt"/>
            <line num="356" count="1" type="stmt"/>
            <line num="357" count="1" type="stmt"/>
            <line num="358" count="1" type="stmt"/>
            <line num="360" count="1" type="stmt"/>
            <line num="361" count="1" type="stmt"/>
            <line num="362" count="1" type="stmt"/>
            <line num="364" count="1" type="stmt"/>
            <line num="365" count="1" type="stmt"/>
            <line num="366" count="1" type="stmt"/>
            <line num="368" count="1" type="stmt"/>
            <line num="369" count="1" type="stmt"/>
            <line num="370" count="1" type="stmt"/>
            <line num="372" count="1" type="stmt"/>
            <line num="375" count="1" complexity="2" type="method" signature="checkItFails(A) : void"/>
            <line num="376" count="1" type="stmt"/>
            <line num="377" count="1" type="stmt"/>
            <line num="378" count="0" type="stmt"/>
            <line num="383" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="any() : void"/>
            <line num="385" count="1" type="stmt"/>
            <line num="386" count="1" type="stmt"/>
            <line num="387" count="1" type="stmt"/>
            <line num="388" count="1" type="stmt"/>
            <line num="389" count="1" type="stmt"/>
            <line num="390" count="1" type="stmt"/>
            <line num="391" count="1" type="stmt"/>
            <line num="392" count="1" type="stmt"/>
            <line num="393" count="1" type="stmt"/>
            <line num="394" count="1" type="stmt"/>
            <line num="395" count="1" type="stmt"/>
            <line num="396" count="1" type="stmt"/>
            <line num="397" count="1" type="stmt"/>
            <line num="398" count="1" type="stmt"/>
            <line num="399" count="1" type="stmt"/>
            <line num="400" count="1" type="stmt"/>
            <line num="401" count="1" type="stmt"/>
            <line num="402" count="1" type="stmt"/>
            <line num="403" count="1" type="stmt"/>
            <line num="404" count="1" type="stmt"/>
            <line num="405" count="1" type="stmt"/>
            <line num="406" count="1" type="stmt"/>
            <line num="407" count="1" type="stmt"/>
            <line num="408" count="1" type="stmt"/>
            <line num="411" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="arrayEquals() : void"/>
            <line num="413" count="1" type="stmt"/>
            <line num="414" count="1" type="stmt"/>
            <line num="415" count="1" type="stmt"/>
            <line num="416" count="1" type="stmt"/>
            <line num="417" count="1" type="stmt"/>
            <line num="418" count="1" type="stmt"/>
            <line num="419" count="1" type="stmt"/>
            <line num="420" count="1" type="stmt"/>
            <line num="421" count="1" type="stmt"/>
            <line num="422" count="1" type="stmt"/>
            <line num="423" count="1" type="stmt"/>
            <line num="424" count="1" type="stmt"/>
            <line num="425" count="1" type="stmt"/>
            <line num="426" count="1" type="stmt"/>
            <line num="427" count="1" type="stmt"/>
            <line num="428" count="1" type="stmt"/>
            <line num="429" count="1" type="stmt"/>
            <line num="430" count="1" type="stmt"/>
            <line num="431" count="1" type="stmt"/>
            <line num="432" count="1" type="stmt"/>
            <line num="433" count="1" type="stmt"/>
            <line num="434" count="1" type="stmt"/>
            <line num="437" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="greaterOrEqual() : void"/>
            <line num="439" count="1" type="stmt"/>
            <line num="440" count="1" type="stmt"/>
            <line num="442" count="1" type="stmt"/>
            <line num="444" count="1" type="stmt"/>
            <line num="445" count="1" type="stmt"/>
            <line num="446" count="1" type="stmt"/>
            <line num="447" count="1" type="stmt"/>
            <line num="448" count="1" type="stmt"/>
            <line num="450" count="1" type="stmt"/>
            <line num="453" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="greaterThan() : void"/>
            <line num="455" count="1" type="stmt"/>
            <line num="456" count="1" type="stmt"/>
            <line num="458" count="1" type="stmt"/>
            <line num="460" count="1" type="stmt"/>
            <line num="461" count="1" type="stmt"/>
            <line num="462" count="1" type="stmt"/>
            <line num="463" count="1" type="stmt"/>
            <line num="464" count="1" type="stmt"/>
            <line num="466" count="1" type="stmt"/>
            <line num="469" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="lessOrEqual() : void"/>
            <line num="471" count="1" type="stmt"/>
            <line num="472" count="1" type="stmt"/>
            <line num="474" count="1" type="stmt"/>
            <line num="476" count="1" type="stmt"/>
            <line num="477" count="1" type="stmt"/>
            <line num="478" count="1" type="stmt"/>
            <line num="479" count="1" type="stmt"/>
            <line num="480" count="1" type="stmt"/>
            <line num="482" count="1" type="stmt"/>
            <line num="485" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="lessThan() : void"/>
            <line num="487" count="1" type="stmt"/>
            <line num="488" count="1" type="stmt"/>
            <line num="490" count="1" type="stmt"/>
            <line num="492" count="1" type="stmt"/>
            <line num="493" count="1" type="stmt"/>
            <line num="494" count="1" type="stmt"/>
            <line num="495" count="1" type="stmt"/>
            <line num="496" count="1" type="stmt"/>
            <line num="498" count="1" type="stmt"/>
            <line num="501" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testOr() : void"/>
            <line num="503" count="1" type="stmt"/>
            <line num="504" count="1" type="stmt"/>
            <line num="506" count="1" type="stmt"/>
            <line num="508" count="1" type="stmt"/>
            <line num="509" count="1" type="stmt"/>
            <line num="510" count="1" type="stmt"/>
            <line num="512" count="1" type="stmt"/>
            <line num="515" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNull() : void"/>
            <line num="517" count="1" type="stmt"/>
            <line num="518" count="1" type="stmt"/>
            <line num="519" count="1" type="stmt"/>
            <line num="521" count="1" type="stmt"/>
            <line num="523" count="1" type="stmt"/>
            <line num="524" count="1" type="stmt"/>
            <line num="525" count="1" type="stmt"/>
            <line num="527" count="1" type="stmt"/>
            <line num="530" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNotNull() : void"/>
            <line num="532" count="1" type="stmt"/>
            <line num="533" count="1" type="stmt"/>
            <line num="534" count="1" type="stmt"/>
            <line num="536" count="1" type="stmt"/>
            <line num="538" count="1" type="stmt"/>
            <line num="539" count="1" type="stmt"/>
            <line num="540" count="1" type="stmt"/>
            <line num="542" count="1" type="stmt"/>
            <line num="545" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testFind() : void"/>
            <line num="547" count="1" type="stmt"/>
            <line num="548" count="1" type="stmt"/>
            <line num="550" count="1" type="stmt"/>
            <line num="552" count="1" type="stmt"/>
            <line num="553" count="1" type="stmt"/>
            <line num="555" count="1" type="stmt"/>
            <line num="558" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMatches() : void"/>
            <line num="560" count="1" type="stmt"/>
            <line num="561" count="1" type="stmt"/>
            <line num="563" count="1" type="stmt"/>
            <line num="565" count="1" type="stmt"/>
            <line num="566" count="1" type="stmt"/>
            <line num="568" count="1" type="stmt"/>
            <line num="571" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testContains() : void"/>
            <line num="573" count="1" type="stmt"/>
            <line num="574" count="1" type="stmt"/>
            <line num="576" count="1" type="stmt"/>
            <line num="578" count="1" type="stmt"/>
            <line num="579" count="1" type="stmt"/>
            <line num="581" count="1" type="stmt"/>
            <line num="584" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testStartsWith() : void"/>
            <line num="586" count="1" type="stmt"/>
            <line num="587" count="1" type="stmt"/>
            <line num="589" count="1" type="stmt"/>
            <line num="591" count="1" type="stmt"/>
            <line num="592" count="1" type="stmt"/>
            <line num="594" count="1" type="stmt"/>
            <line num="597" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testEndsWith() : void"/>
            <line num="599" count="1" type="stmt"/>
            <line num="600" count="1" type="stmt"/>
            <line num="602" count="1" type="stmt"/>
            <line num="604" count="1" type="stmt"/>
            <line num="605" count="1" type="stmt"/>
            <line num="607" count="1" type="stmt"/>
            <line num="610" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="equalsWithDelta() : void"/>
            <line num="612" count="1" type="stmt"/>
            <line num="613" count="1" type="stmt"/>
            <line num="614" count="1" type="stmt"/>
            <line num="615" count="1" type="stmt"/>
            <line num="616" count="1" type="stmt"/>
            <line num="618" count="1" type="stmt"/>
            <line num="620" count="1" type="stmt"/>
            <line num="621" count="1" type="stmt"/>
            <line num="622" count="1" type="stmt"/>
            <line num="623" count="1" type="stmt"/>
            <line num="625" count="1" type="stmt"/>
            <line num="626" count="1" type="stmt"/>
            <line num="627" count="1" type="stmt"/>
            <line num="628" count="1" type="stmt"/>
            <line num="630" count="1" type="stmt"/>
            <line num="633" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testSame() : void"/>
            <line num="635" count="1" type="stmt"/>
            <line num="636" count="1" type="stmt"/>
            <line num="638" count="1" type="stmt"/>
            <line num="639" count="1" type="stmt"/>
            <line num="641" count="1" type="stmt"/>
            <line num="642" count="1" type="stmt"/>
            <line num="644" count="1" type="stmt"/>
            <line num="646" count="1" type="stmt"/>
            <line num="647" count="1" type="stmt"/>
            <line num="649" count="1" type="stmt"/>
         </file>
         <file name="UsageMatchersTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\UsageMatchersTest.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="12" coveredstatements="3" coveredmethods="1" complexity="1" coveredconditionals="0" statements="3" loc="36" coveredelements="4" elements="4"/>
            <class name="UsageMatchersTest">
               <metrics conditionals="0" methods="1" coveredstatements="3" complexity="1" testpasses="5" testruns="5" coveredmethods="1" coveredconditionals="0" statements="3" testfailures="0" coveredelements="4" elements="4" testduration="0.0010"/>
            </class>
            <line num="27" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="additionalMatchersFailAtReplay() : void"/>
            <line num="30" count="1" type="stmt"/>
            <line num="31" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
         </file>
         <file name="UsageStrictMockTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\UsageStrictMockTest.java">
            <metrics classes="1" methods="8" conditionals="14" ncloc="161" coveredstatements="88" coveredmethods="8" complexity="22" coveredconditionals="7" statements="95" loc="208" coveredelements="103" elements="117"/>
            <class name="UsageStrictMockTest">
               <metrics conditionals="14" methods="8" coveredstatements="88" complexity="22" testpasses="35" testruns="35" coveredmethods="8" coveredconditionals="7" statements="95" testfailures="0" coveredelements="103" elements="117" testduration="0.010000001"/>
            </class>
            <line num="33" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="35" count="1" type="stmt"/>
            <line num="36" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="41" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="orderedCallsSucces() : void"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="unorderedCallsFailure() : void"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="52" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="56" falsecount="1" type="cond" truecount="0"/>
            <line num="57" count="0" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="tooManyCallsFailure() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="72" falsecount="1" type="cond" truecount="0"/>
            <line num="73" count="0" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="tooFewCallsFailure() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="88" falsecount="1" type="cond" truecount="0"/>
            <line num="89" count="0" type="stmt"/>
            <line num="93" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0" signature="differentMethods() : void"/>
            <line num="96" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="112" count="1" type="stmt"/>
            <line num="114" count="1" type="stmt"/>
            <line num="115" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="120" falsecount="1" type="cond" truecount="0"/>
            <line num="121" count="0" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="126" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="131" count="1" type="stmt"/>
            <line num="135" count="1" type="stmt"/>
            <line num="135" falsecount="1" type="cond" truecount="0"/>
            <line num="136" count="0" type="stmt"/>
            <line num="140" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="range() : void"/>
            <line num="143" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="161" count="1" type="stmt"/>
            <line num="163" count="1" type="stmt"/>
            <line num="165" count="1" type="stmt"/>
            <line num="166" count="1" type="stmt"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="173" falsecount="1" type="cond" truecount="0"/>
            <line num="174" count="0" type="stmt"/>
            <line num="178" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="stubBehavior() : void"/>
            <line num="180" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="189" count="1" type="stmt"/>
            <line num="190" count="1" type="stmt"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="204" falsecount="1" type="cond" truecount="0"/>
            <line num="205" count="0" type="stmt"/>
         </file>
         <file name="UsageTest.java" path="D:\Programmation\easymock-clean\easymock\src\test\java\org\easymock\tests2\UsageTest.java">
            <metrics classes="1" methods="14" conditionals="8" ncloc="225" coveredstatements="123" coveredmethods="14" complexity="30" coveredconditionals="4" statements="134" loc="312" coveredelements="141" elements="156"/>
            <class name="UsageTest">
               <metrics conditionals="8" methods="14" coveredstatements="123" complexity="30" testpasses="65" testruns="65" coveredmethods="14" coveredconditionals="4" statements="134" testfailures="0" coveredelements="141" elements="156" testduration="0.017"/>
            </class>
            <line num="32" count="1" complexity="1" type="method" signature="setup() : void"/>
            <line num="34" count="1" type="stmt"/>
            <line num="37" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0010" signature="exactCallCountByLastCall() : void"/>
            <line num="39" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="51" falsecount="1" type="cond" truecount="0"/>
            <line num="52" count="0" type="stmt"/>
            <line num="55" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="openCallCountByLastCall() : void"/>
            <line num="57" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="66" testsuccess="true" count="1" complexity="4" type="method" testduration="0.0010" signature="exactCallCountByLastThrowable() : void"/>
            <line num="68" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="0" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="84" count="1" type="stmt"/>
            <line num="85" count="0" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="88" falsecount="1" type="cond" truecount="0"/>
            <line num="89" count="0" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="openCallCountByLastThrowable() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="103" count="1" type="stmt"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="112" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="moreThanOneArgument() : void"/>
            <line num="114" count="1" type="stmt"/>
            <line num="116" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="120" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="122" count="1" type="stmt"/>
            <line num="123" count="0" type="stmt"/>
            <line num="125" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="129" falsecount="1" type="cond" truecount="0"/>
            <line num="130" count="0" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="wrongArguments() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="137" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="141" count="0" type="stmt"/>
            <line num="143" count="1" type="stmt"/>
            <line num="150" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="summarizeSameObjectArguments() : void"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="154" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="158" count="0" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="167" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="argumentsOrdered() : void"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="178" count="0" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="191" testsuccess="true" count="1" complexity="3" type="method" testduration="0.0" signature="mixingOrderedAndUnordered() : void"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="200" count="1" type="stmt"/>
            <line num="201" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="206" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="214" falsecount="1" type="cond" truecount="0"/>
            <line num="215" count="0" type="stmt"/>
            <line num="218" count="1" type="stmt"/>
            <line num="219" count="1" type="stmt"/>
            <line num="220" count="1" type="stmt"/>
            <line num="221" count="1" type="stmt"/>
            <line num="222" count="1" type="stmt"/>
            <line num="224" count="1" type="stmt"/>
            <line num="228" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="resumeIfFailure() : void"/>
            <line num="230" count="1" type="stmt"/>
            <line num="231" count="1" type="stmt"/>
            <line num="232" count="1" type="stmt"/>
            <line num="234" count="1" type="stmt"/>
            <line num="236" count="1" type="stmt"/>
            <line num="237" count="1" type="stmt"/>
            <line num="241" count="1" type="stmt"/>
            <line num="243" count="1" type="stmt"/>
            <line num="246" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="defaultResetToNice() : void"/>
            <line num="248" count="1" type="stmt"/>
            <line num="250" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="253" count="1" type="stmt"/>
            <line num="255" count="1" type="stmt"/>
            <line num="257" count="1" type="stmt"/>
            <line num="259" count="1" type="stmt"/>
            <line num="262" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="strictResetToDefault() : void"/>
            <line num="264" count="1" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="267" count="1" type="stmt"/>
            <line num="269" count="1" type="stmt"/>
            <line num="271" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="276" count="1" type="stmt"/>
            <line num="278" count="1" type="stmt"/>
            <line num="279" count="1" type="stmt"/>
            <line num="281" count="1" type="stmt"/>
            <line num="284" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="niceToStrict() : void"/>
            <line num="286" count="1" type="stmt"/>
            <line num="288" count="1" type="stmt"/>
            <line num="290" count="1" type="stmt"/>
            <line num="292" count="1" type="stmt"/>
            <line num="294" count="1" type="stmt"/>
            <line num="296" count="1" type="stmt"/>
            <line num="297" count="1" type="stmt"/>
            <line num="299" count="1" type="stmt"/>
            <line num="301" count="1" type="stmt"/>
            <line num="302" count="1" type="stmt"/>
            <line num="303" count="0" type="stmt"/>
            <line num="307" count="1" type="stmt"/>
            <line num="308" count="1" type="stmt"/>
            <line num="310" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.classextension.tests">
         <metrics conditionals="0" methods="8" classes="2" files="1" coveredstatements="13" complexity="8" loc="90" ncloc="51" coveredmethods="6" coveredconditionals="0" statements="15" coveredelements="19" elements="23"/>
         <file name="MockingTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests\MockingTest.java">
            <metrics classes="2" methods="8" conditionals="0" ncloc="51" coveredstatements="13" coveredmethods="6" complexity="8" coveredconditionals="0" statements="15" loc="90" coveredelements="19" elements="23"/>
            <class name="MockingTest">
               <metrics conditionals="0" methods="6" coveredstatements="13" complexity="6" testpasses="4" testruns="4" coveredmethods="6" coveredconditionals="0" statements="13" testfailures="0" coveredelements="19" elements="19" testduration="0.012"/>
            </class>
            <class name="MockingTest.ClassToMock">
               <metrics methods="2" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="2" coveredconditionals="0" statements="2" coveredelements="0" elements="4"/>
            </class>
            <line num="40" count="0" complexity="1" type="method" signature="foo() : int"/>
            <line num="41" count="0" type="stmt"/>
            <line num="44" count="0" complexity="1" type="method" signature="method() : int"/>
            <line num="45" count="0" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.012" signature="testTwoMocks() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="65" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testInterfaceMocking() : void"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="71" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testNiceInterfaceMocking() : void"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="77" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testStrictInterfaceMocking() : void"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="83" count="1" complexity="1" type="method" signature="checkBehavior(IMocksControl,MockType) : void"/>
            <line num="84" count="1" type="stmt"/>
            <line num="87" count="1" complexity="1" type="method" signature="extractBehavior(IMocksControl) : MockType"/>
            <line num="88" count="1" type="stmt"/>
         </file>
      </package>
      <package name="org.easymock.classextension.tests2">
         <metrics conditionals="6" methods="127" classes="16" files="11" coveredstatements="465" complexity="160" loc="1674" ncloc="1171" coveredmethods="122" coveredconditionals="6" statements="499" coveredelements="593" elements="632"/>
         <file name="ClassExtensionHelperTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\ClassExtensionHelperTest.java">
            <metrics classes="1" methods="5" conditionals="0" ncloc="54" coveredstatements="15" coveredmethods="5" complexity="8" coveredconditionals="0" statements="18" loc="82" coveredelements="20" elements="23"/>
            <class name="ClassExtensionHelperTest">
               <metrics conditionals="0" methods="5" coveredstatements="15" complexity="8" testpasses="5" testruns="5" coveredmethods="5" coveredconditionals="0" statements="18" testfailures="0" coveredelements="20" elements="23" testduration="0.048"/>
            </class>
            <line num="38" testsuccess="true" count="1" complexity="1" type="method" testduration="0.013" signature="testGetControl_EasyMock() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" testsuccess="true" count="1" complexity="1" type="method" testduration="0.028" signature="testGetControl_EasyMockClassExtension() : void"/>
            <line num="46" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="50" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0030" signature="testGetControl_EnhancedButNotAMock() : void"/>
            <line num="52" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="0" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0040" signature="testGetControl_ProxyButNotMock() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="0" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="73" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testGetControl_NotAMock() : void"/>
            <line num="75" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="77" count="0" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
         </file>
         <file name="ClassProxyFactoryTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\ClassProxyFactoryTest.java">
            <metrics classes="1" methods="1" conditionals="0" ncloc="20" coveredstatements="6" coveredmethods="1" complexity="1" coveredconditionals="0" statements="6" loc="47" coveredelements="7" elements="7"/>
            <class name="ClassProxyFactoryTest">
               <metrics conditionals="0" methods="1" coveredstatements="6" complexity="1" testpasses="1" testruns="1" coveredmethods="1" coveredconditionals="0" statements="6" testfailures="0" coveredelements="7" elements="7" testduration="0.011"/>
            </class>
            <line num="34" testsuccess="true" count="1" complexity="1" type="method" testduration="0.011" signature="testRegisterClassNotLeaking() : void"/>
            <line num="37" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="41" count="1" type="stmt"/>
            <line num="42" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="44" count="1" type="stmt"/>
         </file>
         <file name="ConstructorArgsTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\ConstructorArgsTest.java">
            <metrics classes="2" methods="11" conditionals="0" ncloc="58" coveredstatements="14" coveredmethods="11" complexity="11" coveredconditionals="0" statements="14" loc="94" coveredelements="25" elements="25"/>
            <class name="ConstructorArgsTest">
               <metrics conditionals="0" methods="10" coveredstatements="14" complexity="10" testpasses="9" testruns="9" coveredmethods="10" coveredconditionals="0" statements="14" testfailures="0" coveredelements="24" elements="24" testduration="0.0070"/>
            </class>
            <class name="ConstructorArgsTest.A">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="1" complexity="1" coveredconditionals="0" statements="0" coveredelements="1" elements="1"/>
            </class>
            <line num="35" count="1" complexity="1" type="method" signature="A(String,int)"/>
            <line num="39" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0040" signature="testConstructorArgs() : void"/>
            <line num="41" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="checkArgs(ConstructorArgs) : void"/>
            <line num="47" count="1" type="stmt"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="54" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_WrongArgument() : void"/>
            <line num="56" count="1" type="stmt"/>
            <line num="59" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_NullPrimitive() : void"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_PrimitiveForObject() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="69" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_NullObject() : void"/>
            <line num="71" count="1" type="stmt"/>
            <line num="74" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_WrongPrimitive() : void"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testConstructorArgs_WrongNumberOfArgs() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testConstructorArgs_TypeExistsButPrivate() : void"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testConstructorArgs_TypeExistsButNotStatic() : void"/>
            <line num="91" count="1" type="stmt"/>
         </file>
         <file name="EasyMockClassExtensionTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\EasyMockClassExtensionTest.java">
            <metrics classes="2" methods="29" conditionals="6" ncloc="284" coveredstatements="135" coveredmethods="29" complexity="38" coveredconditionals="6" statements="141" loc="378" coveredelements="170" elements="176"/>
            <class name="EasyMockClassExtensionTest">
               <metrics conditionals="2" methods="24" coveredstatements="124" complexity="31" testpasses="16" testruns="16" coveredmethods="24" coveredconditionals="2" statements="130" testfailures="0" coveredelements="150" elements="156" testduration="0.062"/>
            </class>
            <class name="EasyMockClassExtensionTest.ParamEntry">
               <metrics methods="5" conditionals="4" coveredstatements="11" coveredmethods="5" complexity="7" coveredconditionals="4" statements="11" coveredelements="20" elements="20"/>
            </class>
            <line num="44" count="1" complexity="1" type="method" signature="ParamEntry(Class&lt;?&gt;[],Object[])"/>
            <line num="45" count="1" type="stmt"/>
            <line num="46" count="1" type="stmt"/>
            <line num="49" count="1" complexity="1" type="method" signature="isNamed() : boolean"/>
            <line num="50" count="1" type="stmt"/>
            <line num="53" count="1" complexity="1" type="method" signature="isConstructorCalled() : boolean"/>
            <line num="54" count="1" type="stmt"/>
            <line num="58" count="1" complexity="1" type="method" signature="getMock(String) : A"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="63" count="1" complexity="3" type="method" signature="test(A) : void"/>
            <line num="64" count="1" type="stmt"/>
            <line num="64" falsecount="1" type="cond" truecount="1"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="67" falsecount="1" type="cond" truecount="1"/>
            <line num="68" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="91" count="1" complexity="5" type="method" signature="&lt;clinit&gt;, line 91()"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="98" count="0" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="0" type="stmt"/>
            <line num="106" count="0" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="118" count="1" type="stmt"/>
            <line num="118" falsecount="1" type="cond" truecount="1"/>
            <line num="119" count="1" type="stmt"/>
            <line num="124" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testClassMocking() : void"/>
            <line num="126" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testInterfaceMocking() : void"/>
            <line num="132" count="1" type="stmt"/>
            <line num="133" count="1" type="stmt"/>
            <line num="136" count="1" complexity="1" type="method" signature="testList(List&lt;?&gt;) : void"/>
            <line num="137" count="1" type="stmt"/>
            <line num="138" count="1" type="stmt"/>
            <line num="139" count="1" type="stmt"/>
            <line num="140" count="1" type="stmt"/>
            <line num="143" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testResetReplay() : void"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="148" count="1" type="stmt"/>
            <line num="149" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="154" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testResetTo() : void"/>
            <line num="156" count="1" type="stmt"/>
            <line num="158" count="1" type="stmt"/>
            <line num="159" count="1" type="stmt"/>
            <line num="160" count="1" type="stmt"/>
            <line num="163" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMakeThreadSafe() : void"/>
            <line num="165" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="170" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testVarargs() : void"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="1" type="stmt"/>
            <line num="179" count="1" type="stmt"/>
            <line num="180" count="1" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="189" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCheckOrder() : void"/>
            <line num="192" count="1" type="stmt"/>
            <line num="193" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
            <line num="199" count="1" type="stmt"/>
            <line num="202" testsuccess="true" count="1" complexity="2" type="method" testduration="0.028" signature="testStrictMock_Partial() : void"/>
            <line num="205" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="218" count="0" type="stmt"/>
            <line num="223" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMock_Partial() : void"/>
            <line num="226" count="1" type="stmt"/>
            <line num="230" count="1" type="stmt"/>
            <line num="231" count="1" type="stmt"/>
            <line num="233" count="1" type="stmt"/>
            <line num="235" count="1" type="stmt"/>
            <line num="237" count="1" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="240" count="1" type="stmt"/>
            <line num="243" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNiceMock_Partial() : void"/>
            <line num="245" count="1" type="stmt"/>
            <line num="249" count="1" type="stmt"/>
            <line num="251" count="1" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="255" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0080" signature="testCompare() : void"/>
            <line num="258" count="1" type="stmt"/>
            <line num="259" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="1" type="stmt"/>
            <line num="264" count="1" type="stmt"/>
            <line num="266" count="1" type="stmt"/>
            <line num="268" count="1" type="stmt"/>
            <line num="271" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testNamedMock() : void"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="1" type="stmt"/>
            <line num="276" count="1" type="stmt"/>
            <line num="277" count="1" type="stmt"/>
            <line num="278" count="1" type="stmt"/>
            <line num="279" count="1" type="stmt"/>
            <line num="283" count="1" type="stmt"/>
            <line num="285" count="1" type="stmt"/>
            <line num="286" count="1" type="stmt"/>
            <line num="287" count="1" type="stmt"/>
            <line num="288" count="1" type="stmt"/>
            <line num="289" count="1" type="stmt"/>
            <line num="290" count="1" type="stmt"/>
            <line num="293" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0090" signature="testStrictMock() : void"/>
            <line num="295" count="1" type="stmt"/>
            <line num="296" count="1" type="stmt"/>
            <line num="297" count="1" type="stmt"/>
            <line num="298" count="1" type="stmt"/>
            <line num="302" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0030" signature="testNormalMock() : void"/>
            <line num="304" count="1" type="stmt"/>
            <line num="305" count="1" type="stmt"/>
            <line num="306" count="1" type="stmt"/>
            <line num="307" count="1" type="stmt"/>
            <line num="311" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testNiceMock() : void"/>
            <line num="313" count="1" type="stmt"/>
            <line num="314" count="1" type="stmt"/>
            <line num="315" count="1" type="stmt"/>
            <line num="316" count="1" type="stmt"/>
            <line num="320" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCreateMockBuilder() : void"/>
            <line num="322" count="1" type="stmt"/>
            <line num="323" count="1" type="stmt"/>
            <line num="324" count="1" type="stmt"/>
            <line num="329" count="1" complexity="2" type="method" signature="testStrict(A) : void"/>
            <line num="330" count="1" type="stmt"/>
            <line num="331" count="1" type="stmt"/>
            <line num="332" count="1" type="stmt"/>
            <line num="333" count="1" type="stmt"/>
            <line num="334" count="1" type="stmt"/>
            <line num="335" count="1" type="stmt"/>
            <line num="336" count="0" type="stmt"/>
            <line num="341" count="1" complexity="2" type="method" signature="testNormal(A) : void"/>
            <line num="342" count="1" type="stmt"/>
            <line num="343" count="1" type="stmt"/>
            <line num="344" count="1" type="stmt"/>
            <line num="345" count="1" type="stmt"/>
            <line num="347" count="1" type="stmt"/>
            <line num="348" count="1" type="stmt"/>
            <line num="350" count="1" type="stmt"/>
            <line num="351" count="1" type="stmt"/>
            <line num="352" count="0" type="stmt"/>
            <line num="357" count="1" complexity="1" type="method" signature="testNice(A) : void"/>
            <line num="358" count="1" type="stmt"/>
            <line num="359" count="1" type="stmt"/>
            <line num="360" count="1" type="stmt"/>
            <line num="361" count="1" type="stmt"/>
            <line num="366" count="1" complexity="1" type="method" signature="testNamed(A) : void"/>
            <line num="367" count="1" type="stmt"/>
            <line num="370" count="1" complexity="1" type="method" signature="testPartial_NoConstructorCalled(A) : void"/>
            <line num="372" count="1" type="stmt"/>
            <line num="375" count="1" complexity="1" type="method" signature="testPartial_ConstructorCalled(A) : void"/>
            <line num="376" count="1" type="stmt"/>
         </file>
         <file name="EasyMockSupportTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\EasyMockSupportTest.java">
            <metrics classes="2" methods="27" conditionals="0" ncloc="166" coveredstatements="57" coveredmethods="26" complexity="27" coveredconditionals="0" statements="58" loc="217" coveredelements="83" elements="85"/>
            <class name="EasyMockSupportTest">
               <metrics conditionals="0" methods="26" coveredstatements="57" complexity="26" testpasses="25" testruns="25" coveredmethods="26" coveredconditionals="0" statements="57" testfailures="0" coveredelements="83" elements="83" testduration="0.017"/>
            </class>
            <class name="EasyMockSupportTest.ToMock">
               <metrics methods="1" conditionals="0" coveredstatements="0" coveredmethods="0" complexity="1" coveredconditionals="0" statements="1" coveredelements="0" elements="2"/>
            </class>
            <line num="37" count="0" complexity="1" type="method" signature="foo() : int"/>
            <line num="38" count="0" type="stmt"/>
            <line num="46" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="48" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="52" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateStrictControl() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="58" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateControl() : void"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceControl() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="70" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockClassOfTMethodArray() : void"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateStrictMockStringClassOfTMethodArray() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="81" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateStrictMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="83" count="1" type="stmt"/>
            <line num="86" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testCreateStrictMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="88" count="1" type="stmt"/>
            <line num="92" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockClassOfTMethodArray() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="97" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockStringClassOfTMethodArray() : void"/>
            <line num="99" count="1" type="stmt"/>
            <line num="103" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="105" count="1" type="stmt"/>
            <line num="108" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="110" count="1" type="stmt"/>
            <line num="114" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfTMethodArray() : void"/>
            <line num="116" count="1" type="stmt"/>
            <line num="119" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceMockStringClassOfTMethodArray() : void"/>
            <line num="121" count="1" type="stmt"/>
            <line num="125" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfTConstructorArgsMethodArray() : void"/>
            <line num="127" count="1" type="stmt"/>
            <line num="130" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockStringClassOfTConstructorArgsMethodArray() : void"/>
            <line num="132" count="1" type="stmt"/>
            <line num="136" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockClassOfT() : void"/>
            <line num="138" count="1" type="stmt"/>
            <line num="141" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateStrictMockStringClassOfT() : void"/>
            <line num="143" count="1" type="stmt"/>
            <line num="146" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockClassOfT() : void"/>
            <line num="148" count="1" type="stmt"/>
            <line num="151" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockStringClassOfT() : void"/>
            <line num="153" count="1" type="stmt"/>
            <line num="156" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockClassOfT() : void"/>
            <line num="158" count="1" type="stmt"/>
            <line num="161" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateNiceMockStringClassOfT() : void"/>
            <line num="163" count="1" type="stmt"/>
            <line num="166" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAll() : void"/>
            <line num="168" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="1" type="stmt"/>
            <line num="173" count="1" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="179" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0050" signature="testCreateMockBuilder() : void"/>
            <line num="181" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="184" count="1" type="stmt"/>
            <line num="185" count="1" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="189" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockBuilder_existingControl() : void"/>
            <line num="191" count="1" type="stmt"/>
            <line num="192" count="1" type="stmt"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="200" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAllMockBuilderFlavors() : void"/>
            <line num="202" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="206" count="1" type="stmt"/>
            <line num="208" count="1" type="stmt"/>
            <line num="209" count="1" type="stmt"/>
            <line num="210" count="1" type="stmt"/>
            <line num="211" count="1" type="stmt"/>
            <line num="212" count="1" type="stmt"/>
            <line num="213" count="1" type="stmt"/>
            <line num="214" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
         </file>
         <file name="MockBuilderTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\MockBuilderTest.java">
            <metrics classes="1" methods="24" conditionals="0" ncloc="232" coveredstatements="90" coveredmethods="24" complexity="35" coveredconditionals="0" statements="101" loc="285" coveredelements="114" elements="125"/>
            <class name="MockBuilderTest">
               <metrics conditionals="0" methods="24" coveredstatements="90" complexity="35" testpasses="23" testruns="23" coveredmethods="24" coveredconditionals="0" statements="101" testfailures="0" coveredelements="114" elements="125" testduration="0.010000001"/>
            </class>
            <line num="42" count="1" complexity="1" type="method" signature="setUp() : void"/>
            <line num="45" count="1" type="stmt"/>
            <line num="48" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testAddMockedMethod() : void"/>
            <line num="50" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="76" count="1" type="stmt"/>
            <line num="79" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAddMethod_NotExisting() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="84" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testAddMethodWithParams_NotExisting() : void"/>
            <line num="86" count="1" type="stmt"/>
            <line num="89" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructorParams() : void"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="94" count="0" type="stmt"/>
            <line num="99" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructor_WrongClass() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="104" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testWithEmptyConstructor() : void"/>
            <line num="106" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="114" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithEmptyConstructor_NoEmptyConstructor() : void"/>
            <line num="116" count="1" type="stmt"/>
            <line num="117" count="1" type="stmt"/>
            <line num="118" count="0" type="stmt"/>
            <line num="123" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithConstructor() : void"/>
            <line num="125" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="0" type="stmt"/>
            <line num="134" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructor_Twice() : void"/>
            <line num="136" count="1" type="stmt"/>
            <line num="139" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testWithConstructorConstructorArgs() : void"/>
            <line num="142" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="145" count="1" type="stmt"/>
            <line num="146" count="1" type="stmt"/>
            <line num="147" count="0" type="stmt"/>
            <line num="152" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testWithConstructorWithArgs() : void"/>
            <line num="154" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="156" count="1" type="stmt"/>
            <line num="157" count="0" type="stmt"/>
            <line num="162" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testWithConstructorWithArgs_NotExisting() : void"/>
            <line num="165" count="1" type="stmt"/>
            <line num="168" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithArgsTwice() : void"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="1" type="stmt"/>
            <line num="172" count="0" type="stmt"/>
            <line num="174" count="1" type="stmt"/>
            <line num="180" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testWithArgs_WithoutConstructor() : void"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="1" type="stmt"/>
            <line num="184" count="0" type="stmt"/>
            <line num="186" count="1" type="stmt"/>
            <line num="192" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateMockIMocksControl() : void"/>
            <line num="194" count="1" type="stmt"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="199" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCreateMock() : void"/>
            <line num="201" count="1" type="stmt"/>
            <line num="203" count="1" type="stmt"/>
            <line num="204" count="1" type="stmt"/>
            <line num="205" count="1" type="stmt"/>
            <line num="206" count="0" type="stmt"/>
            <line num="211" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceMock() : void"/>
            <line num="213" count="1" type="stmt"/>
            <line num="215" count="1" type="stmt"/>
            <line num="216" count="1" type="stmt"/>
            <line num="217" count="1" type="stmt"/>
            <line num="220" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0020" signature="testCreateStrictMock() : void"/>
            <line num="222" count="1" type="stmt"/>
            <line num="225" count="1" type="stmt"/>
            <line num="226" count="1" type="stmt"/>
            <line num="227" count="1" type="stmt"/>
            <line num="228" count="1" type="stmt"/>
            <line num="229" count="1" type="stmt"/>
            <line num="230" count="0" type="stmt"/>
            <line num="235" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMockStringIMocksControl() : void"/>
            <line num="237" count="1" type="stmt"/>
            <line num="238" count="1" type="stmt"/>
            <line num="239" count="1" type="stmt"/>
            <line num="240" count="1" type="stmt"/>
            <line num="243" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testCreateMockString() : void"/>
            <line num="245" count="1" type="stmt"/>
            <line num="247" count="1" type="stmt"/>
            <line num="248" count="1" type="stmt"/>
            <line num="249" count="1" type="stmt"/>
            <line num="250" count="0" type="stmt"/>
            <line num="252" count="1" type="stmt"/>
            <line num="256" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testCreateNiceMockString() : void"/>
            <line num="258" count="1" type="stmt"/>
            <line num="260" count="1" type="stmt"/>
            <line num="261" count="1" type="stmt"/>
            <line num="262" count="1" type="stmt"/>
            <line num="263" count="1" type="stmt"/>
            <line num="266" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testCreateStrictMockString() : void"/>
            <line num="268" count="1" type="stmt"/>
            <line num="270" count="1" type="stmt"/>
            <line num="271" count="1" type="stmt"/>
            <line num="272" count="1" type="stmt"/>
            <line num="273" count="1" type="stmt"/>
            <line num="274" count="1" type="stmt"/>
            <line num="275" count="0" type="stmt"/>
            <line num="277" count="1" type="stmt"/>
            <line num="281" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testCreateMock_ConstructorWithoutArgs() : void"/>
            <line num="283" count="1" type="stmt"/>
         </file>
         <file name="MockedExceptionTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\MockedExceptionTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="70" coveredstatements="37" coveredmethods="4" complexity="8" coveredconditionals="0" statements="37" loc="112" coveredelements="41" elements="41"/>
            <class name="MockedExceptionTest">
               <metrics conditionals="0" methods="4" coveredstatements="37" complexity="8" testpasses="4" testruns="4" coveredmethods="4" coveredconditionals="0" statements="37" testfailures="0" coveredelements="41" elements="41" testduration="0.02"/>
            </class>
            <line num="30" testsuccess="true" count="1" complexity="2" type="method" testduration="0.02" signature="testMockedException() : void"/>
            <line num="32" count="1" type="stmt"/>
            <line num="33" count="1" type="stmt"/>
            <line num="34" count="1" type="stmt"/>
            <line num="35" count="1" type="stmt"/>
            <line num="37" count="1" type="stmt"/>
            <line num="38" count="1" type="stmt"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="46" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testExplicitFillInStackTrace() : void"/>
            <line num="49" count="1" type="stmt"/>
            <line num="50" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="54" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="59" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="62" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="68" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testNotMockedFillInStackTrace() : void"/>
            <line num="71" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="80" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="83" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="91" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testRealException() : void"/>
            <line num="94" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="104" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="110" count="1" type="stmt"/>
         </file>
         <file name="MocksControlTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\MocksControlTest.java">
            <metrics classes="2" methods="13" conditionals="0" ncloc="147" coveredstatements="60" coveredmethods="11" complexity="17" coveredconditionals="0" statements="67" loc="200" coveredelements="71" elements="80"/>
            <class name="MocksControlTest">
               <metrics conditionals="0" methods="9" coveredstatements="58" complexity="13" testpasses="8" testruns="8" coveredmethods="9" coveredconditionals="0" statements="62" testfailures="0" coveredelements="67" elements="71" testduration="0.0040"/>
            </class>
            <class name="MocksControlTest.A">
               <metrics methods="4" conditionals="0" coveredstatements="2" coveredmethods="2" complexity="4" coveredconditionals="0" statements="5" coveredelements="4" elements="9"/>
            </class>
            <line num="39" count="1" complexity="1" type="method" signature="A(int)"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" complexity="1" type="method" signature="foo() : int"/>
            <line num="44" count="1" type="stmt"/>
            <line num="47" count="0" complexity="1" type="method" signature="bar() : int"/>
            <line num="48" count="0" type="stmt"/>
            <line num="51" count="0" complexity="1" type="method" signature="add(int) : boolean"/>
            <line num="52" count="0" type="stmt"/>
            <line num="53" count="0" type="stmt"/>
            <line num="57" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_Interface() : void"/>
            <line num="59" count="1" type="stmt"/>
            <line num="60" count="1" type="stmt"/>
            <line num="61" count="1" type="stmt"/>
            <line num="64" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_Class() : void"/>
            <line num="66" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="68" count="1" type="stmt"/>
            <line num="71" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMocksControl_Class_WithName() : void"/>
            <line num="73" count="1" type="stmt"/>
            <line num="74" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="78" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0020" signature="testMocksControl_PartialMock_NoConstructorCalled() : void"/>
            <line num="81" count="1" type="stmt"/>
            <line num="82" count="1" type="stmt"/>
            <line num="85" count="1" type="stmt"/>
            <line num="87" count="1" type="stmt"/>
            <line num="88" count="1" type="stmt"/>
            <line num="89" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="98" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_NamedPartialMock_NoConstructorCalled() : void"/>
            <line num="101" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
            <line num="107" count="1" type="stmt"/>
            <line num="108" count="1" type="stmt"/>
            <line num="109" count="1" type="stmt"/>
            <line num="111" count="1" type="stmt"/>
            <line num="113" count="1" type="stmt"/>
            <line num="116" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testMocksControl_PartialMock_ConstructorCalled() : void"/>
            <line num="119" count="1" type="stmt"/>
            <line num="121" count="1" type="stmt"/>
            <line num="124" count="1" type="stmt"/>
            <line num="127" count="1" type="stmt"/>
            <line num="128" count="1" type="stmt"/>
            <line num="129" count="1" type="stmt"/>
            <line num="130" count="1" type="stmt"/>
            <line num="132" count="1" type="stmt"/>
            <line num="134" count="1" type="stmt"/>
            <line num="139" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testMocksControl_NamedPartialMock_ConstructorCalled() : void"/>
            <line num="142" count="1" type="stmt"/>
            <line num="144" count="1" type="stmt"/>
            <line num="147" count="1" type="stmt"/>
            <line num="150" count="1" type="stmt"/>
            <line num="151" count="1" type="stmt"/>
            <line num="152" count="1" type="stmt"/>
            <line num="153" count="1" type="stmt"/>
            <line num="155" count="1" type="stmt"/>
            <line num="157" count="1" type="stmt"/>
            <line num="160" testsuccess="true" count="1" complexity="5" type="method" testduration="0.0" signature="testInterfaceForbidden_PartialMock() : void"/>
            <line num="162" count="1" type="stmt"/>
            <line num="164" count="1" type="stmt"/>
            <line num="167" count="1" type="stmt"/>
            <line num="169" count="1" type="stmt"/>
            <line num="170" count="1" type="stmt"/>
            <line num="171" count="0" type="stmt"/>
            <line num="175" count="1" type="stmt"/>
            <line num="176" count="1" type="stmt"/>
            <line num="177" count="0" type="stmt"/>
            <line num="181" count="1" type="stmt"/>
            <line num="182" count="1" type="stmt"/>
            <line num="183" count="0" type="stmt"/>
            <line num="187" count="1" type="stmt"/>
            <line num="188" count="1" type="stmt"/>
            <line num="189" count="0" type="stmt"/>
            <line num="194" count="1" complexity="1" type="method" signature="testList(IMocksControl,List&lt;?&gt;) : void"/>
            <line num="195" count="1" type="stmt"/>
            <line num="196" count="1" type="stmt"/>
            <line num="197" count="1" type="stmt"/>
            <line num="198" count="1" type="stmt"/>
         </file>
         <file name="NopInvocationHandler.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\NopInvocationHandler.java">
            <metrics classes="1" methods="2" conditionals="0" ncloc="13" coveredstatements="1" coveredmethods="2" complexity="2" coveredconditionals="0" statements="1" loc="42" coveredelements="3" elements="3"/>
            <class name="NopInvocationHandler">
               <metrics methods="2" conditionals="0" coveredstatements="1" coveredmethods="2" complexity="2" coveredconditionals="0" statements="1" coveredelements="3" elements="3"/>
            </class>
            <line num="36" count="1" complexity="1" type="method" signature="NopInvocationHandler()"/>
            <line num="39" count="1" complexity="1" type="method" signature="invoke(Object,Method,Object[]) : Object"/>
            <line num="40" count="1" type="stmt"/>
         </file>
         <file name="PartialMockingTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\PartialMockingTest.java">
            <metrics classes="2" methods="7" conditionals="0" ncloc="73" coveredstatements="23" coveredmethods="6" complexity="9" coveredconditionals="0" statements="29" loc="115" coveredelements="29" elements="36"/>
            <class name="PartialMockingTest">
               <metrics conditionals="0" methods="5" coveredstatements="22" complexity="7" testpasses="5" testruns="5" coveredmethods="5" coveredconditionals="0" statements="27" testfailures="0" coveredelements="27" elements="32" testduration="0.0070"/>
            </class>
            <class name="PartialMockingTest.A">
               <metrics methods="2" conditionals="0" coveredstatements="1" coveredmethods="1" complexity="2" coveredconditionals="0" statements="2" coveredelements="2" elements="4"/>
            </class>
            <line num="40" count="1" complexity="1" type="method" signature="A(String)"/>
            <line num="41" count="1" type="stmt"/>
            <line num="44" count="0" complexity="1" type="method" signature="A(int)"/>
            <line num="45" count="0" type="stmt"/>
            <line num="51" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0" signature="testPartialMock_PublicConstructor() : void"/>
            <line num="54" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="56" count="1" type="stmt"/>
            <line num="58" count="1" type="stmt"/>
            <line num="61" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0050" signature="testPartialMock_ProtectedConstructor() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="64" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="66" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="70" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="72" count="1" type="stmt"/>
            <line num="75" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0010" signature="testPartialMock_ConstructorNotFound() : void"/>
            <line num="77" count="1" type="stmt"/>
            <line num="78" count="1" type="stmt"/>
            <line num="79" count="0" type="stmt"/>
            <line num="80" count="0" type="stmt"/>
            <line num="82" count="0" type="stmt"/>
            <line num="84" count="0" type="stmt"/>
            <line num="88" testsuccess="true" count="1" complexity="1" type="method" testduration="0.0010" signature="testPartialMock_InvalidParams() : void"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="0" type="stmt"/>
            <line num="95" testsuccess="true" count="1" complexity="2" type="method" testduration="0.0" signature="testPartialMock_ExceptionInConstructor() : void"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="99" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
            <line num="102" count="1" type="stmt"/>
            <line num="105" count="1" type="stmt"/>
         </file>
         <file name="SerializationTest.java" path="D:\Programmation\easymock-clean\easymock-classextension\src\test\java\org\easymock\classextension\tests2\SerializationTest.java">
            <metrics classes="1" methods="4" conditionals="0" ncloc="54" coveredstatements="27" coveredmethods="3" complexity="4" coveredconditionals="0" statements="27" loc="102" coveredelements="30" elements="31"/>
            <class name="SerializationTest">
               <metrics conditionals="0" methods="4" coveredstatements="27" complexity="4" testpasses="2" testruns="2" coveredmethods="3" coveredconditionals="0" statements="27" testfailures="0" coveredelements="30" elements="31" testduration="0.048"/>
            </class>
            <line num="36" testsuccess="true" count="1" complexity="1" type="method" testduration="0.012" signature="test() : void"/>
            <line num="40" count="1" type="stmt"/>
            <line num="43" count="1" type="stmt"/>
            <line num="45" count="1" type="stmt"/>
            <line num="47" count="1" type="stmt"/>
            <line num="49" count="1" type="stmt"/>
            <line num="51" count="1" type="stmt"/>
            <line num="53" count="1" type="stmt"/>
            <line num="55" count="1" type="stmt"/>
            <line num="57" count="1" type="stmt"/>
            <line num="60" testsuccess="true" count="1" complexity="1" type="method" testduration="0.036" signature="testAllMockedMethod() : void"/>
            <line num="63" count="1" type="stmt"/>
            <line num="65" count="1" type="stmt"/>
            <line num="67" count="1" type="stmt"/>
            <line num="69" count="1" type="stmt"/>
            <line num="71" count="1" type="stmt"/>
            <line num="73" count="1" type="stmt"/>
            <line num="75" count="1" type="stmt"/>
            <line num="77" count="1" type="stmt"/>
            <line num="79" count="1" type="stmt"/>
            <line num="82" count="0" complexity="1" type="method" signature="testChangingClassLoader() : void"/>
            <line num="88" count="1" complexity="1" type="method" signature="serialize(T) : T"/>
            <line num="90" count="1" type="stmt"/>
            <line num="91" count="1" type="stmt"/>
            <line num="92" count="1" type="stmt"/>
            <line num="93" count="1" type="stmt"/>
            <line num="95" count="1" type="stmt"/>
            <line num="96" count="1" type="stmt"/>
            <line num="97" count="1" type="stmt"/>
            <line num="98" count="1" type="stmt"/>
            <line num="100" count="1" type="stmt"/>
         </file>
      </package>
   </testproject>
</coverage>